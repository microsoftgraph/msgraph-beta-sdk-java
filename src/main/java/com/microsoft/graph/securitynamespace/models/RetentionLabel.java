// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.security.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.security.models.ActionAfterRetentionPeriod;
import com.microsoft.graph.security.models.BehaviorDuringRetentionPeriod;
import com.microsoft.graph.models.IdentitySet;
import com.microsoft.graph.security.models.DefaultRecordBehavior;
import com.microsoft.graph.security.models.RetentionDuration;
import com.microsoft.graph.security.models.RetentionTrigger;
import com.microsoft.graph.security.models.RetentionEventType;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.security.requests.DispositionReviewStageCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Retention Label.
 */
public class RetentionLabel extends Entity implements IJsonBackedObject {


    /**
     * The Action After Retention Period.
     * Specifies the action to take on a document with this label applied during the retention period. The possible values are: none, delete, startDispositionReview, unknownFutureValue.
     */
    @SerializedName(value = "actionAfterRetentionPeriod", alternate = {"ActionAfterRetentionPeriod"})
    @Expose
	@Nullable
    public ActionAfterRetentionPeriod actionAfterRetentionPeriod;

    /**
     * The Behavior During Retention Period.
     * Specifies how the behavior of a document with this label should be during the retention period. The possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue.
     */
    @SerializedName(value = "behaviorDuringRetentionPeriod", alternate = {"BehaviorDuringRetentionPeriod"})
    @Expose
	@Nullable
    public BehaviorDuringRetentionPeriod behaviorDuringRetentionPeriod;

    /**
     * The Created By.
     * Represents the user who created the retentionLabel.
     */
    @SerializedName(value = "createdBy", alternate = {"CreatedBy"})
    @Expose
	@Nullable
    public IdentitySet createdBy;

    /**
     * The Created Date Time.
     * Represents the date and time in which the retentionLabel is created.
     */
    @SerializedName(value = "createdDateTime", alternate = {"CreatedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime createdDateTime;

    /**
     * The Default Record Behavior.
     * Specifies the locked or unlocked state of a record label when it is created.The possible values are: startLocked, startUnlocked, unknownFutureValue.
     */
    @SerializedName(value = "defaultRecordBehavior", alternate = {"DefaultRecordBehavior"})
    @Expose
	@Nullable
    public DefaultRecordBehavior defaultRecordBehavior;

    /**
     * The Description For Admins.
     * Provides label information for the admin. Optional.
     */
    @SerializedName(value = "descriptionForAdmins", alternate = {"DescriptionForAdmins"})
    @Expose
	@Nullable
    public String descriptionForAdmins;

    /**
     * The Description For Users.
     * Provides the label information for the user. Optional.
     */
    @SerializedName(value = "descriptionForUsers", alternate = {"DescriptionForUsers"})
    @Expose
	@Nullable
    public String descriptionForUsers;

    /**
     * The Display Name.
     * Unique string that defines a label name.
     */
    @SerializedName(value = "displayName", alternate = {"DisplayName"})
    @Expose
	@Nullable
    public String displayName;

    /**
     * The Is In Use.
     * Specifies whether the label is currently being used.
     */
    @SerializedName(value = "isInUse", alternate = {"IsInUse"})
    @Expose
	@Nullable
    public Boolean isInUse;

    /**
     * The Label To Be Applied.
     * Specifies the replacement label to be applied automatically after the retention period of the current label ends.
     */
    @SerializedName(value = "labelToBeApplied", alternate = {"LabelToBeApplied"})
    @Expose
	@Nullable
    public String labelToBeApplied;

    /**
     * The Last Modified By.
     * The user who last modified the retentionLabel.
     */
    @SerializedName(value = "lastModifiedBy", alternate = {"LastModifiedBy"})
    @Expose
	@Nullable
    public IdentitySet lastModifiedBy;

    /**
     * The Last Modified Date Time.
     * The latest date time when the retentionLabel was modified.
     */
    @SerializedName(value = "lastModifiedDateTime", alternate = {"LastModifiedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime lastModifiedDateTime;

    /**
     * The Retention Duration.
     * Specifies the number of days to retain the content.
     */
    @SerializedName(value = "retentionDuration", alternate = {"RetentionDuration"})
    @Expose
	@Nullable
    public RetentionDuration retentionDuration;

    /**
     * The Retention Trigger.
     * Specifies whether the retention duration is calculated from the content creation date, labeled date, or last modification date. The possible values are: dateLabeled, dateCreated, dateModified, dateOfEvent, unknownFutureValue.
     */
    @SerializedName(value = "retentionTrigger", alternate = {"RetentionTrigger"})
    @Expose
	@Nullable
    public RetentionTrigger retentionTrigger;

    /**
     * The Disposition Review Stages.
     * Review stages during which reviewers are notified to determine whether a document must be deleted or retained.
     */
    @SerializedName(value = "dispositionReviewStages", alternate = {"DispositionReviewStages"})
    @Expose
	@Nullable
    public com.microsoft.graph.security.requests.DispositionReviewStageCollectionPage dispositionReviewStages;

    /**
     * The Retention Event Type.
     * 
     */
    @SerializedName(value = "retentionEventType", alternate = {"RetentionEventType"})
    @Expose
	@Nullable
    public RetentionEventType retentionEventType;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("dispositionReviewStages")) {
            dispositionReviewStages = serializer.deserializeObject(json.get("dispositionReviewStages"), com.microsoft.graph.security.requests.DispositionReviewStageCollectionPage.class);
        }
    }
}
