// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.security.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.security.models.FilePlanReferenceTemplate;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the File Plan Reference Template Request.
 */
public class FilePlanReferenceTemplateRequest extends BaseRequest<FilePlanReferenceTemplate> {
	
    /**
     * The request for the FilePlanReferenceTemplate
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public FilePlanReferenceTemplateRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, FilePlanReferenceTemplate.class);
    }

    /**
     * Gets the FilePlanReferenceTemplate from the service
     *
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilePlanReferenceTemplate> getAsync() {
        return sendAsync(HttpMethod.GET, null);
    }

    /**
     * Gets the FilePlanReferenceTemplate from the service
     *
     * @return the FilePlanReferenceTemplate from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilePlanReferenceTemplate get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @return a future with the deletion result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilePlanReferenceTemplate> deleteAsync() {
        return sendAsync(HttpMethod.DELETE, null);
    }

    /**
     * Delete this item from the service
     * @return the resulting response if the service returns anything on deletion
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    @Nullable
    public FilePlanReferenceTemplate delete() throws ClientException {
        return send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this FilePlanReferenceTemplate with a source
     *
     * @param sourceFilePlanReferenceTemplate the source object with updates
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilePlanReferenceTemplate> patchAsync(@Nonnull final FilePlanReferenceTemplate sourceFilePlanReferenceTemplate) {
        return sendAsync(HttpMethod.PATCH, sourceFilePlanReferenceTemplate);
    }

    /**
     * Patches this FilePlanReferenceTemplate with a source
     *
     * @param sourceFilePlanReferenceTemplate the source object with updates
     * @return the updated FilePlanReferenceTemplate
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilePlanReferenceTemplate patch(@Nonnull final FilePlanReferenceTemplate sourceFilePlanReferenceTemplate) throws ClientException {
        return send(HttpMethod.PATCH, sourceFilePlanReferenceTemplate);
    }

    /**
     * Creates a FilePlanReferenceTemplate with a new object
     *
     * @param newFilePlanReferenceTemplate the new object to create
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilePlanReferenceTemplate> postAsync(@Nonnull final FilePlanReferenceTemplate newFilePlanReferenceTemplate) {
        return sendAsync(HttpMethod.POST, newFilePlanReferenceTemplate);
    }

    /**
     * Creates a FilePlanReferenceTemplate with a new object
     *
     * @param newFilePlanReferenceTemplate the new object to create
     * @return the created FilePlanReferenceTemplate
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilePlanReferenceTemplate post(@Nonnull final FilePlanReferenceTemplate newFilePlanReferenceTemplate) throws ClientException {
        return send(HttpMethod.POST, newFilePlanReferenceTemplate);
    }

    /**
     * Creates a FilePlanReferenceTemplate with a new object
     *
     * @param newFilePlanReferenceTemplate the object to create/update
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilePlanReferenceTemplate> putAsync(@Nonnull final FilePlanReferenceTemplate newFilePlanReferenceTemplate) {
        return sendAsync(HttpMethod.PUT, newFilePlanReferenceTemplate);
    }

    /**
     * Creates a FilePlanReferenceTemplate with a new object
     *
     * @param newFilePlanReferenceTemplate the object to create/update
     * @return the created FilePlanReferenceTemplate
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilePlanReferenceTemplate put(@Nonnull final FilePlanReferenceTemplate newFilePlanReferenceTemplate) throws ClientException {
        return send(HttpMethod.PUT, newFilePlanReferenceTemplate);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public FilePlanReferenceTemplateRequest select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public FilePlanReferenceTemplateRequest expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

}

