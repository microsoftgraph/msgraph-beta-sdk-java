// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.ZebraFotaNetworkType;
import com.microsoft.graph.models.ZebraFotaScheduleMode;
import com.microsoft.graph.models.ZebraFotaUpdateType;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Zebra Fota Deployment Settings.
 */
public class ZebraFotaDeploymentSettings implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Battery Rule Minimum Battery Level Percentage.
     * Minimum battery level (%) required for both download and installation. Default: -1 (System defaults). Maximum is 100.
     */
    @SerializedName(value = "batteryRuleMinimumBatteryLevelPercentage", alternate = {"BatteryRuleMinimumBatteryLevelPercentage"})
    @Expose
	@Nullable
    public Integer batteryRuleMinimumBatteryLevelPercentage;

    /**
     * The Battery Rule Require Charger.
     * Flag indicating if charger is required. When set to false, the client can install updates whether the device is in or out of the charger. Applied only for installation. Defaults to false.
     */
    @SerializedName(value = "batteryRuleRequireCharger", alternate = {"BatteryRuleRequireCharger"})
    @Expose
	@Nullable
    public Boolean batteryRuleRequireCharger;

    /**
     * The Device Model.
     * Deploy update for devices with this model only.
     */
    @SerializedName(value = "deviceModel", alternate = {"DeviceModel"})
    @Expose
	@Nullable
    public String deviceModel;

    /**
     * The Download Rule Network Type.
     * Download network type as described in 'zebraFotaNetworkType'. Default: any. Possible values are: any, wifi, cellular, wifiAndCellular, unknownFutureValue.
     */
    @SerializedName(value = "downloadRuleNetworkType", alternate = {"DownloadRuleNetworkType"})
    @Expose
	@Nullable
    public ZebraFotaNetworkType downloadRuleNetworkType;

    /**
     * The Download Rule Start Date Time.
     * Date and time in the device time zone when the download will start (e.g., 2018-07-25T10:20:32). The default value is UTC now and the maximum is 10 days from deployment creation.
     */
    @SerializedName(value = "downloadRuleStartDateTime", alternate = {"DownloadRuleStartDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime downloadRuleStartDateTime;

    /**
     * The Firmware Target Board Support Package Version.
     * Deployment's Board Support Package (BSP. E.g.: '01.18.02.00'). Required only for custom update type.
     */
    @SerializedName(value = "firmwareTargetBoardSupportPackageVersion", alternate = {"FirmwareTargetBoardSupportPackageVersion"})
    @Expose
	@Nullable
    public String firmwareTargetBoardSupportPackageVersion;

    /**
     * The Firmware Target Os Version.
     * Target OS Version (e.g.: '8.1.0'). Required only for custom update type.
     */
    @SerializedName(value = "firmwareTargetOsVersion", alternate = {"FirmwareTargetOsVersion"})
    @Expose
	@Nullable
    public String firmwareTargetOsVersion;

    /**
     * The Firmware Target Patch.
     * Target patch name (e.g.: 'U06'). Required only for custom update type.
     */
    @SerializedName(value = "firmwareTargetPatch", alternate = {"FirmwareTargetPatch"})
    @Expose
	@Nullable
    public String firmwareTargetPatch;

    /**
     * The Install Rule Start Date Time.
     * Date and time in device time zone when the install will start. Default - download startDate if configured, otherwise defaults to NOW. Ignored when deployment update type was set to auto.
     */
    @SerializedName(value = "installRuleStartDateTime", alternate = {"InstallRuleStartDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime installRuleStartDateTime;

    /**
     * The Install Rule Window End Time.
     * Time of day after which the install cannot start. Possible range is 00:30:00 to 23:59:59. Should be greater than 'installRuleWindowStartTime' by 30 mins. The time is expressed in a 24-hour format, as hh:mm, and is in the device time zone. Default - 23:59:59. Respected for all values of update type, including AUTO.
     */
    @SerializedName(value = "installRuleWindowEndTime", alternate = {"InstallRuleWindowEndTime"})
    @Expose
	@Nullable
    public com.microsoft.graph.core.TimeOfDay installRuleWindowEndTime;

    /**
     * The Install Rule Window Start Time.
     * Time of day (00:00:00 - 23:30:00) when installation should begin. The time is expressed in a 24-hour format, as hh:mm, and is in the device time zone. Default - 00:00:00. Respected for all values of update type, including AUTO.
     */
    @SerializedName(value = "installRuleWindowStartTime", alternate = {"InstallRuleWindowStartTime"})
    @Expose
	@Nullable
    public com.microsoft.graph.core.TimeOfDay installRuleWindowStartTime;

    /**
     * The Schedule Duration In Days.
     * Maximum 28 days. Default is 28 days. Sequence of dates are: 1) Download start date. 2) Install start date. 3) Schedule end date. If any of the values are not provided, the date provided in the preceding step of the sequence is used. If no values are provided, the string value of the current UTC is used.
     */
    @SerializedName(value = "scheduleDurationInDays", alternate = {"ScheduleDurationInDays"})
    @Expose
	@Nullable
    public Integer scheduleDurationInDays;

    /**
     * The Schedule Mode.
     * Deployment installation schedule mode. Default is installNow. All scheduled deployments date and time are in the deviceâ€™s timezone. For Install Now, the date and time are in UTC (same date and time anywhere in the world). Possible values are: installNow, scheduled, unknownFutureValue.
     */
    @SerializedName(value = "scheduleMode", alternate = {"ScheduleMode"})
    @Expose
	@Nullable
    public ZebraFotaScheduleMode scheduleMode;

    /**
     * The Time Zone Offset In Minutes.
     * This attribute indicates the deployment time offset (e.g.180 represents an offset of +03:00, and -270 represents an offset of -04:30). The time offset is the time timezone where the devices are located. The deployment start and end data uses this timezone
     */
    @SerializedName(value = "timeZoneOffsetInMinutes", alternate = {"TimeZoneOffsetInMinutes"})
    @Expose
	@Nullable
    public Integer timeZoneOffsetInMinutes;

    /**
     * The Update Type.
     * The deployment's update type. Possible values are custom, latest, and auto. When custom mode is set, the request must provide artifact values. When latest type is set, the latest released update becomes the target OS. If latest is specified, the firmware target values are not required. Note: latest may update the device to a new Android version. When the value is set to auto, the device always looks for the latest package available and tries to update whenever a new package is available. This continues until the admin cancels the auto update. While other modes return an ID starting with FOTA-x, auto mode returns an ID starting with AUTO-x. Possible values are: custom, latest, auto, unknownFutureValue.
     */
    @SerializedName(value = "updateType", alternate = {"UpdateType"})
    @Expose
	@Nullable
    public ZebraFotaUpdateType updateType;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
