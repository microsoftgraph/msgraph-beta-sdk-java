// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.PlannerFavoritePlanReferenceCollection;
import com.microsoft.graph.models.PlannerRecentPlanReferenceCollection;
import com.microsoft.graph.models.PlannerDelta;
import com.microsoft.graph.models.PlannerPlan;
import com.microsoft.graph.models.PlannerTask;
import com.microsoft.graph.requests.PlannerDeltaCollectionPage;
import com.microsoft.graph.requests.PlannerPlanCollectionPage;
import com.microsoft.graph.requests.PlannerTaskCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Planner User.
 */
public class PlannerUser extends PlannerDelta implements IJsonBackedObject {


    /**
     * The Favorite Plan References.
     * A collection containing the references to the plans that the user has marked as favorites.
     */
    @SerializedName(value = "favoritePlanReferences", alternate = {"FavoritePlanReferences"})
    @Expose
	@Nullable
    public PlannerFavoritePlanReferenceCollection favoritePlanReferences;

    /**
     * The Recent Plan References.
     * A collection containing references to the plans that were viewed recently by the user in apps that support recent plans.
     */
    @SerializedName(value = "recentPlanReferences", alternate = {"RecentPlanReferences"})
    @Expose
	@Nullable
    public PlannerRecentPlanReferenceCollection recentPlanReferences;

    /**
     * The All.
     * 
     */
    @SerializedName(value = "all", alternate = {"All"})
    @Expose
	@Nullable
    public PlannerDeltaCollectionPage all;

    /**
     * The Favorite Plans.
     * Read-only. Nullable. Returns the plannerPlans that the user marked as favorites.
     */
	@Nullable
    public PlannerPlanCollectionPage favoritePlans;

    /**
     * The Plans.
     * Read-only. Nullable. Returns the plannerTasks assigned to the user.
     */
    @SerializedName(value = "plans", alternate = {"Plans"})
    @Expose
	@Nullable
    public PlannerPlanCollectionPage plans;

    /**
     * The Recent Plans.
     * Read-only. Nullable. Returns the plannerPlans that have been recently viewed by the user in apps that support recent plans.
     */
	@Nullable
    public PlannerPlanCollectionPage recentPlans;

    /**
     * The Roster Plans.
     * Read-only. Nullable. Returns the plannerPlans contained by the plannerRosters the user is a member.
     */
	@Nullable
    public PlannerPlanCollectionPage rosterPlans;

    /**
     * The Tasks.
     * Read-only. Nullable. Returns the plannerTasks assigned to the user.
     */
    @SerializedName(value = "tasks", alternate = {"Tasks"})
    @Expose
	@Nullable
    public PlannerTaskCollectionPage tasks;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("all")) {
            all = serializer.deserializeObject(json.get("all"), PlannerDeltaCollectionPage.class);
        }

        if (json.has("favoritePlans")) {
            favoritePlans = serializer.deserializeObject(json.get("favoritePlans"), PlannerPlanCollectionPage.class);
        }

        if (json.has("plans")) {
            plans = serializer.deserializeObject(json.get("plans"), PlannerPlanCollectionPage.class);
        }

        if (json.has("recentPlans")) {
            recentPlans = serializer.deserializeObject(json.get("recentPlans"), PlannerPlanCollectionPage.class);
        }

        if (json.has("rosterPlans")) {
            rosterPlans = serializer.deserializeObject(json.get("rosterPlans"), PlannerPlanCollectionPage.class);
        }

        if (json.has("tasks")) {
            tasks = serializer.deserializeObject(json.get("tasks"), PlannerTaskCollectionPage.class);
        }
    }
}
