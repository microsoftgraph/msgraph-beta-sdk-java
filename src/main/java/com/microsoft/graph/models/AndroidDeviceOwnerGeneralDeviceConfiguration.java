// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.AndroidDeviceOwnerAppAutoUpdatePolicyType;
import com.microsoft.graph.models.AndroidDeviceOwnerDefaultAppPermissionPolicyType;
import com.microsoft.graph.models.AppListItem;
import com.microsoft.graph.models.AndroidDeviceOwnerCrossProfileDataSharing;
import com.microsoft.graph.models.AndroidDeviceOwnerUserFacingMessage;
import com.microsoft.graph.models.AndroidDeviceOwnerEnrollmentProfileType;
import com.microsoft.graph.models.AndroidDeviceOwnerGlobalProxy;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskCustomizationStatusBar;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskCustomizationSystemNavigation;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskModeAppPositionItem;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskModeFolderIcon;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskModeIconSize;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskModeManagedFolder;
import com.microsoft.graph.models.KioskModeManagedHomeScreenPinComplexity;
import com.microsoft.graph.models.AndroidDeviceOwnerKioskModeScreenOrientation;
import com.microsoft.graph.models.KioskModeType;
import com.microsoft.graph.models.AndroidDeviceOwnerVirtualHomeButtonType;
import com.microsoft.graph.models.MicrosoftLauncherDockPresence;
import com.microsoft.graph.models.MicrosoftLauncherSearchBarPlacement;
import com.microsoft.graph.models.AndroidKeyguardFeature;
import com.microsoft.graph.models.AndroidDeviceOwnerRequiredPasswordType;
import com.microsoft.graph.models.AndroidDeviceOwnerRequiredPasswordUnlock;
import com.microsoft.graph.models.PersonalProfilePersonalPlayStoreMode;
import com.microsoft.graph.models.AndroidDeviceOwnerPlayStoreMode;
import com.microsoft.graph.models.AndroidDeviceOwnerBatteryPluggedMode;
import com.microsoft.graph.models.AndroidDeviceOwnerSystemUpdateFreezePeriod;
import com.microsoft.graph.models.AndroidDeviceOwnerSystemUpdateInstallType;
import com.microsoft.graph.models.DeviceConfiguration;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Android Device Owner General Device Configuration.
 */
public class AndroidDeviceOwnerGeneralDeviceConfiguration extends DeviceConfiguration implements IJsonBackedObject {


    /**
     * The Accounts Block Modification.
     * Indicates whether or not adding or removing accounts is disabled.
     */
    @SerializedName(value = "accountsBlockModification", alternate = {"AccountsBlockModification"})
    @Expose
	@Nullable
    public Boolean accountsBlockModification;

    /**
     * The Apps Allow Install From Unknown Sources.
     * Indicates whether or not the user is allowed to enable to unknown sources setting.
     */
    @SerializedName(value = "appsAllowInstallFromUnknownSources", alternate = {"AppsAllowInstallFromUnknownSources"})
    @Expose
	@Nullable
    public Boolean appsAllowInstallFromUnknownSources;

    /**
     * The Apps Auto Update Policy.
     * Indicates the value of the app auto update policy. Possible values are: notConfigured, userChoice, never, wiFiOnly, always.
     */
    @SerializedName(value = "appsAutoUpdatePolicy", alternate = {"AppsAutoUpdatePolicy"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerAppAutoUpdatePolicyType appsAutoUpdatePolicy;

    /**
     * The Apps Default Permission Policy.
     * Indicates the permission policy for requests for runtime permissions if one is not defined for the app specifically. Possible values are: deviceDefault, prompt, autoGrant, autoDeny.
     */
    @SerializedName(value = "appsDefaultPermissionPolicy", alternate = {"AppsDefaultPermissionPolicy"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerDefaultAppPermissionPolicyType appsDefaultPermissionPolicy;

    /**
     * The Apps Recommend Skipping First Use Hints.
     * Whether or not to recommend all apps skip any first-time-use hints they may have added.
     */
    @SerializedName(value = "appsRecommendSkippingFirstUseHints", alternate = {"AppsRecommendSkippingFirstUseHints"})
    @Expose
	@Nullable
    public Boolean appsRecommendSkippingFirstUseHints;

    /**
     * The Azure Ad Shared Device Data Clear Apps.
     * A list of managed apps that will have their data cleared during a global sign-out in AAD shared device mode. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "azureAdSharedDeviceDataClearApps", alternate = {"AzureAdSharedDeviceDataClearApps"})
    @Expose
	@Nullable
    public java.util.List<AppListItem> azureAdSharedDeviceDataClearApps;

    /**
     * The Bluetooth Block Configuration.
     * Indicates whether or not to block a user from configuring bluetooth.
     */
    @SerializedName(value = "bluetoothBlockConfiguration", alternate = {"BluetoothBlockConfiguration"})
    @Expose
	@Nullable
    public Boolean bluetoothBlockConfiguration;

    /**
     * The Bluetooth Block Contact Sharing.
     * Indicates whether or not to block a user from sharing contacts via bluetooth.
     */
    @SerializedName(value = "bluetoothBlockContactSharing", alternate = {"BluetoothBlockContactSharing"})
    @Expose
	@Nullable
    public Boolean bluetoothBlockContactSharing;

    /**
     * The Camera Blocked.
     * Indicates whether or not to disable the use of the camera.
     */
    @SerializedName(value = "cameraBlocked", alternate = {"CameraBlocked"})
    @Expose
	@Nullable
    public Boolean cameraBlocked;

    /**
     * The Cellular Block Wi Fi Tethering.
     * Indicates whether or not to block Wi-Fi tethering.
     */
    @SerializedName(value = "cellularBlockWiFiTethering", alternate = {"CellularBlockWiFiTethering"})
    @Expose
	@Nullable
    public Boolean cellularBlockWiFiTethering;

    /**
     * The Certificate Credential Configuration Disabled.
     * Indicates whether or not to block users from any certificate credential configuration.
     */
    @SerializedName(value = "certificateCredentialConfigurationDisabled", alternate = {"CertificateCredentialConfigurationDisabled"})
    @Expose
	@Nullable
    public Boolean certificateCredentialConfigurationDisabled;

    /**
     * The Cross Profile Policies Allow Copy Paste.
     * Indicates whether or not text copied from one profile (personal or work) can be pasted in the other.
     */
    @SerializedName(value = "crossProfilePoliciesAllowCopyPaste", alternate = {"CrossProfilePoliciesAllowCopyPaste"})
    @Expose
	@Nullable
    public Boolean crossProfilePoliciesAllowCopyPaste;

    /**
     * The Cross Profile Policies Allow Data Sharing.
     * Indicates whether data from one profile (personal or work) can be shared with apps in the other profile. Possible values are: notConfigured, crossProfileDataSharingBlocked, dataSharingFromWorkToPersonalBlocked, crossProfileDataSharingAllowed, unkownFutureValue.
     */
    @SerializedName(value = "crossProfilePoliciesAllowDataSharing", alternate = {"CrossProfilePoliciesAllowDataSharing"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerCrossProfileDataSharing crossProfilePoliciesAllowDataSharing;

    /**
     * The Cross Profile Policies Show Work Contacts In Personal Profile.
     * Indicates whether or not contacts stored in work profile are shown in personal profile contact searches/incoming calls.
     */
    @SerializedName(value = "crossProfilePoliciesShowWorkContactsInPersonalProfile", alternate = {"CrossProfilePoliciesShowWorkContactsInPersonalProfile"})
    @Expose
	@Nullable
    public Boolean crossProfilePoliciesShowWorkContactsInPersonalProfile;

    /**
     * The Data Roaming Blocked.
     * Indicates whether or not to block a user from data roaming.
     */
    @SerializedName(value = "dataRoamingBlocked", alternate = {"DataRoamingBlocked"})
    @Expose
	@Nullable
    public Boolean dataRoamingBlocked;

    /**
     * The Date Time Configuration Blocked.
     * Indicates whether or not to block the user from manually changing the date or time on the device
     */
    @SerializedName(value = "dateTimeConfigurationBlocked", alternate = {"DateTimeConfigurationBlocked"})
    @Expose
	@Nullable
    public Boolean dateTimeConfigurationBlocked;

    /**
     * The Detailed Help Text.
     * Represents the customized detailed help text provided to users when they attempt to modify managed settings on their device.
     */
    @SerializedName(value = "detailedHelpText", alternate = {"DetailedHelpText"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerUserFacingMessage detailedHelpText;

    /**
     * The Enrollment Profile.
     * Indicates which enrollment profile you want to configure. Possible values are: notConfigured, dedicatedDevice, fullyManaged.
     */
    @SerializedName(value = "enrollmentProfile", alternate = {"EnrollmentProfile"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerEnrollmentProfileType enrollmentProfile;

    /**
     * The Factory Reset Blocked.
     * Indicates whether or not the factory reset option in settings is disabled.
     */
    @SerializedName(value = "factoryResetBlocked", alternate = {"FactoryResetBlocked"})
    @Expose
	@Nullable
    public Boolean factoryResetBlocked;

    /**
     * The Factory Reset Device Administrator Emails.
     * List of Google account emails that will be required to authenticate after a device is factory reset before it can be set up.
     */
    @SerializedName(value = "factoryResetDeviceAdministratorEmails", alternate = {"FactoryResetDeviceAdministratorEmails"})
    @Expose
	@Nullable
    public java.util.List<String> factoryResetDeviceAdministratorEmails;

    /**
     * The Global Proxy.
     * Proxy is set up directly with host, port and excluded hosts.
     */
    @SerializedName(value = "globalProxy", alternate = {"GlobalProxy"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerGlobalProxy globalProxy;

    /**
     * The Google Accounts Blocked.
     * Indicates whether or not google accounts will be blocked.
     */
    @SerializedName(value = "googleAccountsBlocked", alternate = {"GoogleAccountsBlocked"})
    @Expose
	@Nullable
    public Boolean googleAccountsBlocked;

    /**
     * The Kiosk Customization Device Settings Blocked.
     * Indicates whether a user can access the device's Settings app while in Kiosk Mode.
     */
    @SerializedName(value = "kioskCustomizationDeviceSettingsBlocked", alternate = {"KioskCustomizationDeviceSettingsBlocked"})
    @Expose
	@Nullable
    public Boolean kioskCustomizationDeviceSettingsBlocked;

    /**
     * The Kiosk Customization Power Button Actions Blocked.
     * Whether the power menu is shown when a user long presses the Power button of a device in Kiosk Mode.
     */
    @SerializedName(value = "kioskCustomizationPowerButtonActionsBlocked", alternate = {"KioskCustomizationPowerButtonActionsBlocked"})
    @Expose
	@Nullable
    public Boolean kioskCustomizationPowerButtonActionsBlocked;

    /**
     * The Kiosk Customization Status Bar.
     * Indicates whether system info and notifications are disabled in Kiosk Mode. Possible values are: notConfigured, notificationsAndSystemInfoEnabled, systemInfoOnly.
     */
    @SerializedName(value = "kioskCustomizationStatusBar", alternate = {"KioskCustomizationStatusBar"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerKioskCustomizationStatusBar kioskCustomizationStatusBar;

    /**
     * The Kiosk Customization System Error Warnings.
     * Indicates whether system error dialogs for crashed or unresponsive apps are shown in Kiosk Mode.
     */
    @SerializedName(value = "kioskCustomizationSystemErrorWarnings", alternate = {"KioskCustomizationSystemErrorWarnings"})
    @Expose
	@Nullable
    public Boolean kioskCustomizationSystemErrorWarnings;

    /**
     * The Kiosk Customization System Navigation.
     * Indicates which navigation features are enabled in Kiosk Mode. Possible values are: notConfigured, navigationEnabled, homeButtonOnly.
     */
    @SerializedName(value = "kioskCustomizationSystemNavigation", alternate = {"KioskCustomizationSystemNavigation"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerKioskCustomizationSystemNavigation kioskCustomizationSystemNavigation;

    /**
     * The Kiosk Mode App Order Enabled.
     * Whether or not to enable app ordering in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeAppOrderEnabled", alternate = {"KioskModeAppOrderEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeAppOrderEnabled;

    /**
     * The Kiosk Mode App Positions.
     * The ordering of items on Kiosk Mode Managed Home Screen. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "kioskModeAppPositions", alternate = {"KioskModeAppPositions"})
    @Expose
	@Nullable
    public java.util.List<AndroidDeviceOwnerKioskModeAppPositionItem> kioskModeAppPositions;

    /**
     * The Kiosk Mode Apps.
     * A list of managed apps that will be shown when the device is in Kiosk Mode. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "kioskModeApps", alternate = {"KioskModeApps"})
    @Expose
	@Nullable
    public java.util.List<AppListItem> kioskModeApps;

    /**
     * The Kiosk Mode Apps In Folder Ordered By Name.
     * Whether or not to alphabetize applications within a folder in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeAppsInFolderOrderedByName", alternate = {"KioskModeAppsInFolderOrderedByName"})
    @Expose
	@Nullable
    public Boolean kioskModeAppsInFolderOrderedByName;

    /**
     * The Kiosk Mode Bluetooth Configuration Enabled.
     * Whether or not to allow a user to configure Bluetooth settings in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeBluetoothConfigurationEnabled", alternate = {"KioskModeBluetoothConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeBluetoothConfigurationEnabled;

    /**
     * The Kiosk Mode Debug Menu Easy Access Enabled.
     * Whether or not to allow a user to easy access to the debug menu in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeDebugMenuEasyAccessEnabled", alternate = {"KioskModeDebugMenuEasyAccessEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeDebugMenuEasyAccessEnabled;

    /**
     * The Kiosk Mode Exit Code.
     * Exit code to allow a user to escape from Kiosk Mode when the device is in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeExitCode", alternate = {"KioskModeExitCode"})
    @Expose
	@Nullable
    public String kioskModeExitCode;

    /**
     * The Kiosk Mode Flashlight Configuration Enabled.
     * Whether or not to allow a user to use the flashlight in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeFlashlightConfigurationEnabled", alternate = {"KioskModeFlashlightConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeFlashlightConfigurationEnabled;

    /**
     * The Kiosk Mode Folder Icon.
     * Folder icon configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, darkSquare, darkCircle, lightSquare, lightCircle.
     */
    @SerializedName(value = "kioskModeFolderIcon", alternate = {"KioskModeFolderIcon"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerKioskModeFolderIcon kioskModeFolderIcon;

    /**
     * The Kiosk Mode Grid Height.
     * Number of rows for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999
     */
    @SerializedName(value = "kioskModeGridHeight", alternate = {"KioskModeGridHeight"})
    @Expose
	@Nullable
    public Integer kioskModeGridHeight;

    /**
     * The Kiosk Mode Grid Width.
     * Number of columns for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999
     */
    @SerializedName(value = "kioskModeGridWidth", alternate = {"KioskModeGridWidth"})
    @Expose
	@Nullable
    public Integer kioskModeGridWidth;

    /**
     * The Kiosk Mode Icon Size.
     * Icon size configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, smallest, small, regular, large, largest.
     */
    @SerializedName(value = "kioskModeIconSize", alternate = {"KioskModeIconSize"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerKioskModeIconSize kioskModeIconSize;

    /**
     * The Kiosk Mode Lock Home Screen.
     * Whether or not to lock home screen to the end user in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeLockHomeScreen", alternate = {"KioskModeLockHomeScreen"})
    @Expose
	@Nullable
    public Boolean kioskModeLockHomeScreen;

    /**
     * The Kiosk Mode Managed Folders.
     * A list of managed folders for a device in Kiosk Mode. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "kioskModeManagedFolders", alternate = {"KioskModeManagedFolders"})
    @Expose
	@Nullable
    public java.util.List<AndroidDeviceOwnerKioskModeManagedFolder> kioskModeManagedFolders;

    /**
     * The Kiosk Mode Managed Home Screen Auto Signout.
     * Whether or not to automatically sign-out of MHS and Shared device mode applications after inactive for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenAutoSignout", alternate = {"KioskModeManagedHomeScreenAutoSignout"})
    @Expose
	@Nullable
    public Boolean kioskModeManagedHomeScreenAutoSignout;

    /**
     * The Kiosk Mode Managed Home Screen Inactive Sign Out Delay In Seconds.
     * Number of seconds to give user notice before automatically signing them out for Managed Home Screen. Valid values 0 to 9999999
     */
    @SerializedName(value = "kioskModeManagedHomeScreenInactiveSignOutDelayInSeconds", alternate = {"KioskModeManagedHomeScreenInactiveSignOutDelayInSeconds"})
    @Expose
	@Nullable
    public Integer kioskModeManagedHomeScreenInactiveSignOutDelayInSeconds;

    /**
     * The Kiosk Mode Managed Home Screen Inactive Sign Out Notice In Seconds.
     * Number of seconds device is inactive before automatically signing user out for Managed Home Screen. Valid values 0 to 9999999
     */
    @SerializedName(value = "kioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds", alternate = {"KioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds"})
    @Expose
	@Nullable
    public Integer kioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds;

    /**
     * The Kiosk Mode Managed Home Screen Pin Complexity.
     * Complexity of PIN for sign-in session for Managed Home Screen. Possible values are: notConfigured, simple, complex.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenPinComplexity", alternate = {"KioskModeManagedHomeScreenPinComplexity"})
    @Expose
	@Nullable
    public KioskModeManagedHomeScreenPinComplexity kioskModeManagedHomeScreenPinComplexity;

    /**
     * The Kiosk Mode Managed Home Screen Pin Required.
     * Whether or not require user to set a PIN for sign-in session for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenPinRequired", alternate = {"KioskModeManagedHomeScreenPinRequired"})
    @Expose
	@Nullable
    public Boolean kioskModeManagedHomeScreenPinRequired;

    /**
     * The Kiosk Mode Managed Home Screen Pin Required To Resume.
     * Whether or not required user to enter session PIN if screensaver has appeared for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenPinRequiredToResume", alternate = {"KioskModeManagedHomeScreenPinRequiredToResume"})
    @Expose
	@Nullable
    public Boolean kioskModeManagedHomeScreenPinRequiredToResume;

    /**
     * The Kiosk Mode Managed Home Screen Sign In Background.
     * Custom URL background for sign-in screen for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenSignInBackground", alternate = {"KioskModeManagedHomeScreenSignInBackground"})
    @Expose
	@Nullable
    public String kioskModeManagedHomeScreenSignInBackground;

    /**
     * The Kiosk Mode Managed Home Screen Sign In Branding Logo.
     * Custom URL branding logo for sign-in screen and session pin page for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenSignInBrandingLogo", alternate = {"KioskModeManagedHomeScreenSignInBrandingLogo"})
    @Expose
	@Nullable
    public String kioskModeManagedHomeScreenSignInBrandingLogo;

    /**
     * The Kiosk Mode Managed Home Screen Sign In Enabled.
     * Whether or not show sign-in screen for Managed Home Screen.
     */
    @SerializedName(value = "kioskModeManagedHomeScreenSignInEnabled", alternate = {"KioskModeManagedHomeScreenSignInEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeManagedHomeScreenSignInEnabled;

    /**
     * The Kiosk Mode Managed Settings Entry Disabled.
     * Whether or not to display the Managed Settings entry point on the managed home screen in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeManagedSettingsEntryDisabled", alternate = {"KioskModeManagedSettingsEntryDisabled"})
    @Expose
	@Nullable
    public Boolean kioskModeManagedSettingsEntryDisabled;

    /**
     * The Kiosk Mode Media Volume Configuration Enabled.
     * Whether or not to allow a user to change the media volume in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeMediaVolumeConfigurationEnabled", alternate = {"KioskModeMediaVolumeConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeMediaVolumeConfigurationEnabled;

    /**
     * The Kiosk Mode Screen Orientation.
     * Screen orientation configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, portrait, landscape, autoRotate.
     */
    @SerializedName(value = "kioskModeScreenOrientation", alternate = {"KioskModeScreenOrientation"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerKioskModeScreenOrientation kioskModeScreenOrientation;

    /**
     * The Kiosk Mode Screen Saver Configuration Enabled.
     * Whether or not to enable screen saver mode or not in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeScreenSaverConfigurationEnabled", alternate = {"KioskModeScreenSaverConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeScreenSaverConfigurationEnabled;

    /**
     * The Kiosk Mode Screen Saver Detect Media Disabled.
     * Whether or not the device screen should show the screen saver if audio/video is playing in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeScreenSaverDetectMediaDisabled", alternate = {"KioskModeScreenSaverDetectMediaDisabled"})
    @Expose
	@Nullable
    public Boolean kioskModeScreenSaverDetectMediaDisabled;

    /**
     * The Kiosk Mode Screen Saver Display Time In Seconds.
     * The number of seconds that the device will display the screen saver for in Kiosk Mode. Valid values 0 to 9999999
     */
    @SerializedName(value = "kioskModeScreenSaverDisplayTimeInSeconds", alternate = {"KioskModeScreenSaverDisplayTimeInSeconds"})
    @Expose
	@Nullable
    public Integer kioskModeScreenSaverDisplayTimeInSeconds;

    /**
     * The Kiosk Mode Screen Saver Image Url.
     * URL for an image that will be the device's screen saver in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeScreenSaverImageUrl", alternate = {"KioskModeScreenSaverImageUrl"})
    @Expose
	@Nullable
    public String kioskModeScreenSaverImageUrl;

    /**
     * The Kiosk Mode Screen Saver Start Delay In Seconds.
     * The number of seconds the device needs to be inactive for before the screen saver is shown in Kiosk Mode. Valid values 1 to 9999999
     */
    @SerializedName(value = "kioskModeScreenSaverStartDelayInSeconds", alternate = {"KioskModeScreenSaverStartDelayInSeconds"})
    @Expose
	@Nullable
    public Integer kioskModeScreenSaverStartDelayInSeconds;

    /**
     * The Kiosk Mode Show App Notification Badge.
     * Whether or not to display application notification badges in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeShowAppNotificationBadge", alternate = {"KioskModeShowAppNotificationBadge"})
    @Expose
	@Nullable
    public Boolean kioskModeShowAppNotificationBadge;

    /**
     * The Kiosk Mode Show Device Info.
     * Whether or not to allow a user to access basic device information.
     */
    @SerializedName(value = "kioskModeShowDeviceInfo", alternate = {"KioskModeShowDeviceInfo"})
    @Expose
	@Nullable
    public Boolean kioskModeShowDeviceInfo;

    /**
     * The Kiosk Mode Use Managed Home Screen App.
     * Whether or not to use single app kiosk mode or multi-app kiosk mode. Possible values are: notConfigured, singleAppMode, multiAppMode.
     */
    @SerializedName(value = "kioskModeUseManagedHomeScreenApp", alternate = {"KioskModeUseManagedHomeScreenApp"})
    @Expose
	@Nullable
    public KioskModeType kioskModeUseManagedHomeScreenApp;

    /**
     * The Kiosk Mode Virtual Home Button Enabled.
     * Whether or not to display a virtual home button when the device is in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeVirtualHomeButtonEnabled", alternate = {"KioskModeVirtualHomeButtonEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeVirtualHomeButtonEnabled;

    /**
     * The Kiosk Mode Virtual Home Button Type.
     * Indicates whether the virtual home button is a swipe up home button or a floating home button. Possible values are: notConfigured, swipeUp, floating.
     */
    @SerializedName(value = "kioskModeVirtualHomeButtonType", alternate = {"KioskModeVirtualHomeButtonType"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerVirtualHomeButtonType kioskModeVirtualHomeButtonType;

    /**
     * The Kiosk Mode Wallpaper Url.
     * URL to a publicly accessible image to use for the wallpaper when the device is in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeWallpaperUrl", alternate = {"KioskModeWallpaperUrl"})
    @Expose
	@Nullable
    public String kioskModeWallpaperUrl;

    /**
     * The Kiosk Mode Wifi Allowed Ssids.
     * The restricted set of WIFI SSIDs available for the user to configure in Kiosk Mode. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "kioskModeWifiAllowedSsids", alternate = {"KioskModeWifiAllowedSsids"})
    @Expose
	@Nullable
    public java.util.List<String> kioskModeWifiAllowedSsids;

    /**
     * The Kiosk Mode Wi Fi Configuration Enabled.
     * Whether or not to allow a user to configure Wi-Fi settings in Kiosk Mode.
     */
    @SerializedName(value = "kioskModeWiFiConfigurationEnabled", alternate = {"KioskModeWiFiConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean kioskModeWiFiConfigurationEnabled;

    /**
     * The Microphone Force Mute.
     * Indicates whether or not to block unmuting the microphone on the device.
     */
    @SerializedName(value = "microphoneForceMute", alternate = {"MicrophoneForceMute"})
    @Expose
	@Nullable
    public Boolean microphoneForceMute;

    /**
     * The Microsoft Launcher Configuration Enabled.
     * Indicates whether or not to you want configure Microsoft Launcher.
     */
    @SerializedName(value = "microsoftLauncherConfigurationEnabled", alternate = {"MicrosoftLauncherConfigurationEnabled"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherConfigurationEnabled;

    /**
     * The Microsoft Launcher Custom Wallpaper Allow User Modification.
     * Indicates whether or not the user can modify the wallpaper to personalize their device.
     */
    @SerializedName(value = "microsoftLauncherCustomWallpaperAllowUserModification", alternate = {"MicrosoftLauncherCustomWallpaperAllowUserModification"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherCustomWallpaperAllowUserModification;

    /**
     * The Microsoft Launcher Custom Wallpaper Enabled.
     * Indicates whether or not to configure the wallpaper on the targeted devices.
     */
    @SerializedName(value = "microsoftLauncherCustomWallpaperEnabled", alternate = {"MicrosoftLauncherCustomWallpaperEnabled"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherCustomWallpaperEnabled;

    /**
     * The Microsoft Launcher Custom Wallpaper Image Url.
     * Indicates the URL for the image file to use as the wallpaper on the targeted devices.
     */
    @SerializedName(value = "microsoftLauncherCustomWallpaperImageUrl", alternate = {"MicrosoftLauncherCustomWallpaperImageUrl"})
    @Expose
	@Nullable
    public String microsoftLauncherCustomWallpaperImageUrl;

    /**
     * The Microsoft Launcher Dock Presence Allow User Modification.
     * Indicates whether or not the user can modify the device dock configuration on the device.
     */
    @SerializedName(value = "microsoftLauncherDockPresenceAllowUserModification", alternate = {"MicrosoftLauncherDockPresenceAllowUserModification"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherDockPresenceAllowUserModification;

    /**
     * The Microsoft Launcher Dock Presence Configuration.
     * Indicates whether or not you want to configure the device dock. Possible values are: notConfigured, show, hide, disabled.
     */
    @SerializedName(value = "microsoftLauncherDockPresenceConfiguration", alternate = {"MicrosoftLauncherDockPresenceConfiguration"})
    @Expose
	@Nullable
    public MicrosoftLauncherDockPresence microsoftLauncherDockPresenceConfiguration;

    /**
     * The Microsoft Launcher Feed Allow User Modification.
     * Indicates whether or not the user can modify the launcher feed on the device.
     */
    @SerializedName(value = "microsoftLauncherFeedAllowUserModification", alternate = {"MicrosoftLauncherFeedAllowUserModification"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherFeedAllowUserModification;

    /**
     * The Microsoft Launcher Feed Enabled.
     * Indicates whether or not you want to enable the launcher feed on the device.
     */
    @SerializedName(value = "microsoftLauncherFeedEnabled", alternate = {"MicrosoftLauncherFeedEnabled"})
    @Expose
	@Nullable
    public Boolean microsoftLauncherFeedEnabled;

    /**
     * The Microsoft Launcher Search Bar Placement Configuration.
     * Indicates the search bar placement configuration on the device. Possible values are: notConfigured, top, bottom, hide.
     */
    @SerializedName(value = "microsoftLauncherSearchBarPlacementConfiguration", alternate = {"MicrosoftLauncherSearchBarPlacementConfiguration"})
    @Expose
	@Nullable
    public MicrosoftLauncherSearchBarPlacement microsoftLauncherSearchBarPlacementConfiguration;

    /**
     * The Network Escape Hatch Allowed.
     * Indicates whether or not the device will allow connecting to a temporary network connection at boot time.
     */
    @SerializedName(value = "networkEscapeHatchAllowed", alternate = {"NetworkEscapeHatchAllowed"})
    @Expose
	@Nullable
    public Boolean networkEscapeHatchAllowed;

    /**
     * The Nfc Block Outgoing Beam.
     * Indicates whether or not to block NFC outgoing beam.
     */
    @SerializedName(value = "nfcBlockOutgoingBeam", alternate = {"NfcBlockOutgoingBeam"})
    @Expose
	@Nullable
    public Boolean nfcBlockOutgoingBeam;

    /**
     * The Password Block Keyguard.
     * Indicates whether or not the keyguard is disabled.
     */
    @SerializedName(value = "passwordBlockKeyguard", alternate = {"PasswordBlockKeyguard"})
    @Expose
	@Nullable
    public Boolean passwordBlockKeyguard;

    /**
     * The Password Block Keyguard Features.
     * List of device keyguard features to block. This collection can contain a maximum of 7 elements.
     */
    @SerializedName(value = "passwordBlockKeyguardFeatures", alternate = {"PasswordBlockKeyguardFeatures"})
    @Expose
	@Nullable
    public java.util.List<AndroidKeyguardFeature> passwordBlockKeyguardFeatures;

    /**
     * The Password Expiration Days.
     * Indicates the amount of time that a password can be set for before it expires and a new password will be required. Valid values 1 to 365
     */
    @SerializedName(value = "passwordExpirationDays", alternate = {"PasswordExpirationDays"})
    @Expose
	@Nullable
    public Integer passwordExpirationDays;

    /**
     * The Password Minimum Length.
     * Indicates the minimum length of the password required on the device. Valid values 4 to 16
     */
    @SerializedName(value = "passwordMinimumLength", alternate = {"PasswordMinimumLength"})
    @Expose
	@Nullable
    public Integer passwordMinimumLength;

    /**
     * The Password Minimum Letter Characters.
     * Indicates the minimum number of letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumLetterCharacters", alternate = {"PasswordMinimumLetterCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumLetterCharacters;

    /**
     * The Password Minimum Lower Case Characters.
     * Indicates the minimum number of lower case characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumLowerCaseCharacters", alternate = {"PasswordMinimumLowerCaseCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumLowerCaseCharacters;

    /**
     * The Password Minimum Non Letter Characters.
     * Indicates the minimum number of non-letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumNonLetterCharacters", alternate = {"PasswordMinimumNonLetterCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumNonLetterCharacters;

    /**
     * The Password Minimum Numeric Characters.
     * Indicates the minimum number of numeric characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumNumericCharacters", alternate = {"PasswordMinimumNumericCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumNumericCharacters;

    /**
     * The Password Minimum Symbol Characters.
     * Indicates the minimum number of symbol characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumSymbolCharacters", alternate = {"PasswordMinimumSymbolCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumSymbolCharacters;

    /**
     * The Password Minimum Upper Case Characters.
     * Indicates the minimum number of upper case letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumUpperCaseCharacters", alternate = {"PasswordMinimumUpperCaseCharacters"})
    @Expose
	@Nullable
    public Integer passwordMinimumUpperCaseCharacters;

    /**
     * The Password Minutes Of Inactivity Before Screen Timeout.
     * Minutes of inactivity before the screen times out.
     */
    @SerializedName(value = "passwordMinutesOfInactivityBeforeScreenTimeout", alternate = {"PasswordMinutesOfInactivityBeforeScreenTimeout"})
    @Expose
	@Nullable
    public Integer passwordMinutesOfInactivityBeforeScreenTimeout;

    /**
     * The Password Previous Password Count To Block.
     * Indicates the length of password history, where the user will not be able to enter a new password that is the same as any password in the history. Valid values 0 to 24
     */
    @SerializedName(value = "passwordPreviousPasswordCountToBlock", alternate = {"PasswordPreviousPasswordCountToBlock"})
    @Expose
	@Nullable
    public Integer passwordPreviousPasswordCountToBlock;

    /**
     * The Password Required Type.
     * Indicates the minimum password quality required on the device. Possible values are: deviceDefault, required, numeric, numericComplex, alphabetic, alphanumeric, alphanumericWithSymbols, lowSecurityBiometric, customPassword.
     */
    @SerializedName(value = "passwordRequiredType", alternate = {"PasswordRequiredType"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerRequiredPasswordType passwordRequiredType;

    /**
     * The Password Require Unlock.
     * Indicates the timeout period after which a device must be unlocked using a form of strong authentication. Possible values are: deviceDefault, daily, unkownFutureValue.
     */
    @SerializedName(value = "passwordRequireUnlock", alternate = {"PasswordRequireUnlock"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerRequiredPasswordUnlock passwordRequireUnlock;

    /**
     * The Password Sign In Failure Count Before Factory Reset.
     * Indicates the number of times a user can enter an incorrect password before the device is wiped. Valid values 4 to 11
     */
    @SerializedName(value = "passwordSignInFailureCountBeforeFactoryReset", alternate = {"PasswordSignInFailureCountBeforeFactoryReset"})
    @Expose
	@Nullable
    public Integer passwordSignInFailureCountBeforeFactoryReset;

    /**
     * The Personal Profile Apps Allow Install From Unknown Sources.
     * Indicates whether the user can install apps from unknown sources on the personal profile.
     */
    @SerializedName(value = "personalProfileAppsAllowInstallFromUnknownSources", alternate = {"PersonalProfileAppsAllowInstallFromUnknownSources"})
    @Expose
	@Nullable
    public Boolean personalProfileAppsAllowInstallFromUnknownSources;

    /**
     * The Personal Profile Camera Blocked.
     * Indicates whether to disable the use of the camera on the personal profile.
     */
    @SerializedName(value = "personalProfileCameraBlocked", alternate = {"PersonalProfileCameraBlocked"})
    @Expose
	@Nullable
    public Boolean personalProfileCameraBlocked;

    /**
     * The Personal Profile Personal Applications.
     * Policy applied to applications in the personal profile. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "personalProfilePersonalApplications", alternate = {"PersonalProfilePersonalApplications"})
    @Expose
	@Nullable
    public java.util.List<AppListItem> personalProfilePersonalApplications;

    /**
     * The Personal Profile Play Store Mode.
     * Used together with PersonalProfilePersonalApplications to control how apps in the personal profile are allowed or blocked. Possible values are: notConfigured, blockedApps, allowedApps.
     */
    @SerializedName(value = "personalProfilePlayStoreMode", alternate = {"PersonalProfilePlayStoreMode"})
    @Expose
	@Nullable
    public PersonalProfilePersonalPlayStoreMode personalProfilePlayStoreMode;

    /**
     * The Personal Profile Screen Capture Blocked.
     * Indicates whether to disable the capability to take screenshots on the personal profile.
     */
    @SerializedName(value = "personalProfileScreenCaptureBlocked", alternate = {"PersonalProfileScreenCaptureBlocked"})
    @Expose
	@Nullable
    public Boolean personalProfileScreenCaptureBlocked;

    /**
     * The Play Store Mode.
     * Indicates the Play Store mode of the device. Possible values are: notConfigured, allowList, blockList.
     */
    @SerializedName(value = "playStoreMode", alternate = {"PlayStoreMode"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerPlayStoreMode playStoreMode;

    /**
     * The Screen Capture Blocked.
     * Indicates whether or not to disable the capability to take screenshots.
     */
    @SerializedName(value = "screenCaptureBlocked", alternate = {"ScreenCaptureBlocked"})
    @Expose
	@Nullable
    public Boolean screenCaptureBlocked;

    /**
     * The Security Developer Settings Enabled.
     * Indicates whether or not the user is allowed to access developer settings like developer options and safe boot on the device.
     */
    @SerializedName(value = "securityDeveloperSettingsEnabled", alternate = {"SecurityDeveloperSettingsEnabled"})
    @Expose
	@Nullable
    public Boolean securityDeveloperSettingsEnabled;

    /**
     * The Security Require Verify Apps.
     * Indicates whether or not verify apps is required.
     */
    @SerializedName(value = "securityRequireVerifyApps", alternate = {"SecurityRequireVerifyApps"})
    @Expose
	@Nullable
    public Boolean securityRequireVerifyApps;

    /**
     * The Short Help Text.
     * Represents the customized short help text provided to users when they attempt to modify managed settings on their device.
     */
    @SerializedName(value = "shortHelpText", alternate = {"ShortHelpText"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerUserFacingMessage shortHelpText;

    /**
     * The Status Bar Blocked.
     * Indicates whether or the status bar is disabled, including notifications, quick settings and other screen overlays.
     */
    @SerializedName(value = "statusBarBlocked", alternate = {"StatusBarBlocked"})
    @Expose
	@Nullable
    public Boolean statusBarBlocked;

    /**
     * The Stay On Modes.
     * List of modes in which the device's display will stay powered-on. This collection can contain a maximum of 4 elements.
     */
    @SerializedName(value = "stayOnModes", alternate = {"StayOnModes"})
    @Expose
	@Nullable
    public java.util.List<AndroidDeviceOwnerBatteryPluggedMode> stayOnModes;

    /**
     * The Storage Allow Usb.
     * Indicates whether or not to allow USB mass storage.
     */
    @SerializedName(value = "storageAllowUsb", alternate = {"StorageAllowUsb"})
    @Expose
	@Nullable
    public Boolean storageAllowUsb;

    /**
     * The Storage Block External Media.
     * Indicates whether or not to block external media.
     */
    @SerializedName(value = "storageBlockExternalMedia", alternate = {"StorageBlockExternalMedia"})
    @Expose
	@Nullable
    public Boolean storageBlockExternalMedia;

    /**
     * The Storage Block Usb File Transfer.
     * Indicates whether or not to block USB file transfer.
     */
    @SerializedName(value = "storageBlockUsbFileTransfer", alternate = {"StorageBlockUsbFileTransfer"})
    @Expose
	@Nullable
    public Boolean storageBlockUsbFileTransfer;

    /**
     * The System Update Freeze Periods.
     * Indicates the annually repeating time periods during which system updates are postponed. This collection can contain a maximum of 500 elements.
     */
    @SerializedName(value = "systemUpdateFreezePeriods", alternate = {"SystemUpdateFreezePeriods"})
    @Expose
	@Nullable
    public java.util.List<AndroidDeviceOwnerSystemUpdateFreezePeriod> systemUpdateFreezePeriods;

    /**
     * The System Update Install Type.
     * The type of system update configuration. Possible values are: deviceDefault, postpone, windowed, automatic.
     */
    @SerializedName(value = "systemUpdateInstallType", alternate = {"SystemUpdateInstallType"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerSystemUpdateInstallType systemUpdateInstallType;

    /**
     * The System Update Window End Minutes After Midnight.
     * Indicates the number of minutes after midnight that the system update window ends. Valid values 0 to 1440
     */
    @SerializedName(value = "systemUpdateWindowEndMinutesAfterMidnight", alternate = {"SystemUpdateWindowEndMinutesAfterMidnight"})
    @Expose
	@Nullable
    public Integer systemUpdateWindowEndMinutesAfterMidnight;

    /**
     * The System Update Window Start Minutes After Midnight.
     * Indicates the number of minutes after midnight that the system update window starts. Valid values 0 to 1440
     */
    @SerializedName(value = "systemUpdateWindowStartMinutesAfterMidnight", alternate = {"SystemUpdateWindowStartMinutesAfterMidnight"})
    @Expose
	@Nullable
    public Integer systemUpdateWindowStartMinutesAfterMidnight;

    /**
     * The System Windows Blocked.
     * Whether or not to block Android system prompt windows, like toasts, phone activities, and system alerts.
     */
    @SerializedName(value = "systemWindowsBlocked", alternate = {"SystemWindowsBlocked"})
    @Expose
	@Nullable
    public Boolean systemWindowsBlocked;

    /**
     * The Users Block Add.
     * Indicates whether or not adding users and profiles is disabled.
     */
    @SerializedName(value = "usersBlockAdd", alternate = {"UsersBlockAdd"})
    @Expose
	@Nullable
    public Boolean usersBlockAdd;

    /**
     * The Users Block Remove.
     * Indicates whether or not to disable removing other users from the device.
     */
    @SerializedName(value = "usersBlockRemove", alternate = {"UsersBlockRemove"})
    @Expose
	@Nullable
    public Boolean usersBlockRemove;

    /**
     * The Volume Block Adjustment.
     * Indicates whether or not adjusting the master volume is disabled.
     */
    @SerializedName(value = "volumeBlockAdjustment", alternate = {"VolumeBlockAdjustment"})
    @Expose
	@Nullable
    public Boolean volumeBlockAdjustment;

    /**
     * The Vpn Always On Lockdown Mode.
     * If an always on VPN package name is specified, whether or not to lock network traffic when that VPN is disconnected.
     */
    @SerializedName(value = "vpnAlwaysOnLockdownMode", alternate = {"VpnAlwaysOnLockdownMode"})
    @Expose
	@Nullable
    public Boolean vpnAlwaysOnLockdownMode;

    /**
     * The Vpn Always On Package Identifier.
     * Android app package name for app that will handle an always-on VPN connection.
     */
    @SerializedName(value = "vpnAlwaysOnPackageIdentifier", alternate = {"VpnAlwaysOnPackageIdentifier"})
    @Expose
	@Nullable
    public String vpnAlwaysOnPackageIdentifier;

    /**
     * The Wifi Block Edit Configurations.
     * Indicates whether or not to block the user from editing the wifi connection settings.
     */
    @SerializedName(value = "wifiBlockEditConfigurations", alternate = {"WifiBlockEditConfigurations"})
    @Expose
	@Nullable
    public Boolean wifiBlockEditConfigurations;

    /**
     * The Wifi Block Edit Policy Defined Configurations.
     * Indicates whether or not to block the user from editing just the networks defined by the policy.
     */
    @SerializedName(value = "wifiBlockEditPolicyDefinedConfigurations", alternate = {"WifiBlockEditPolicyDefinedConfigurations"})
    @Expose
	@Nullable
    public Boolean wifiBlockEditPolicyDefinedConfigurations;

    /**
     * The Work Profile Password Expiration Days.
     * Indicates the number of days that a work profile password can be set before it expires and a new password will be required. Valid values 1 to 365
     */
    @SerializedName(value = "workProfilePasswordExpirationDays", alternate = {"WorkProfilePasswordExpirationDays"})
    @Expose
	@Nullable
    public Integer workProfilePasswordExpirationDays;

    /**
     * The Work Profile Password Minimum Length.
     * Indicates the minimum length of the work profile password. Valid values 4 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumLength", alternate = {"WorkProfilePasswordMinimumLength"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumLength;

    /**
     * The Work Profile Password Minimum Letter Characters.
     * Indicates the minimum number of letter characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumLetterCharacters", alternate = {"WorkProfilePasswordMinimumLetterCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumLetterCharacters;

    /**
     * The Work Profile Password Minimum Lower Case Characters.
     * Indicates the minimum number of lower-case characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumLowerCaseCharacters", alternate = {"WorkProfilePasswordMinimumLowerCaseCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumLowerCaseCharacters;

    /**
     * The Work Profile Password Minimum Non Letter Characters.
     * Indicates the minimum number of non-letter characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumNonLetterCharacters", alternate = {"WorkProfilePasswordMinimumNonLetterCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumNonLetterCharacters;

    /**
     * The Work Profile Password Minimum Numeric Characters.
     * Indicates the minimum number of numeric characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumNumericCharacters", alternate = {"WorkProfilePasswordMinimumNumericCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumNumericCharacters;

    /**
     * The Work Profile Password Minimum Symbol Characters.
     * Indicates the minimum number of symbol characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumSymbolCharacters", alternate = {"WorkProfilePasswordMinimumSymbolCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumSymbolCharacters;

    /**
     * The Work Profile Password Minimum Upper Case Characters.
     * Indicates the minimum number of upper-case letter characters required for the work profile password. Valid values 1 to 16
     */
    @SerializedName(value = "workProfilePasswordMinimumUpperCaseCharacters", alternate = {"WorkProfilePasswordMinimumUpperCaseCharacters"})
    @Expose
	@Nullable
    public Integer workProfilePasswordMinimumUpperCaseCharacters;

    /**
     * The Work Profile Password Previous Password Count To Block.
     * Indicates the length of the work profile password history, where the user will not be able to enter a new password that is the same as any password in the history. Valid values 0 to 24
     */
    @SerializedName(value = "workProfilePasswordPreviousPasswordCountToBlock", alternate = {"WorkProfilePasswordPreviousPasswordCountToBlock"})
    @Expose
	@Nullable
    public Integer workProfilePasswordPreviousPasswordCountToBlock;

    /**
     * The Work Profile Password Required Type.
     * Indicates the minimum password quality required on the work profile password. Possible values are: deviceDefault, required, numeric, numericComplex, alphabetic, alphanumeric, alphanumericWithSymbols, lowSecurityBiometric, customPassword.
     */
    @SerializedName(value = "workProfilePasswordRequiredType", alternate = {"WorkProfilePasswordRequiredType"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerRequiredPasswordType workProfilePasswordRequiredType;

    /**
     * The Work Profile Password Sign In Failure Count Before Factory Reset.
     * Indicates the number of times a user can enter an incorrect work profile password before the device is wiped. Valid values 4 to 11
     */
    @SerializedName(value = "workProfilePasswordSignInFailureCountBeforeFactoryReset", alternate = {"WorkProfilePasswordSignInFailureCountBeforeFactoryReset"})
    @Expose
	@Nullable
    public Integer workProfilePasswordSignInFailureCountBeforeFactoryReset;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
