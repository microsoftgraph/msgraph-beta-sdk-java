// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.WiredNetworkAuthenticationMethod;
import com.microsoft.graph.models.WiredNetworkAuthenticationType;
import com.microsoft.graph.models.EapType;
import com.microsoft.graph.models.NonEapAuthenticationMethodForEapTtlsType;
import com.microsoft.graph.models.WindowsCertificateProfileBase;
import com.microsoft.graph.models.Windows81TrustedRootCertificate;
import com.microsoft.graph.models.DeviceConfiguration;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Windows Wired Network Configuration.
 */
public class WindowsWiredNetworkConfiguration extends DeviceConfiguration implements IJsonBackedObject {


    /**
     * The Authentication Block Period In Minutes.
     * Specify the duration for which automatic authentication attempts will be blocked from occuring after a failed authentication attempt.
     */
    @SerializedName(value = "authenticationBlockPeriodInMinutes", alternate = {"AuthenticationBlockPeriodInMinutes"})
    @Expose
	@Nullable
    public Integer authenticationBlockPeriodInMinutes;

    /**
     * The Authentication Method.
     * Specify the authentication method. Possible values are: certificate, usernameAndPassword, derivedCredential. Possible values are: certificate, usernameAndPassword, derivedCredential, unknownFutureValue.
     */
    @SerializedName(value = "authenticationMethod", alternate = {"AuthenticationMethod"})
    @Expose
	@Nullable
    public WiredNetworkAuthenticationMethod authenticationMethod;

    /**
     * The Authentication Period In Seconds.
     * Specify the number of seconds for the client to wait after an authentication attempt before failing. Valid range 1-3600.
     */
    @SerializedName(value = "authenticationPeriodInSeconds", alternate = {"AuthenticationPeriodInSeconds"})
    @Expose
	@Nullable
    public Integer authenticationPeriodInSeconds;

    /**
     * The Authentication Retry Delay Period In Seconds.
     * Specify the number of seconds between a failed authentication and the next authentication attempt. Valid range 1-3600.
     */
    @SerializedName(value = "authenticationRetryDelayPeriodInSeconds", alternate = {"AuthenticationRetryDelayPeriodInSeconds"})
    @Expose
	@Nullable
    public Integer authenticationRetryDelayPeriodInSeconds;

    /**
     * The Authentication Type.
     * Specify whether to authenticate the user, the device, either, or to use guest authentication (none). If you're using certificate authentication, make sure the certificate type matches the authentication type. Possible values are: none, user, machine, machineOrUser, guest. Possible values are: none, user, machine, machineOrUser, guest, unknownFutureValue.
     */
    @SerializedName(value = "authenticationType", alternate = {"AuthenticationType"})
    @Expose
	@Nullable
    public WiredNetworkAuthenticationType authenticationType;

    /**
     * The Cache Credentials.
     * When TRUE, caches user credentials on the device so that users don't need to keep entering them each time they connect. When FALSE, do not cache credentials. Default value is FALSE.
     */
    @SerializedName(value = "cacheCredentials", alternate = {"CacheCredentials"})
    @Expose
	@Nullable
    public Boolean cacheCredentials;

    /**
     * The Disable User Prompt For Server Validation.
     * When TRUE, prevents the user from being prompted to authorize new servers for trusted certification authorities when EAP type is selected as PEAP. When FALSE, does not prevent the user from being prompted. Default value is FALSE.
     */
    @SerializedName(value = "disableUserPromptForServerValidation", alternate = {"DisableUserPromptForServerValidation"})
    @Expose
	@Nullable
    public Boolean disableUserPromptForServerValidation;

    /**
     * The Eapol Start Period In Seconds.
     * Specify the number of seconds to wait before sending an EAPOL (Extensible Authentication Protocol over LAN) Start message. Valid range 1-3600.
     */
    @SerializedName(value = "eapolStartPeriodInSeconds", alternate = {"EapolStartPeriodInSeconds"})
    @Expose
	@Nullable
    public Integer eapolStartPeriodInSeconds;

    /**
     * The Eap Type.
     * Extensible Authentication Protocol (EAP). Indicates the type of EAP protocol set on the Wi-Fi endpoint (router). Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast, teap. Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast, teap.
     */
    @SerializedName(value = "eapType", alternate = {"EapType"})
    @Expose
	@Nullable
    public EapType eapType;

    /**
     * The Enforce8021X.
     * When TRUE, the automatic configuration service for wired networks requires the use of 802.1X for port authentication. When FALSE, 802.1X is not required. Default value is FALSE.
     */
    @SerializedName(value = "enforce8021X", alternate = {"Enforce8021X"})
    @Expose
	@Nullable
    public Boolean enforce8021X;

    /**
     * The Force FIPSCompliance.
     * When TRUE, forces FIPS compliance. When FALSE, does not enable FIPS compliance. Default value is FALSE.
     */
    @SerializedName(value = "forceFIPSCompliance", alternate = {"ForceFIPSCompliance"})
    @Expose
	@Nullable
    public Boolean forceFIPSCompliance;

    /**
     * The Inner Authentication Protocol For EAPTTLS.
     * Specify inner authentication protocol for EAP TTLS. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo.
     */
    @SerializedName(value = "innerAuthenticationProtocolForEAPTTLS", alternate = {"InnerAuthenticationProtocolForEAPTTLS"})
    @Expose
	@Nullable
    public NonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEAPTTLS;

    /**
     * The Maximum Authentication Failures.
     * Specify the maximum authentication failures allowed for a set of credentials. Valid range 1-100.
     */
    @SerializedName(value = "maximumAuthenticationFailures", alternate = {"MaximumAuthenticationFailures"})
    @Expose
	@Nullable
    public Integer maximumAuthenticationFailures;

    /**
     * The Maximum EAPOLStart Messages.
     * Specify the maximum number of EAPOL (Extensible Authentication Protocol over LAN) Start messages to be sent before returning failure. Valid range 1-100.
     */
    @SerializedName(value = "maximumEAPOLStartMessages", alternate = {"MaximumEAPOLStartMessages"})
    @Expose
	@Nullable
    public Integer maximumEAPOLStartMessages;

    /**
     * The Outer Identity Privacy Temporary Value.
     * Specify the string to replace usernames for privacy when using EAP TTLS or PEAP.
     */
    @SerializedName(value = "outerIdentityPrivacyTemporaryValue", alternate = {"OuterIdentityPrivacyTemporaryValue"})
    @Expose
	@Nullable
    public String outerIdentityPrivacyTemporaryValue;

    /**
     * The Perform Server Validation.
     * When TRUE, enables verification of server's identity by validating the certificate when EAP type is selected as PEAP. When FALSE, the certificate is not validated. Default value is TRUE.
     */
    @SerializedName(value = "performServerValidation", alternate = {"PerformServerValidation"})
    @Expose
	@Nullable
    public Boolean performServerValidation;

    /**
     * The Require Cryptographic Binding.
     * When TRUE, enables cryptographic binding when EAP type is selected as PEAP. When FALSE, does not enable cryptogrpahic binding. Default value is TRUE.
     */
    @SerializedName(value = "requireCryptographicBinding", alternate = {"RequireCryptographicBinding"})
    @Expose
	@Nullable
    public Boolean requireCryptographicBinding;

    /**
     * The Secondary Authentication Method.
     * Specify the secondary authentication method. Possible values are: certificate, usernameAndPassword, derivedCredential. Possible values are: certificate, usernameAndPassword, derivedCredential, unknownFutureValue.
     */
    @SerializedName(value = "secondaryAuthenticationMethod", alternate = {"SecondaryAuthenticationMethod"})
    @Expose
	@Nullable
    public WiredNetworkAuthenticationMethod secondaryAuthenticationMethod;

    /**
     * The Trusted Server Certificate Names.
     * Specify trusted server certificate names.
     */
    @SerializedName(value = "trustedServerCertificateNames", alternate = {"TrustedServerCertificateNames"})
    @Expose
	@Nullable
    public java.util.List<String> trustedServerCertificateNames;

    /**
     * The Identity Certificate For Client Authentication.
     * Specify identity certificate for client authentication.
     */
    @SerializedName(value = "identityCertificateForClientAuthentication", alternate = {"IdentityCertificateForClientAuthentication"})
    @Expose
	@Nullable
    public WindowsCertificateProfileBase identityCertificateForClientAuthentication;

    /**
     * The Root Certificate For Client Validation.
     * Specify root certificate for client validation.
     */
    @SerializedName(value = "rootCertificateForClientValidation", alternate = {"RootCertificateForClientValidation"})
    @Expose
	@Nullable
    public Windows81TrustedRootCertificate rootCertificateForClientValidation;

    /**
     * The Root Certificates For Server Validation.
     * Specify root certificates for server validation. This collection can contain a maximum of 500 elements.
     */
	@Nullable
    public com.microsoft.graph.requests.Windows81TrustedRootCertificateCollectionWithReferencesPage rootCertificatesForServerValidation;

    /**
     * The Secondary Identity Certificate For Client Authentication.
     * Specify secondary identity certificate for client authentication.
     */
    @SerializedName(value = "secondaryIdentityCertificateForClientAuthentication", alternate = {"SecondaryIdentityCertificateForClientAuthentication"})
    @Expose
	@Nullable
    public WindowsCertificateProfileBase secondaryIdentityCertificateForClientAuthentication;

    /**
     * The Secondary Root Certificate For Client Validation.
     * Specify secondary root certificate for client validation.
     */
    @SerializedName(value = "secondaryRootCertificateForClientValidation", alternate = {"SecondaryRootCertificateForClientValidation"})
    @Expose
	@Nullable
    public Windows81TrustedRootCertificate secondaryRootCertificateForClientValidation;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("rootCertificatesForServerValidation")) {
            rootCertificatesForServerValidation = serializer.deserializeObject(json.get("rootCertificatesForServerValidation"), com.microsoft.graph.requests.Windows81TrustedRootCertificateCollectionWithReferencesPage.class);
        }
    }
}
