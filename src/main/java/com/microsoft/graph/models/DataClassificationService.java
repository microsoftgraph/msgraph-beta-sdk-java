// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.ExactMatchDataStore;
import com.microsoft.graph.models.FileClassificationRequest;
import com.microsoft.graph.models.JobResponseBase;
import com.microsoft.graph.models.TextClassificationRequest;
import com.microsoft.graph.models.SensitiveType;
import com.microsoft.graph.models.SensitivityLabel;
import com.microsoft.graph.models.ExactMatchUploadAgent;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.requests.ExactMatchDataStoreCollectionPage;
import com.microsoft.graph.requests.FileClassificationRequestCollectionPage;
import com.microsoft.graph.requests.JobResponseBaseCollectionPage;
import com.microsoft.graph.requests.TextClassificationRequestCollectionPage;
import com.microsoft.graph.requests.SensitiveTypeCollectionPage;
import com.microsoft.graph.requests.SensitivityLabelCollectionPage;
import com.microsoft.graph.requests.ExactMatchUploadAgentCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Data Classification Service.
 */
public class DataClassificationService extends Entity implements IJsonBackedObject {


    /**
     * The Exact Match Data Stores.
     * 
     */
    @SerializedName(value = "exactMatchDataStores", alternate = {"ExactMatchDataStores"})
    @Expose
	@Nullable
    public ExactMatchDataStoreCollectionPage exactMatchDataStores;

    /**
     * The Classify File.
     * 
     */
    @SerializedName(value = "classifyFile", alternate = {"ClassifyFile"})
    @Expose
	@Nullable
    public FileClassificationRequestCollectionPage classifyFile;

    /**
     * The Classify File Jobs.
     * 
     */
    @SerializedName(value = "classifyFileJobs", alternate = {"ClassifyFileJobs"})
    @Expose
	@Nullable
    public JobResponseBaseCollectionPage classifyFileJobs;

    /**
     * The Classify Text.
     * 
     */
    @SerializedName(value = "classifyText", alternate = {"ClassifyText"})
    @Expose
	@Nullable
    public TextClassificationRequestCollectionPage classifyText;

    /**
     * The Classify Text Jobs.
     * 
     */
    @SerializedName(value = "classifyTextJobs", alternate = {"ClassifyTextJobs"})
    @Expose
	@Nullable
    public JobResponseBaseCollectionPage classifyTextJobs;

    /**
     * The Evaluate Dlp Policies Jobs.
     * 
     */
    @SerializedName(value = "evaluateDlpPoliciesJobs", alternate = {"EvaluateDlpPoliciesJobs"})
    @Expose
	@Nullable
    public JobResponseBaseCollectionPage evaluateDlpPoliciesJobs;

    /**
     * The Evaluate Label Jobs.
     * 
     */
    @SerializedName(value = "evaluateLabelJobs", alternate = {"EvaluateLabelJobs"})
    @Expose
	@Nullable
    public JobResponseBaseCollectionPage evaluateLabelJobs;

    /**
     * The Jobs.
     * 
     */
    @SerializedName(value = "jobs", alternate = {"Jobs"})
    @Expose
	@Nullable
    public JobResponseBaseCollectionPage jobs;

    /**
     * The Sensitive Types.
     * 
     */
    @SerializedName(value = "sensitiveTypes", alternate = {"SensitiveTypes"})
    @Expose
	@Nullable
    public SensitiveTypeCollectionPage sensitiveTypes;

    /**
     * The Sensitivity Labels.
     * 
     */
    @SerializedName(value = "sensitivityLabels", alternate = {"SensitivityLabels"})
    @Expose
	@Nullable
    public SensitivityLabelCollectionPage sensitivityLabels;

    /**
     * The Exact Match Upload Agents.
     * 
     */
    @SerializedName(value = "exactMatchUploadAgents", alternate = {"ExactMatchUploadAgents"})
    @Expose
	@Nullable
    public ExactMatchUploadAgentCollectionPage exactMatchUploadAgents;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("exactMatchDataStores")) {
            exactMatchDataStores = serializer.deserializeObject(json.get("exactMatchDataStores"), ExactMatchDataStoreCollectionPage.class);
        }

        if (json.has("classifyFile")) {
            classifyFile = serializer.deserializeObject(json.get("classifyFile"), FileClassificationRequestCollectionPage.class);
        }

        if (json.has("classifyFileJobs")) {
            classifyFileJobs = serializer.deserializeObject(json.get("classifyFileJobs"), JobResponseBaseCollectionPage.class);
        }

        if (json.has("classifyText")) {
            classifyText = serializer.deserializeObject(json.get("classifyText"), TextClassificationRequestCollectionPage.class);
        }

        if (json.has("classifyTextJobs")) {
            classifyTextJobs = serializer.deserializeObject(json.get("classifyTextJobs"), JobResponseBaseCollectionPage.class);
        }

        if (json.has("evaluateDlpPoliciesJobs")) {
            evaluateDlpPoliciesJobs = serializer.deserializeObject(json.get("evaluateDlpPoliciesJobs"), JobResponseBaseCollectionPage.class);
        }

        if (json.has("evaluateLabelJobs")) {
            evaluateLabelJobs = serializer.deserializeObject(json.get("evaluateLabelJobs"), JobResponseBaseCollectionPage.class);
        }

        if (json.has("jobs")) {
            jobs = serializer.deserializeObject(json.get("jobs"), JobResponseBaseCollectionPage.class);
        }

        if (json.has("sensitiveTypes")) {
            sensitiveTypes = serializer.deserializeObject(json.get("sensitiveTypes"), SensitiveTypeCollectionPage.class);
        }

        if (json.has("sensitivityLabels")) {
            sensitivityLabels = serializer.deserializeObject(json.get("sensitivityLabels"), SensitivityLabelCollectionPage.class);
        }

        if (json.has("exactMatchUploadAgents")) {
            exactMatchUploadAgents = serializer.deserializeObject(json.get("exactMatchUploadAgents"), ExactMatchUploadAgentCollectionPage.class);
        }
    }
}
