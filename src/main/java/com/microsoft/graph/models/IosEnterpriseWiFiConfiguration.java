// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.WiFiAuthenticationMethod;
import com.microsoft.graph.models.EapFastConfiguration;
import com.microsoft.graph.models.EapType;
import com.microsoft.graph.models.NonEapAuthenticationMethodForEapTtlsType;
import com.microsoft.graph.models.DeviceManagementDerivedCredentialSettings;
import com.microsoft.graph.models.IosCertificateProfileBase;
import com.microsoft.graph.models.IosTrustedRootCertificate;
import com.microsoft.graph.models.IosWiFiConfiguration;
import com.microsoft.graph.requests.IosTrustedRootCertificateCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Ios Enterprise Wi Fi Configuration.
 */
public class IosEnterpriseWiFiConfiguration extends IosWiFiConfiguration implements IJsonBackedObject {


    /**
     * The Authentication Method.
     * Authentication Method when EAP Type is configured to PEAP or EAP-TTLS. Possible values are: certificate, usernameAndPassword, derivedCredential.
     */
    @SerializedName(value = "authenticationMethod", alternate = {"AuthenticationMethod"})
    @Expose
	@Nullable
    public WiFiAuthenticationMethod authenticationMethod;

    /**
     * The Eap Fast Configuration.
     * EAP-FAST Configuration Option when EAP-FAST is the selected EAP Type. Possible values are: noProtectedAccessCredential, useProtectedAccessCredential, useProtectedAccessCredentialAndProvision, useProtectedAccessCredentialAndProvisionAnonymously.
     */
    @SerializedName(value = "eapFastConfiguration", alternate = {"EapFastConfiguration"})
    @Expose
	@Nullable
    public EapFastConfiguration eapFastConfiguration;

    /**
     * The Eap Type.
     * Extensible Authentication Protocol (EAP). Indicates the type of EAP protocol set on the Wi-Fi endpoint (router). Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast.
     */
    @SerializedName(value = "eapType", alternate = {"EapType"})
    @Expose
	@Nullable
    public EapType eapType;

    /**
     * The Inner Authentication Protocol For Eap Ttls.
     * Non-EAP Method for Authentication when EAP Type is EAP-TTLS and Authenticationmethod is Username and Password. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo.
     */
    @SerializedName(value = "innerAuthenticationProtocolForEapTtls", alternate = {"InnerAuthenticationProtocolForEapTtls"})
    @Expose
	@Nullable
    public NonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;

    /**
     * The Outer Identity Privacy Temporary Value.
     * Enable identity privacy (Outer Identity) when EAP Type is configured to EAP - TTLS, EAP - FAST or PEAP. This property masks usernames with the text you enter. For example, if you use 'anonymous', each user that authenticates with this Wi-Fi connection using their real username is displayed as 'anonymous'.
     */
    @SerializedName(value = "outerIdentityPrivacyTemporaryValue", alternate = {"OuterIdentityPrivacyTemporaryValue"})
    @Expose
	@Nullable
    public String outerIdentityPrivacyTemporaryValue;

    /**
     * The Password Format String.
     * Password format string used to build the password to connect to wifi
     */
    @SerializedName(value = "passwordFormatString", alternate = {"PasswordFormatString"})
    @Expose
	@Nullable
    public String passwordFormatString;

    /**
     * The Trusted Server Certificate Names.
     * Trusted server certificate names when EAP Type is configured to EAP-TLS/TTLS/FAST or PEAP. This is the common name used in the certificates issued by your trusted certificate authority (CA). If you provide this information, you can bypass the dynamic trust dialog that is displayed on end users' devices when they connect to this Wi-Fi network.
     */
    @SerializedName(value = "trustedServerCertificateNames", alternate = {"TrustedServerCertificateNames"})
    @Expose
	@Nullable
    public java.util.List<String> trustedServerCertificateNames;

    /**
     * The Username Format String.
     * Username format string used to build the username to connect to wifi
     */
    @SerializedName(value = "usernameFormatString", alternate = {"UsernameFormatString"})
    @Expose
	@Nullable
    public String usernameFormatString;

    /**
     * The Derived Credential Settings.
     * Tenant level settings for the Derived Credentials to be used for authentication.
     */
    @SerializedName(value = "derivedCredentialSettings", alternate = {"DerivedCredentialSettings"})
    @Expose
	@Nullable
    public DeviceManagementDerivedCredentialSettings derivedCredentialSettings;

    /**
     * The Identity Certificate For Client Authentication.
     * Identity Certificate for client authentication when EAP Type is configured to EAP-TLS, EAP-TTLS (with Certificate Authentication), or PEAP (with Certificate Authentication).
     */
    @SerializedName(value = "identityCertificateForClientAuthentication", alternate = {"IdentityCertificateForClientAuthentication"})
    @Expose
	@Nullable
    public IosCertificateProfileBase identityCertificateForClientAuthentication;

    /**
     * The Root Certificates For Server Validation.
     * Trusted Root Certificates for Server Validation when EAP Type is configured to EAP-TLS/TTLS/FAST or PEAP. If you provide this value you do not need to provide trustedServerCertificateNames, and vice versa.
     */
    @SerializedName(value = "rootCertificatesForServerValidation", alternate = {"RootCertificatesForServerValidation"})
    @Expose
	@Nullable
    public IosTrustedRootCertificateCollectionPage rootCertificatesForServerValidation;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("rootCertificatesForServerValidation")) {
            rootCertificatesForServerValidation = serializer.deserializeObject(json.get("rootCertificatesForServerValidation"), IosTrustedRootCertificateCollectionPage.class);
        }
    }
}
