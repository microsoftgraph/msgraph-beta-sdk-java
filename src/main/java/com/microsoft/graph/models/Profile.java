// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.UserAccountInformation;
import com.microsoft.graph.models.ItemAddress;
import com.microsoft.graph.models.PersonAnnualEvent;
import com.microsoft.graph.models.PersonAward;
import com.microsoft.graph.models.PersonCertification;
import com.microsoft.graph.models.EducationalActivity;
import com.microsoft.graph.models.ItemEmail;
import com.microsoft.graph.models.PersonInterest;
import com.microsoft.graph.models.LanguageProficiency;
import com.microsoft.graph.models.PersonName;
import com.microsoft.graph.models.PersonAnnotation;
import com.microsoft.graph.models.ItemPatent;
import com.microsoft.graph.models.ItemPhone;
import com.microsoft.graph.models.WorkPosition;
import com.microsoft.graph.models.ProjectParticipation;
import com.microsoft.graph.models.ItemPublication;
import com.microsoft.graph.models.SkillProficiency;
import com.microsoft.graph.models.WebAccount;
import com.microsoft.graph.models.PersonWebsite;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.requests.UserAccountInformationCollectionPage;
import com.microsoft.graph.requests.ItemAddressCollectionPage;
import com.microsoft.graph.requests.PersonAnnualEventCollectionPage;
import com.microsoft.graph.requests.PersonAwardCollectionPage;
import com.microsoft.graph.requests.PersonCertificationCollectionPage;
import com.microsoft.graph.requests.EducationalActivityCollectionPage;
import com.microsoft.graph.requests.ItemEmailCollectionPage;
import com.microsoft.graph.requests.PersonInterestCollectionPage;
import com.microsoft.graph.requests.LanguageProficiencyCollectionPage;
import com.microsoft.graph.requests.PersonNameCollectionPage;
import com.microsoft.graph.requests.PersonAnnotationCollectionPage;
import com.microsoft.graph.requests.ItemPatentCollectionPage;
import com.microsoft.graph.requests.ItemPhoneCollectionPage;
import com.microsoft.graph.requests.WorkPositionCollectionPage;
import com.microsoft.graph.requests.ProjectParticipationCollectionPage;
import com.microsoft.graph.requests.ItemPublicationCollectionPage;
import com.microsoft.graph.requests.SkillProficiencyCollectionPage;
import com.microsoft.graph.requests.WebAccountCollectionPage;
import com.microsoft.graph.requests.PersonWebsiteCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Profile.
 */
public class Profile extends Entity implements IJsonBackedObject {


    /**
     * The Account.
     * 
     */
    @SerializedName(value = "account", alternate = {"Account"})
    @Expose
	@Nullable
    public UserAccountInformationCollectionPage account;

    /**
     * The Addresses.
     * Represents details of addresses associated with the user.
     */
    @SerializedName(value = "addresses", alternate = {"Addresses"})
    @Expose
	@Nullable
    public ItemAddressCollectionPage addresses;

    /**
     * The Anniversaries.
     * Represents the details of meaningful dates associated with a person.
     */
    @SerializedName(value = "anniversaries", alternate = {"Anniversaries"})
    @Expose
	@Nullable
    public PersonAnnualEventCollectionPage anniversaries;

    /**
     * The Awards.
     * Represents the details of awards or honors associated with a person.
     */
    @SerializedName(value = "awards", alternate = {"Awards"})
    @Expose
	@Nullable
    public PersonAwardCollectionPage awards;

    /**
     * The Certifications.
     * Represents the details of certifications associated with a person.
     */
    @SerializedName(value = "certifications", alternate = {"Certifications"})
    @Expose
	@Nullable
    public PersonCertificationCollectionPage certifications;

    /**
     * The Educational Activities.
     * Represents data that a user has supplied related to undergraduate, graduate, postgraduate or other educational activities.
     */
    @SerializedName(value = "educationalActivities", alternate = {"EducationalActivities"})
    @Expose
	@Nullable
    public EducationalActivityCollectionPage educationalActivities;

    /**
     * The Emails.
     * Represents detailed information about email addresses associated with the user.
     */
    @SerializedName(value = "emails", alternate = {"Emails"})
    @Expose
	@Nullable
    public ItemEmailCollectionPage emails;

    /**
     * The Interests.
     * Provides detailed information about interests the user has associated with themselves in various services.
     */
    @SerializedName(value = "interests", alternate = {"Interests"})
    @Expose
	@Nullable
    public PersonInterestCollectionPage interests;

    /**
     * The Languages.
     * Represents detailed information about languages that a user has added to their profile.
     */
    @SerializedName(value = "languages", alternate = {"Languages"})
    @Expose
	@Nullable
    public LanguageProficiencyCollectionPage languages;

    /**
     * The Names.
     * Represents the names a user has added to their profile.
     */
    @SerializedName(value = "names", alternate = {"Names"})
    @Expose
	@Nullable
    public PersonNameCollectionPage names;

    /**
     * The Notes.
     * Represents notes that a user has added to their profile.
     */
    @SerializedName(value = "notes", alternate = {"Notes"})
    @Expose
	@Nullable
    public PersonAnnotationCollectionPage notes;

    /**
     * The Patents.
     * Represents patents that a user has added to their profile.
     */
    @SerializedName(value = "patents", alternate = {"Patents"})
    @Expose
	@Nullable
    public ItemPatentCollectionPage patents;

    /**
     * The Phones.
     * Represents detailed information about phone numbers associated with a user in various services.
     */
    @SerializedName(value = "phones", alternate = {"Phones"})
    @Expose
	@Nullable
    public ItemPhoneCollectionPage phones;

    /**
     * The Positions.
     * Represents detailed information about work positions associated with a user's profile.
     */
    @SerializedName(value = "positions", alternate = {"Positions"})
    @Expose
	@Nullable
    public WorkPositionCollectionPage positions;

    /**
     * The Projects.
     * Represents detailed information about projects associated with a user.
     */
    @SerializedName(value = "projects", alternate = {"Projects"})
    @Expose
	@Nullable
    public ProjectParticipationCollectionPage projects;

    /**
     * The Publications.
     * Represents details of any publications a user has added to their profile.
     */
    @SerializedName(value = "publications", alternate = {"Publications"})
    @Expose
	@Nullable
    public ItemPublicationCollectionPage publications;

    /**
     * The Skills.
     * Represents detailed information about skills associated with a user in various services.
     */
    @SerializedName(value = "skills", alternate = {"Skills"})
    @Expose
	@Nullable
    public SkillProficiencyCollectionPage skills;

    /**
     * The Web Accounts.
     * Represents web accounts the user has indicated they use or has added to their user profile.
     */
    @SerializedName(value = "webAccounts", alternate = {"WebAccounts"})
    @Expose
	@Nullable
    public WebAccountCollectionPage webAccounts;

    /**
     * The Websites.
     * Represents detailed information about websites associated with a user in various services.
     */
    @SerializedName(value = "websites", alternate = {"Websites"})
    @Expose
	@Nullable
    public PersonWebsiteCollectionPage websites;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("account")) {
            account = serializer.deserializeObject(json.get("account"), UserAccountInformationCollectionPage.class);
        }

        if (json.has("addresses")) {
            addresses = serializer.deserializeObject(json.get("addresses"), ItemAddressCollectionPage.class);
        }

        if (json.has("anniversaries")) {
            anniversaries = serializer.deserializeObject(json.get("anniversaries"), PersonAnnualEventCollectionPage.class);
        }

        if (json.has("awards")) {
            awards = serializer.deserializeObject(json.get("awards"), PersonAwardCollectionPage.class);
        }

        if (json.has("certifications")) {
            certifications = serializer.deserializeObject(json.get("certifications"), PersonCertificationCollectionPage.class);
        }

        if (json.has("educationalActivities")) {
            educationalActivities = serializer.deserializeObject(json.get("educationalActivities"), EducationalActivityCollectionPage.class);
        }

        if (json.has("emails")) {
            emails = serializer.deserializeObject(json.get("emails"), ItemEmailCollectionPage.class);
        }

        if (json.has("interests")) {
            interests = serializer.deserializeObject(json.get("interests"), PersonInterestCollectionPage.class);
        }

        if (json.has("languages")) {
            languages = serializer.deserializeObject(json.get("languages"), LanguageProficiencyCollectionPage.class);
        }

        if (json.has("names")) {
            names = serializer.deserializeObject(json.get("names"), PersonNameCollectionPage.class);
        }

        if (json.has("notes")) {
            notes = serializer.deserializeObject(json.get("notes"), PersonAnnotationCollectionPage.class);
        }

        if (json.has("patents")) {
            patents = serializer.deserializeObject(json.get("patents"), ItemPatentCollectionPage.class);
        }

        if (json.has("phones")) {
            phones = serializer.deserializeObject(json.get("phones"), ItemPhoneCollectionPage.class);
        }

        if (json.has("positions")) {
            positions = serializer.deserializeObject(json.get("positions"), WorkPositionCollectionPage.class);
        }

        if (json.has("projects")) {
            projects = serializer.deserializeObject(json.get("projects"), ProjectParticipationCollectionPage.class);
        }

        if (json.has("publications")) {
            publications = serializer.deserializeObject(json.get("publications"), ItemPublicationCollectionPage.class);
        }

        if (json.has("skills")) {
            skills = serializer.deserializeObject(json.get("skills"), SkillProficiencyCollectionPage.class);
        }

        if (json.has("webAccounts")) {
            webAccounts = serializer.deserializeObject(json.get("webAccounts"), WebAccountCollectionPage.class);
        }

        if (json.has("websites")) {
            websites = serializer.deserializeObject(json.get("websites"), PersonWebsiteCollectionPage.class);
        }
    }
}
