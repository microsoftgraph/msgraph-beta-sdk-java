// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.TiAction;
import com.microsoft.graph.models.DiamondModel;
import com.microsoft.graph.models.FileHashType;
import com.microsoft.graph.models.TlpLevel;
import com.microsoft.graph.models.Entity;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Ti Indicator.
 */
public class TiIndicator extends Entity implements IJsonBackedObject {


    /**
     * The Action.
     * The action to apply if the indicator is matched from within the targetProduct security tool. Possible values are: unknown, allow, block, alert. Required.
     */
    @SerializedName(value = "action", alternate = {"Action"})
    @Expose
	@Nullable
    public TiAction action;

    /**
     * The Activity Group Names.
     * The cyber threat intelligence name(s) for the parties responsible for the malicious activity covered by the threat indicator.
     */
    @SerializedName(value = "activityGroupNames", alternate = {"ActivityGroupNames"})
    @Expose
	@Nullable
    public java.util.List<String> activityGroupNames;

    /**
     * The Additional Information.
     * A catchall area into which extra data from the indicator not covered by the other tiIndicator properties may be placed. Data placed into additionalInformation will typically not be utilized by the targetProduct security tool.
     */
    @SerializedName(value = "additionalInformation", alternate = {"AdditionalInformation"})
    @Expose
	@Nullable
    public String additionalInformation;

    /**
     * The Azure Tenant Id.
     * Stamped by the system when the indicator is ingested. The Azure Active Directory tenant id of submitting client. Required.
     */
    @SerializedName(value = "azureTenantId", alternate = {"AzureTenantId"})
    @Expose
	@Nullable
    public String azureTenantId;

    /**
     * The Confidence.
     * An integer representing the confidence the data within the indicator accurately identifies malicious behavior. Acceptable values are 0 – 100 with 100 being the highest.
     */
    @SerializedName(value = "confidence", alternate = {"Confidence"})
    @Expose
	@Nullable
    public Integer confidence;

    /**
     * The Description.
     * Brief description (100 characters or less) of the threat represented by the indicator. Required.
     */
    @SerializedName(value = "description", alternate = {"Description"})
    @Expose
	@Nullable
    public String description;

    /**
     * The Diamond Model.
     * The area of the Diamond Model in which this indicator exists. Possible values are: unknown, adversary, capability, infrastructure, victim.
     */
    @SerializedName(value = "diamondModel", alternate = {"DiamondModel"})
    @Expose
	@Nullable
    public DiamondModel diamondModel;

    /**
     * The Domain Name.
     * 
     */
    @SerializedName(value = "domainName", alternate = {"DomainName"})
    @Expose
	@Nullable
    public String domainName;

    /**
     * The Email Encoding.
     * 
     */
    @SerializedName(value = "emailEncoding", alternate = {"EmailEncoding"})
    @Expose
	@Nullable
    public String emailEncoding;

    /**
     * The Email Language.
     * 
     */
    @SerializedName(value = "emailLanguage", alternate = {"EmailLanguage"})
    @Expose
	@Nullable
    public String emailLanguage;

    /**
     * The Email Recipient.
     * 
     */
    @SerializedName(value = "emailRecipient", alternate = {"EmailRecipient"})
    @Expose
	@Nullable
    public String emailRecipient;

    /**
     * The Email Sender Address.
     * 
     */
    @SerializedName(value = "emailSenderAddress", alternate = {"EmailSenderAddress"})
    @Expose
	@Nullable
    public String emailSenderAddress;

    /**
     * The Email Sender Name.
     * 
     */
    @SerializedName(value = "emailSenderName", alternate = {"EmailSenderName"})
    @Expose
	@Nullable
    public String emailSenderName;

    /**
     * The Email Source Domain.
     * 
     */
    @SerializedName(value = "emailSourceDomain", alternate = {"EmailSourceDomain"})
    @Expose
	@Nullable
    public String emailSourceDomain;

    /**
     * The Email Source Ip Address.
     * 
     */
    @SerializedName(value = "emailSourceIpAddress", alternate = {"EmailSourceIpAddress"})
    @Expose
	@Nullable
    public String emailSourceIpAddress;

    /**
     * The Email Subject.
     * 
     */
    @SerializedName(value = "emailSubject", alternate = {"EmailSubject"})
    @Expose
	@Nullable
    public String emailSubject;

    /**
     * The Email XMailer.
     * 
     */
    @SerializedName(value = "emailXMailer", alternate = {"EmailXMailer"})
    @Expose
	@Nullable
    public String emailXMailer;

    /**
     * The Expiration Date Time.
     * DateTime string indicating when the Indicator expires. All indicators must have an expiration date to avoid stale indicators persisting in the system. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
     */
    @SerializedName(value = "expirationDateTime", alternate = {"ExpirationDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime expirationDateTime;

    /**
     * The External Id.
     * An identification number that ties the indicator back to the indicator provider’s system (e.g. a foreign key).
     */
    @SerializedName(value = "externalId", alternate = {"ExternalId"})
    @Expose
	@Nullable
    public String externalId;

    /**
     * The File Compile Date Time.
     * 
     */
    @SerializedName(value = "fileCompileDateTime", alternate = {"FileCompileDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime fileCompileDateTime;

    /**
     * The File Created Date Time.
     * 
     */
    @SerializedName(value = "fileCreatedDateTime", alternate = {"FileCreatedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime fileCreatedDateTime;

    /**
     * The File Hash Type.
     * 
     */
    @SerializedName(value = "fileHashType", alternate = {"FileHashType"})
    @Expose
	@Nullable
    public FileHashType fileHashType;

    /**
     * The File Hash Value.
     * 
     */
    @SerializedName(value = "fileHashValue", alternate = {"FileHashValue"})
    @Expose
	@Nullable
    public String fileHashValue;

    /**
     * The File Mutex Name.
     * 
     */
    @SerializedName(value = "fileMutexName", alternate = {"FileMutexName"})
    @Expose
	@Nullable
    public String fileMutexName;

    /**
     * The File Name.
     * 
     */
    @SerializedName(value = "fileName", alternate = {"FileName"})
    @Expose
	@Nullable
    public String fileName;

    /**
     * The File Packer.
     * 
     */
    @SerializedName(value = "filePacker", alternate = {"FilePacker"})
    @Expose
	@Nullable
    public String filePacker;

    /**
     * The File Path.
     * 
     */
    @SerializedName(value = "filePath", alternate = {"FilePath"})
    @Expose
	@Nullable
    public String filePath;

    /**
     * The File Size.
     * 
     */
    @SerializedName(value = "fileSize", alternate = {"FileSize"})
    @Expose
	@Nullable
    public Long fileSize;

    /**
     * The File Type.
     * 
     */
    @SerializedName(value = "fileType", alternate = {"FileType"})
    @Expose
	@Nullable
    public String fileType;

    /**
     * The Ingested Date Time.
     * Stamped by the system when the indicator is ingested. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    @SerializedName(value = "ingestedDateTime", alternate = {"IngestedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime ingestedDateTime;

    /**
     * The Is Active.
     * Used to deactivate indicators within system. By default, any indicator submitted is set as active. However, providers may submit existing indicators with this set to ‘False’ to deactivate indicators in the system.
     */
    @SerializedName(value = "isActive", alternate = {"IsActive"})
    @Expose
	@Nullable
    public Boolean isActive;

    /**
     * The Kill Chain.
     * A JSON array of strings that describes which point or points on the Kill Chain this indicator targets. See ‘killChain values’ below for exact values.
     */
    @SerializedName(value = "killChain", alternate = {"KillChain"})
    @Expose
	@Nullable
    public java.util.List<String> killChain;

    /**
     * The Known False Positives.
     * Scenarios in which the indicator may cause false positives. This should be human-readable text.
     */
    @SerializedName(value = "knownFalsePositives", alternate = {"KnownFalsePositives"})
    @Expose
	@Nullable
    public String knownFalsePositives;

    /**
     * The Last Reported Date Time.
     * The last time the indicator was seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    @SerializedName(value = "lastReportedDateTime", alternate = {"LastReportedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime lastReportedDateTime;

    /**
     * The Malware Family Names.
     * The malware family name associated with an indicator if it exists. Microsoft prefers the Microsoft malware family name if at all possible which can be found via the Windows Defender Security Intelligence threat encyclopedia.
     */
    @SerializedName(value = "malwareFamilyNames", alternate = {"MalwareFamilyNames"})
    @Expose
	@Nullable
    public java.util.List<String> malwareFamilyNames;

    /**
     * The Network Cidr Block.
     * 
     */
    @SerializedName(value = "networkCidrBlock", alternate = {"NetworkCidrBlock"})
    @Expose
	@Nullable
    public String networkCidrBlock;

    /**
     * The Network Destination Asn.
     * 
     */
    @SerializedName(value = "networkDestinationAsn", alternate = {"NetworkDestinationAsn"})
    @Expose
	@Nullable
    public Long networkDestinationAsn;

    /**
     * The Network Destination Cidr Block.
     * 
     */
    @SerializedName(value = "networkDestinationCidrBlock", alternate = {"NetworkDestinationCidrBlock"})
    @Expose
	@Nullable
    public String networkDestinationCidrBlock;

    /**
     * The Network Destination IPv4.
     * 
     */
    @SerializedName(value = "networkDestinationIPv4", alternate = {"NetworkDestinationIPv4"})
    @Expose
	@Nullable
    public String networkDestinationIPv4;

    /**
     * The Network Destination IPv6.
     * 
     */
    @SerializedName(value = "networkDestinationIPv6", alternate = {"NetworkDestinationIPv6"})
    @Expose
	@Nullable
    public String networkDestinationIPv6;

    /**
     * The Network Destination Port.
     * 
     */
    @SerializedName(value = "networkDestinationPort", alternate = {"NetworkDestinationPort"})
    @Expose
	@Nullable
    public Integer networkDestinationPort;

    /**
     * The Network IPv4.
     * 
     */
    @SerializedName(value = "networkIPv4", alternate = {"NetworkIPv4"})
    @Expose
	@Nullable
    public String networkIPv4;

    /**
     * The Network IPv6.
     * 
     */
    @SerializedName(value = "networkIPv6", alternate = {"NetworkIPv6"})
    @Expose
	@Nullable
    public String networkIPv6;

    /**
     * The Network Port.
     * 
     */
    @SerializedName(value = "networkPort", alternate = {"NetworkPort"})
    @Expose
	@Nullable
    public Integer networkPort;

    /**
     * The Network Protocol.
     * 
     */
    @SerializedName(value = "networkProtocol", alternate = {"NetworkProtocol"})
    @Expose
	@Nullable
    public Integer networkProtocol;

    /**
     * The Network Source Asn.
     * 
     */
    @SerializedName(value = "networkSourceAsn", alternate = {"NetworkSourceAsn"})
    @Expose
	@Nullable
    public Long networkSourceAsn;

    /**
     * The Network Source Cidr Block.
     * 
     */
    @SerializedName(value = "networkSourceCidrBlock", alternate = {"NetworkSourceCidrBlock"})
    @Expose
	@Nullable
    public String networkSourceCidrBlock;

    /**
     * The Network Source IPv4.
     * 
     */
    @SerializedName(value = "networkSourceIPv4", alternate = {"NetworkSourceIPv4"})
    @Expose
	@Nullable
    public String networkSourceIPv4;

    /**
     * The Network Source IPv6.
     * 
     */
    @SerializedName(value = "networkSourceIPv6", alternate = {"NetworkSourceIPv6"})
    @Expose
	@Nullable
    public String networkSourceIPv6;

    /**
     * The Network Source Port.
     * 
     */
    @SerializedName(value = "networkSourcePort", alternate = {"NetworkSourcePort"})
    @Expose
	@Nullable
    public Integer networkSourcePort;

    /**
     * The Passive Only.
     * Determines if the indicator should trigger an event that is visible to an end-user. When set to ‘true,’ security tools will not notify the end user that a ‘hit’ has occurred. This is most often treated as audit or silent mode by security products where they will simply log that a match occurred but will not perform the action. Default value is false.
     */
    @SerializedName(value = "passiveOnly", alternate = {"PassiveOnly"})
    @Expose
	@Nullable
    public Boolean passiveOnly;

    /**
     * The Severity.
     * An integer representing the severity of the malicious behavior identified by the data within the indicator. Acceptable values are 0 – 5 where 5 is the most severe and zero is not severe at all. Default value is 3.
     */
    @SerializedName(value = "severity", alternate = {"Severity"})
    @Expose
	@Nullable
    public Integer severity;

    /**
     * The Tags.
     * A JSON array of strings that stores arbitrary tags/keywords.
     */
    @SerializedName(value = "tags", alternate = {"Tags"})
    @Expose
	@Nullable
    public java.util.List<String> tags;

    /**
     * The Target Product.
     * A string value representing a single security product to which the indicator should be applied. Acceptable values are: Azure Sentinel, Microsoft Defender ATP. Required
     */
    @SerializedName(value = "targetProduct", alternate = {"TargetProduct"})
    @Expose
	@Nullable
    public String targetProduct;

    /**
     * The Threat Type.
     * Each indicator must have a valid Indicator Threat Type. Possible values are: Botnet, C2, CryptoMining, Darknet, DDoS, MaliciousUrl, Malware, Phishing, Proxy, PUA, WatchList. Required.
     */
    @SerializedName(value = "threatType", alternate = {"ThreatType"})
    @Expose
	@Nullable
    public String threatType;

    /**
     * The Tlp Level.
     * Traffic Light Protocol value for the indicator. Possible values are: unknown, white, green, amber, red. Required.
     */
    @SerializedName(value = "tlpLevel", alternate = {"TlpLevel"})
    @Expose
	@Nullable
    public TlpLevel tlpLevel;

    /**
     * The Url.
     * 
     */
    @SerializedName(value = "url", alternate = {"Url"})
    @Expose
	@Nullable
    public String url;

    /**
     * The User Agent.
     * 
     */
    @SerializedName(value = "userAgent", alternate = {"UserAgent"})
    @Expose
	@Nullable
    public String userAgent;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
