// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.PlannerRecurrenceSchedule;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Planner Task Recurrence.
 */
public class PlannerTaskRecurrence implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Next In Series Task Id.
     * The taskId of the next task in this series. This value is assigned at the time the next task in the series is created, and is null prior to that time.
     */
    @SerializedName(value = "nextInSeriesTaskId", alternate = {"NextInSeriesTaskId"})
    @Expose
	@Nullable
    public String nextInSeriesTaskId;

    /**
     * The Occurrence Id.
     * The 1-based index of this task within the recurrence series. The first task in a series has the value 1, the next task in the series has the value 2, and so on.
     */
    @SerializedName(value = "occurrenceId", alternate = {"OccurrenceId"})
    @Expose
	@Nullable
    public Integer occurrenceId;

    /**
     * The Previous In Series Task Id.
     * The taskId of the previous task in this series. null for the first task in a series since it has no predecessor. All subsequent tasks in the series have a value that corresponds to their predecessors.
     */
    @SerializedName(value = "previousInSeriesTaskId", alternate = {"PreviousInSeriesTaskId"})
    @Expose
	@Nullable
    public String previousInSeriesTaskId;

    /**
     * The Recurrence Start Date Time.
     * The date and time when this recurrence series begin. For the first task in a series (occurrenceId = 1) this value is copied from schedule.patternStartDateTime. For subsequent tasks in the series (occurrenceId &amp;gt;= 2) this value is copied from the previous task and never changes; it preserves the start date of the recurring series. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    @SerializedName(value = "recurrenceStartDateTime", alternate = {"RecurrenceStartDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime recurrenceStartDateTime;

    /**
     * The Schedule.
     * The schedule for recurrence. Clients define and edit recurrence by specifying the schedule. If nextInSeriesTaskId isn't assigned, clients may terminate the series by assigning null to this property.
     */
    @SerializedName(value = "schedule", alternate = {"Schedule"})
    @Expose
	@Nullable
    public PlannerRecurrenceSchedule schedule;

    /**
     * The Series Id.
     * The recurrence series this task belongs to. A GUID-based value that serves as the unique identifier for a series.
     */
    @SerializedName(value = "seriesId", alternate = {"SeriesId"})
    @Expose
	@Nullable
    public String seriesId;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
