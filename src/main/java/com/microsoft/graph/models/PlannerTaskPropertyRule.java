// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.PlannerFieldRules;
import com.microsoft.graph.models.PlannerPropertyRule;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Planner Task Property Rule.
 */
public class PlannerTaskPropertyRule extends PlannerPropertyRule implements IJsonBackedObject {


    /**
     * The Applied Categories.
     * Rules and restrictions for applied categories. This value does not currently support overrides. Accepted values for the default rule and individual overrides are allow, block.
     */
    @SerializedName(value = "appliedCategories", alternate = {"AppliedCategories"})
    @Expose
	@Nullable
    public PlannerFieldRules appliedCategories;

    /**
     * The Assignments.
     * Rules and restrictions for assignments. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, addSelf, addOther, remove, removeSelf, removeOther, block.
     */
    @SerializedName(value = "assignments", alternate = {"Assignments"})
    @Expose
	@Nullable
    public PlannerFieldRules assignments;

    /**
     * The Check Lists.
     * Rules and restrictions for checklist. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, remove, update, check, reorder, block.
     */
    @SerializedName(value = "checkLists", alternate = {"CheckLists"})
    @Expose
	@Nullable
    public PlannerFieldRules checkLists;

    /**
     * The Completion Requirements.
     * Rules and restrictions for completion requirements of the task. Accepted values are allow, add, remove, edit, and block.
     */
    @SerializedName(value = "completionRequirements", alternate = {"CompletionRequirements"})
    @Expose
	@Nullable
    public java.util.List<String> completionRequirements;

    /**
     * The Delete.
     * Rules and restrictions for deleting the task. Accepted values are allow and block.
     */
    @SerializedName(value = "delete", alternate = {"Delete"})
    @Expose
	@Nullable
    public java.util.List<String> delete;

    /**
     * The Due Date.
     * Rules and restrictions for changing the due date of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "dueDate", alternate = {"DueDate"})
    @Expose
	@Nullable
    public java.util.List<String> dueDate;

    /**
     * The Move.
     * Rules and restrictions for moving the task between buckets or plans. Accepted values are allow, moveBetweenPlans, moveBetweenBuckets, and block.
     */
    @SerializedName(value = "move", alternate = {"Move"})
    @Expose
	@Nullable
    public java.util.List<String> move;

    /**
     * The Notes.
     * Rules and restrictions for changing the notes of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "notes", alternate = {"Notes"})
    @Expose
	@Nullable
    public java.util.List<String> notes;

    /**
     * The Order.
     * Rules and restrictions for changing the order of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "order", alternate = {"Order"})
    @Expose
	@Nullable
    public java.util.List<String> order;

    /**
     * The Percent Complete.
     * Rules and restrictions for changing the completion percentage of the task. Accepted values are allow, setToComplete, overrideRequirements, setToNotStarted, setToInProgress, and block.
     */
    @SerializedName(value = "percentComplete", alternate = {"PercentComplete"})
    @Expose
	@Nullable
    public java.util.List<String> percentComplete;

    /**
     * The Preview Type.
     * Rules and restrictions for changing the preview type of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "previewType", alternate = {"PreviewType"})
    @Expose
	@Nullable
    public java.util.List<String> previewType;

    /**
     * The Priority.
     * Rules and restrictions for changing the priority of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "priority", alternate = {"Priority"})
    @Expose
	@Nullable
    public java.util.List<String> priority;

    /**
     * The References.
     * Rules and restrictions for references. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, remove, block.
     */
    @SerializedName(value = "references", alternate = {"References"})
    @Expose
	@Nullable
    public PlannerFieldRules references;

    /**
     * The Start Date.
     * Rules and restrictions for changing the start date of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "startDate", alternate = {"StartDate"})
    @Expose
	@Nullable
    public java.util.List<String> startDate;

    /**
     * The Title.
     * Rules and restrictions for changing the title of the task. Accepted values are allow and block.
     */
    @SerializedName(value = "title", alternate = {"Title"})
    @Expose
	@Nullable
    public java.util.List<String> title;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
