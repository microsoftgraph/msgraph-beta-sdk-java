// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.Label;
import com.microsoft.graph.models.generated.PropertyType;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Property.
 */
public class Property implements IJsonBackedObject {

    @SerializedName("@odata.type")
    @Expose
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Aliases.
     * A set of aliases or a friendly names for the property. Maximum 32 characters. Each string must not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &amp;, ?, @, #, /, ~, ', ', &amp;lt;, &amp;gt;, `
     */
    @SerializedName(value = "aliases", alternate = {"Aliases"})
    @Expose
    public java.util.List<String> aliases;

    /**
     * The Is Content.
     * 
     */
    @SerializedName(value = "isContent", alternate = {"IsContent"})
    @Expose
    public Boolean isContent;

    /**
     * The Is Queryable.
     * Specifies if the property is queryable. Queryable properties can be used in Keyword Query Language (KQL) queries. Optional.
     */
    @SerializedName(value = "isQueryable", alternate = {"IsQueryable"})
    @Expose
    public Boolean isQueryable;

    /**
     * The Is Refinable.
     * Specifies if the property is refinable.  Refinable properties can be used to filter search results in the Search API and add a refiner control in the Microsoft Search user experience. Optional.
     */
    @SerializedName(value = "isRefinable", alternate = {"IsRefinable"})
    @Expose
    public Boolean isRefinable;

    /**
     * The Is Retrievable.
     * Specifies if the property is retrievable. Retrievable properties are returned in the result set when items are returned by the search API. Retrievable properties are also available to add to the display template used to render search results. Optional.
     */
    @SerializedName(value = "isRetrievable", alternate = {"IsRetrievable"})
    @Expose
    public Boolean isRetrievable;

    /**
     * The Is Searchable.
     * Specifies if the property is searchable. Only properties of type String or StringCollection can be searchable. Non-searchable properties are not added to the search index. Optional.
     */
    @SerializedName(value = "isSearchable", alternate = {"IsSearchable"})
    @Expose
    public Boolean isSearchable;

    /**
     * The Labels.
     * Specifies one or more well-known tags added against a property. Labels help Microsoft Search understand the semantics of the data in the connection. Adding appropriate labels would result in an enhanced search experience (e.g. better relevance). Supported labels: title, url, createdBy, lastModifiedBy, authors, createdDateTime, lastModifiedDateTime, fileName and fileExtension. Optional.
     */
    @SerializedName(value = "labels", alternate = {"Labels"})
    @Expose
    public java.util.List<Label> labels;

    /**
     * The Name.
     * The name of the property. Maximum 32 characters. Must not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &amp;, ?, @, #, /, ~, ', ', &amp;lt;, &amp;gt;, `
     */
    @SerializedName(value = "name", alternate = {"Name"})
    @Expose
    public String name;

    /**
     * The Type.
     * The data type of the property. Possible values are: String, Int64, Double, DateTime, Boolean, StringCollection, Int64Collection, DoubleCollection, DateTimeCollection. Required.
     */
    @SerializedName(value = "type", alternate = {"Type"})
    @Expose
    public PropertyType type;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
