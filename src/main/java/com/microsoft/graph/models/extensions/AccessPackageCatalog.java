// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.AccessPackageResource;
import com.microsoft.graph.models.extensions.AccessPackageResourceRole;
import com.microsoft.graph.models.extensions.AccessPackageResourceScope;
import com.microsoft.graph.models.extensions.AccessPackage;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.AccessPackageResourceCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRoleCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRoleCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageResourceScopeCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceScopeCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Access Package Catalog.
 */
public class AccessPackageCatalog extends Entity implements IJsonBackedObject {


    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Description.
     * 
     */
    @SerializedName("description")
    @Expose
    public String description;

    /**
     * The Catalog Type.
     * 
     */
    @SerializedName("catalogType")
    @Expose
    public String catalogType;

    /**
     * The Catalog Status.
     * 
     */
    @SerializedName("catalogStatus")
    @Expose
    public String catalogStatus;

    /**
     * The Is Externally Visible.
     * 
     */
    @SerializedName("isExternallyVisible")
    @Expose
    public Boolean isExternallyVisible;

    /**
     * The Created By.
     * 
     */
    @SerializedName("createdBy")
    @Expose
    public String createdBy;

    /**
     * The Created Date Time.
     * 
     */
    @SerializedName("createdDateTime")
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Modified By.
     * 
     */
    @SerializedName("modifiedBy")
    @Expose
    public String modifiedBy;

    /**
     * The Modified Date Time.
     * 
     */
    @SerializedName("modifiedDateTime")
    @Expose
    public java.util.Calendar modifiedDateTime;

    /**
     * The Access Package Resources.
     * 
     */
    public AccessPackageResourceCollectionPage accessPackageResources;

    /**
     * The Access Package Resource Roles.
     * 
     */
    public AccessPackageResourceRoleCollectionPage accessPackageResourceRoles;

    /**
     * The Access Package Resource Scopes.
     * 
     */
    public AccessPackageResourceScopeCollectionPage accessPackageResourceScopes;

    /**
     * The Access Packages.
     * 
     */
    public AccessPackageCollectionPage accessPackages;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("accessPackageResources")) {
            final AccessPackageResourceCollectionResponse response = new AccessPackageResourceCollectionResponse();
            if (json.has("accessPackageResources@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResources@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResources").toString(), JsonObject[].class);
            final AccessPackageResource[] array = new AccessPackageResource[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResource.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResources = new AccessPackageResourceCollectionPage(response, null);
        }

        if (json.has("accessPackageResourceRoles")) {
            final AccessPackageResourceRoleCollectionResponse response = new AccessPackageResourceRoleCollectionResponse();
            if (json.has("accessPackageResourceRoles@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResourceRoles@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResourceRoles").toString(), JsonObject[].class);
            final AccessPackageResourceRole[] array = new AccessPackageResourceRole[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResourceRole.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResourceRoles = new AccessPackageResourceRoleCollectionPage(response, null);
        }

        if (json.has("accessPackageResourceScopes")) {
            final AccessPackageResourceScopeCollectionResponse response = new AccessPackageResourceScopeCollectionResponse();
            if (json.has("accessPackageResourceScopes@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResourceScopes@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResourceScopes").toString(), JsonObject[].class);
            final AccessPackageResourceScope[] array = new AccessPackageResourceScope[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResourceScope.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResourceScopes = new AccessPackageResourceScopeCollectionPage(response, null);
        }

        if (json.has("accessPackages")) {
            final AccessPackageCollectionResponse response = new AccessPackageCollectionResponse();
            if (json.has("accessPackages@odata.nextLink")) {
                response.nextLink = json.get("accessPackages@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackages").toString(), JsonObject[].class);
            final AccessPackage[] array = new AccessPackage[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackage.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackages = new AccessPackageCollectionPage(response, null);
        }
    }
}
