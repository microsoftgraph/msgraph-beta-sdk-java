// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.OutOfBoxExperienceSettings;
import com.microsoft.graph.models.extensions.WindowsEnrollmentStatusScreenSettings;
import com.microsoft.graph.models.generated.WindowsAutopilotDeviceType;
import com.microsoft.graph.models.extensions.WindowsAutopilotDeviceIdentity;
import com.microsoft.graph.models.extensions.WindowsAutopilotDeploymentProfileAssignment;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.WindowsAutopilotDeviceIdentityCollectionResponse;
import com.microsoft.graph.requests.extensions.WindowsAutopilotDeviceIdentityCollectionPage;
import com.microsoft.graph.requests.extensions.WindowsAutopilotDeploymentProfileAssignmentCollectionResponse;
import com.microsoft.graph.requests.extensions.WindowsAutopilotDeploymentProfileAssignmentCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.*;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Windows Autopilot Deployment Profile.
 */
public class WindowsAutopilotDeploymentProfile extends Entity implements IJsonBackedObject {


    /**
     * The Display Name.
     * Name of the profile
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Description.
     * Description of the profile
     */
    @SerializedName("description")
    @Expose
    public String description;

    /**
     * The Language.
     * Language configured on the device
     */
    @SerializedName("language")
    @Expose
    public String language;

    /**
     * The Created Date Time.
     * Profile creation time
     */
    @SerializedName("createdDateTime")
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Last Modified Date Time.
     * Profile last modified time
     */
    @SerializedName("lastModifiedDateTime")
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Out Of Box Experience Settings.
     * Out of box experience setting
     */
    @SerializedName("outOfBoxExperienceSettings")
    @Expose
    public OutOfBoxExperienceSettings outOfBoxExperienceSettings;

    /**
     * The Enrollment Status Screen Settings.
     * Enrollment status screen setting
     */
    @SerializedName("enrollmentStatusScreenSettings")
    @Expose
    public WindowsEnrollmentStatusScreenSettings enrollmentStatusScreenSettings;

    /**
     * The Extract Hardware Hash.
     * HardwareHash Extraction for the profile
     */
    @SerializedName("extractHardwareHash")
    @Expose
    public Boolean extractHardwareHash;

    /**
     * The Device Name Template.
     * The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
     */
    @SerializedName("deviceNameTemplate")
    @Expose
    public String deviceNameTemplate;

    /**
     * The Device Type.
     * The AutoPilot device type that this profile is applicable to.
     */
    @SerializedName("deviceType")
    @Expose
    public WindowsAutopilotDeviceType deviceType;

    /**
     * The Enable White Glove.
     * Enable Autopilot White Glove for the profile.
     */
    @SerializedName("enableWhiteGlove")
    @Expose
    public Boolean enableWhiteGlove;

    /**
     * The Role Scope Tag Ids.
     * Scope tags for the profile.
     */
    @SerializedName("roleScopeTagIds")
    @Expose
    public java.util.List<String> roleScopeTagIds;

    /**
     * The Assigned Devices.
     * The list of assigned devices for the profile.
     */
    public WindowsAutopilotDeviceIdentityCollectionPage assignedDevices;

    /**
     * The Assignments.
     * The list of group assignments for the profile.
     */
    public WindowsAutopilotDeploymentProfileAssignmentCollectionPage assignments;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("assignedDevices")) {
            final WindowsAutopilotDeviceIdentityCollectionResponse response = new WindowsAutopilotDeviceIdentityCollectionResponse();
            if (json.has("assignedDevices@odata.nextLink")) {
                response.nextLink = json.get("assignedDevices@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("assignedDevices").toString(), JsonObject[].class);
            final WindowsAutopilotDeviceIdentity[] array = new WindowsAutopilotDeviceIdentity[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), WindowsAutopilotDeviceIdentity.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            assignedDevices = new WindowsAutopilotDeviceIdentityCollectionPage(response, null);
        }

        if (json.has("assignments")) {
            final WindowsAutopilotDeploymentProfileAssignmentCollectionResponse response = new WindowsAutopilotDeploymentProfileAssignmentCollectionResponse();
            if (json.has("assignments@odata.nextLink")) {
                response.nextLink = json.get("assignments@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("assignments").toString(), JsonObject[].class);
            final WindowsAutopilotDeploymentProfileAssignment[] array = new WindowsAutopilotDeploymentProfileAssignment[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), WindowsAutopilotDeploymentProfileAssignment.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            assignments = new WindowsAutopilotDeploymentProfileAssignmentCollectionPage(response, null);
        }
    }
}
