// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.DeviceThreatProtectionLevel;
import com.microsoft.graph.models.generated.AndroidDeviceOwnerRequiredPasswordType;
import com.microsoft.graph.models.extensions.DeviceCompliancePolicy;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Android Device Owner Compliance Policy.
 */
public class AndroidDeviceOwnerCompliancePolicy extends DeviceCompliancePolicy implements IJsonBackedObject {


    /**
     * The Advanced Threat Protection Required Security Level.
     * MDATP Require Mobile Threat Protection minimum risk level to report noncompliance.
     */
    @SerializedName(value = "advancedThreatProtectionRequiredSecurityLevel", alternate = {"AdvancedThreatProtectionRequiredSecurityLevel"})
    @Expose
    public DeviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;

    /**
     * The Device Threat Protection Enabled.
     * Require that devices have enabled device threat protection.
     */
    @SerializedName(value = "deviceThreatProtectionEnabled", alternate = {"DeviceThreatProtectionEnabled"})
    @Expose
    public Boolean deviceThreatProtectionEnabled;

    /**
     * The Device Threat Protection Required Security Level.
     * Require Mobile Threat Protection minimum risk level to report noncompliance.
     */
    @SerializedName(value = "deviceThreatProtectionRequiredSecurityLevel", alternate = {"DeviceThreatProtectionRequiredSecurityLevel"})
    @Expose
    public DeviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;

    /**
     * The Min Android Security Patch Level.
     * Minimum Android security patch level.
     */
    @SerializedName(value = "minAndroidSecurityPatchLevel", alternate = {"MinAndroidSecurityPatchLevel"})
    @Expose
    public String minAndroidSecurityPatchLevel;

    /**
     * The Os Maximum Version.
     * Maximum Android version.
     */
    @SerializedName(value = "osMaximumVersion", alternate = {"OsMaximumVersion"})
    @Expose
    public String osMaximumVersion;

    /**
     * The Os Minimum Version.
     * Minimum Android version.
     */
    @SerializedName(value = "osMinimumVersion", alternate = {"OsMinimumVersion"})
    @Expose
    public String osMinimumVersion;

    /**
     * The Password Expiration Days.
     * Number of days before the password expires. Valid values 1 to 365
     */
    @SerializedName(value = "passwordExpirationDays", alternate = {"PasswordExpirationDays"})
    @Expose
    public Integer passwordExpirationDays;

    /**
     * The Password Minimum Length.
     * Minimum password length. Valid values 4 to 16
     */
    @SerializedName(value = "passwordMinimumLength", alternate = {"PasswordMinimumLength"})
    @Expose
    public Integer passwordMinimumLength;

    /**
     * The Password Minimum Letter Characters.
     * Indicates the minimum number of letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumLetterCharacters", alternate = {"PasswordMinimumLetterCharacters"})
    @Expose
    public Integer passwordMinimumLetterCharacters;

    /**
     * The Password Minimum Lower Case Characters.
     * Indicates the minimum number of lower case characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumLowerCaseCharacters", alternate = {"PasswordMinimumLowerCaseCharacters"})
    @Expose
    public Integer passwordMinimumLowerCaseCharacters;

    /**
     * The Password Minimum Non Letter Characters.
     * Indicates the minimum number of non-letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumNonLetterCharacters", alternate = {"PasswordMinimumNonLetterCharacters"})
    @Expose
    public Integer passwordMinimumNonLetterCharacters;

    /**
     * The Password Minimum Numeric Characters.
     * Indicates the minimum number of numeric characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumNumericCharacters", alternate = {"PasswordMinimumNumericCharacters"})
    @Expose
    public Integer passwordMinimumNumericCharacters;

    /**
     * The Password Minimum Symbol Characters.
     * Indicates the minimum number of symbol characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumSymbolCharacters", alternate = {"PasswordMinimumSymbolCharacters"})
    @Expose
    public Integer passwordMinimumSymbolCharacters;

    /**
     * The Password Minimum Upper Case Characters.
     * Indicates the minimum number of upper case letter characters required for device password. Valid values 1 to 16
     */
    @SerializedName(value = "passwordMinimumUpperCaseCharacters", alternate = {"PasswordMinimumUpperCaseCharacters"})
    @Expose
    public Integer passwordMinimumUpperCaseCharacters;

    /**
     * The Password Minutes Of Inactivity Before Lock.
     * Minutes of inactivity before a password is required.
     */
    @SerializedName(value = "passwordMinutesOfInactivityBeforeLock", alternate = {"PasswordMinutesOfInactivityBeforeLock"})
    @Expose
    public Integer passwordMinutesOfInactivityBeforeLock;

    /**
     * The Password Previous Password Count To Block.
     * Number of previous passwords to block. Valid values 1 to 24
     */
    @SerializedName(value = "passwordPreviousPasswordCountToBlock", alternate = {"PasswordPreviousPasswordCountToBlock"})
    @Expose
    public Integer passwordPreviousPasswordCountToBlock;

    /**
     * The Password Required.
     * Require a password to unlock device.
     */
    @SerializedName(value = "passwordRequired", alternate = {"PasswordRequired"})
    @Expose
    public Boolean passwordRequired;

    /**
     * The Password Required Type.
     * Type of characters in password
     */
    @SerializedName(value = "passwordRequiredType", alternate = {"PasswordRequiredType"})
    @Expose
    public AndroidDeviceOwnerRequiredPasswordType passwordRequiredType;

    /**
     * The Security Require Safety Net Attestation Basic Integrity.
     * Require the device to pass the SafetyNet basic integrity check.
     */
    @SerializedName(value = "securityRequireSafetyNetAttestationBasicIntegrity", alternate = {"SecurityRequireSafetyNetAttestationBasicIntegrity"})
    @Expose
    public Boolean securityRequireSafetyNetAttestationBasicIntegrity;

    /**
     * The Security Require Safety Net Attestation Certified Device.
     * Require the device to pass the SafetyNet certified device check.
     */
    @SerializedName(value = "securityRequireSafetyNetAttestationCertifiedDevice", alternate = {"SecurityRequireSafetyNetAttestationCertifiedDevice"})
    @Expose
    public Boolean securityRequireSafetyNetAttestationCertifiedDevice;

    /**
     * The Storage Require Encryption.
     * Require encryption on Android devices.
     */
    @SerializedName(value = "storageRequireEncryption", alternate = {"StorageRequireEncryption"})
    @Expose
    public Boolean storageRequireEncryption;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
