// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.UserIdentity;
import com.microsoft.graph.models.extensions.AccessReviewSettings;
import com.microsoft.graph.models.extensions.Identity;
import com.microsoft.graph.models.extensions.AccessReviewReviewer;
import com.microsoft.graph.models.extensions.AccessReviewDecision;
import com.microsoft.graph.models.extensions.AccessReview;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.AccessReviewReviewerCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessReviewReviewerCollectionPage;
import com.microsoft.graph.requests.extensions.AccessReviewDecisionCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessReviewDecisionCollectionPage;
import com.microsoft.graph.requests.extensions.AccessReviewCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessReviewCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Access Review.
 */
public class AccessReview extends Entity implements IJsonBackedObject {


    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Start Date Time.
     * 
     */
    @SerializedName("startDateTime")
    @Expose
    public java.util.Calendar startDateTime;

    /**
     * The End Date Time.
     * 
     */
    @SerializedName("endDateTime")
    @Expose
    public java.util.Calendar endDateTime;

    /**
     * The Status.
     * 
     */
    @SerializedName("status")
    @Expose
    public String status;

    /**
     * The Created By.
     * 
     */
    @SerializedName("createdBy")
    @Expose
    public UserIdentity createdBy;

    /**
     * The Business Flow Template Id.
     * 
     */
    @SerializedName("businessFlowTemplateId")
    @Expose
    public String businessFlowTemplateId;

    /**
     * The Reviewer Type.
     * 
     */
    @SerializedName("reviewerType")
    @Expose
    public String reviewerType;

    /**
     * The Description.
     * 
     */
    @SerializedName("description")
    @Expose
    public String description;

    /**
     * The Settings.
     * 
     */
    @SerializedName("settings")
    @Expose
    public AccessReviewSettings settings;

    /**
     * The Reviewed Entity.
     * 
     */
    @SerializedName("reviewedEntity")
    @Expose
    public Identity reviewedEntity;

    /**
     * The Reviewers.
     * 
     */
    public AccessReviewReviewerCollectionPage reviewers;

    /**
     * The Decisions.
     * 
     */
    public AccessReviewDecisionCollectionPage decisions;

    /**
     * The My Decisions.
     * 
     */
    public AccessReviewDecisionCollectionPage myDecisions;

    /**
     * The Instances.
     * 
     */
    public AccessReviewCollectionPage instances;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("reviewers")) {
            final AccessReviewReviewerCollectionResponse response = new AccessReviewReviewerCollectionResponse();
            if (json.has("reviewers@odata.nextLink")) {
                response.nextLink = json.get("reviewers@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("reviewers").toString(), JsonObject[].class);
            final AccessReviewReviewer[] array = new AccessReviewReviewer[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessReviewReviewer.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            reviewers = new AccessReviewReviewerCollectionPage(response, null);
        }

        if (json.has("decisions")) {
            final AccessReviewDecisionCollectionResponse response = new AccessReviewDecisionCollectionResponse();
            if (json.has("decisions@odata.nextLink")) {
                response.nextLink = json.get("decisions@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("decisions").toString(), JsonObject[].class);
            final AccessReviewDecision[] array = new AccessReviewDecision[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessReviewDecision.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            decisions = new AccessReviewDecisionCollectionPage(response, null);
        }

        if (json.has("myDecisions")) {
            final AccessReviewDecisionCollectionResponse response = new AccessReviewDecisionCollectionResponse();
            if (json.has("myDecisions@odata.nextLink")) {
                response.nextLink = json.get("myDecisions@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("myDecisions").toString(), JsonObject[].class);
            final AccessReviewDecision[] array = new AccessReviewDecision[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessReviewDecision.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            myDecisions = new AccessReviewDecisionCollectionPage(response, null);
        }

        if (json.has("instances")) {
            final AccessReviewCollectionResponse response = new AccessReviewCollectionResponse();
            if (json.has("instances@odata.nextLink")) {
                response.nextLink = json.get("instances@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("instances").toString(), JsonObject[].class);
            final AccessReview[] array = new AccessReview[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessReview.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            instances = new AccessReviewCollectionPage(response, null);
        }
    }
}
