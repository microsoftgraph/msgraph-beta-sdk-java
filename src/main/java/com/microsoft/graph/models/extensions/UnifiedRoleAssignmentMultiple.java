// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.AppScope;
import com.microsoft.graph.models.extensions.DirectoryObject;
import com.microsoft.graph.models.extensions.UnifiedRoleDefinition;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.AppScopeCollectionResponse;
import com.microsoft.graph.requests.extensions.AppScopeCollectionPage;
import com.microsoft.graph.requests.extensions.DirectoryObjectCollectionResponse;
import com.microsoft.graph.requests.extensions.DirectoryObjectCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Unified Role Assignment Multiple.
 */
public class UnifiedRoleAssignmentMultiple extends Entity implements IJsonBackedObject {


    /**
     * The App Scope Ids.
     * 
     */
    @SerializedName("appScopeIds")
    @Expose
    public java.util.List<String> appScopeIds;

    /**
     * The Condition.
     * 
     */
    @SerializedName("condition")
    @Expose
    public String condition;

    /**
     * The Description.
     * 
     */
    @SerializedName("description")
    @Expose
    public String description;

    /**
     * The Directory Scope Ids.
     * 
     */
    @SerializedName("directoryScopeIds")
    @Expose
    public java.util.List<String> directoryScopeIds;

    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Principal Ids.
     * 
     */
    @SerializedName("principalIds")
    @Expose
    public java.util.List<String> principalIds;

    /**
     * The Role Definition Id.
     * 
     */
    @SerializedName("roleDefinitionId")
    @Expose
    public String roleDefinitionId;

    /**
     * The App Scopes.
     * 
     */
    @SerializedName("appScopes")
    @Expose
    public AppScopeCollectionPage appScopes;

    /**
     * The Directory Scopes.
     * 
     */
    public DirectoryObjectCollectionPage directoryScopes;

    /**
     * The Principals.
     * 
     */
    public DirectoryObjectCollectionPage principals;

    /**
     * The Role Definition.
     * 
     */
    @SerializedName("roleDefinition")
    @Expose
    public UnifiedRoleDefinition roleDefinition;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("appScopes")) {
            final AppScopeCollectionResponse response = new AppScopeCollectionResponse();
            if (json.has("appScopes@odata.nextLink")) {
                response.nextLink = json.get("appScopes@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("appScopes").toString(), JsonObject[].class);
            final AppScope[] array = new AppScope[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AppScope.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            appScopes = new AppScopeCollectionPage(response, null);
        }

        if (json.has("directoryScopes")) {
            final DirectoryObjectCollectionResponse response = new DirectoryObjectCollectionResponse();
            if (json.has("directoryScopes@odata.nextLink")) {
                response.nextLink = json.get("directoryScopes@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("directoryScopes").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            directoryScopes = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("principals")) {
            final DirectoryObjectCollectionResponse response = new DirectoryObjectCollectionResponse();
            if (json.has("principals@odata.nextLink")) {
                response.nextLink = json.get("principals@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("principals").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            principals = new DirectoryObjectCollectionPage(response, null);
        }
    }
}
