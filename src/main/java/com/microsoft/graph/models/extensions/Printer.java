// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.PrintUserIdentity;
import com.microsoft.graph.models.extensions.PrintIdentity;
import com.microsoft.graph.models.extensions.PrinterShare;
import com.microsoft.graph.models.extensions.PrintConnector;
import com.microsoft.graph.models.extensions.PrintTaskTrigger;
import com.microsoft.graph.models.extensions.PrinterBase;
import com.microsoft.graph.requests.extensions.PrintUserIdentityCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintUserIdentityCollectionPage;
import com.microsoft.graph.requests.extensions.PrintIdentityCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintIdentityCollectionPage;
import com.microsoft.graph.requests.extensions.PrintConnectorCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintConnectorCollectionPage;
import com.microsoft.graph.requests.extensions.PrintTaskTriggerCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintTaskTriggerCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Printer.
 */
public class Printer extends PrinterBase implements IJsonBackedObject {


    /**
     * The Registered Date Time.
     * 
     */
    @SerializedName("registeredDateTime")
    @Expose
    public java.util.Calendar registeredDateTime;

    /**
     * The Is Shared.
     * 
     */
    @SerializedName("isShared")
    @Expose
    public Boolean isShared;

    /**
     * The Accepting Jobs.
     * 
     */
    @SerializedName("acceptingJobs")
    @Expose
    public Boolean acceptingJobs;

    /**
     * The Allowed Users.
     * 
     */
    public PrintUserIdentityCollectionPage allowedUsers;

    /**
     * The Allowed Groups.
     * 
     */
    public PrintIdentityCollectionPage allowedGroups;

    /**
     * The Share.
     * 
     */
    @SerializedName("share")
    @Expose
    public PrinterShare share;

    /**
     * The Connectors.
     * 
     */
    public PrintConnectorCollectionPage connectors;

    /**
     * The Task Triggers.
     * 
     */
    public PrintTaskTriggerCollectionPage taskTriggers;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("allowedUsers")) {
            final PrintUserIdentityCollectionResponse response = new PrintUserIdentityCollectionResponse();
            if (json.has("allowedUsers@odata.nextLink")) {
                response.nextLink = json.get("allowedUsers@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("allowedUsers").toString(), JsonObject[].class);
            final PrintUserIdentity[] array = new PrintUserIdentity[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintUserIdentity.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            allowedUsers = new PrintUserIdentityCollectionPage(response, null);
        }

        if (json.has("allowedGroups")) {
            final PrintIdentityCollectionResponse response = new PrintIdentityCollectionResponse();
            if (json.has("allowedGroups@odata.nextLink")) {
                response.nextLink = json.get("allowedGroups@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("allowedGroups").toString(), JsonObject[].class);
            final PrintIdentity[] array = new PrintIdentity[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintIdentity.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            allowedGroups = new PrintIdentityCollectionPage(response, null);
        }

        if (json.has("connectors")) {
            final PrintConnectorCollectionResponse response = new PrintConnectorCollectionResponse();
            if (json.has("connectors@odata.nextLink")) {
                response.nextLink = json.get("connectors@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("connectors").toString(), JsonObject[].class);
            final PrintConnector[] array = new PrintConnector[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintConnector.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            connectors = new PrintConnectorCollectionPage(response, null);
        }

        if (json.has("taskTriggers")) {
            final PrintTaskTriggerCollectionResponse response = new PrintTaskTriggerCollectionResponse();
            if (json.has("taskTriggers@odata.nextLink")) {
                response.nextLink = json.get("taskTriggers@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("taskTriggers").toString(), JsonObject[].class);
            final PrintTaskTrigger[] array = new PrintTaskTrigger[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintTaskTrigger.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            taskTriggers = new PrintTaskTriggerCollectionPage(response, null);
        }
    }
}
