// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.RiskDetail;
import com.microsoft.graph.models.generated.RiskLevel;
import com.microsoft.graph.models.generated.RiskState;
import com.microsoft.graph.models.extensions.RiskyUserHistoryItem;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.RiskyUserHistoryItemCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Risky User.
 */
public class RiskyUser extends Entity implements IJsonBackedObject {


    /**
     * The Is Deleted.
     * Indicates whether the user is deleted. Possible values are: true, false.
     */
    @SerializedName(value = "isDeleted", alternate = {"IsDeleted"})
    @Expose
    public Boolean isDeleted;

    /**
     * The Is Processing.
     * Indicates whether a user's risky state is being processed by the backend.
     */
    @SerializedName(value = "isProcessing", alternate = {"IsProcessing"})
    @Expose
    public Boolean isProcessing;

    /**
     * The Risk Detail.
     * The possible values are none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue.
     */
    @SerializedName(value = "riskDetail", alternate = {"RiskDetail"})
    @Expose
    public RiskDetail riskDetail;

    /**
     * The Risk Last Updated Date Time.
     * The date and time that the risky user was last updated
     */
    @SerializedName(value = "riskLastUpdatedDateTime", alternate = {"RiskLastUpdatedDateTime"})
    @Expose
    public java.util.Calendar riskLastUpdatedDateTime;

    /**
     * The Risk Level.
     * The possible values are low, medium, high, hidden, none, unknownFutureValue.
     */
    @SerializedName(value = "riskLevel", alternate = {"RiskLevel"})
    @Expose
    public RiskLevel riskLevel;

    /**
     * The Risk State.
     * The possible values are none, confirmedSafe, remediated, atRisk, unknownFutureValue.
     */
    @SerializedName(value = "riskState", alternate = {"RiskState"})
    @Expose
    public RiskState riskState;

    /**
     * The User Display Name.
     * Risky user display name.
     */
    @SerializedName(value = "userDisplayName", alternate = {"UserDisplayName"})
    @Expose
    public String userDisplayName;

    /**
     * The User Principal Name.
     * Risky user principal name.
     */
    @SerializedName(value = "userPrincipalName", alternate = {"UserPrincipalName"})
    @Expose
    public String userPrincipalName;

    /**
     * The History.
     * 
     */
    @SerializedName(value = "history", alternate = {"History"})
    @Expose
    public RiskyUserHistoryItemCollectionPage history;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("history")) {
            history = serializer.deserializeObject(json.get("history").toString(), RiskyUserHistoryItemCollectionPage.class);
        }
    }
}
