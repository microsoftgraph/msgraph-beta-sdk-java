// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.WindowsDeviceHealthState;
import com.microsoft.graph.models.extensions.WindowsDeviceMalwareState;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.WindowsDeviceMalwareStateCollectionResponse;
import com.microsoft.graph.requests.extensions.WindowsDeviceMalwareStateCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.*;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Windows Protection State.
 */
public class WindowsProtectionState extends Entity implements IJsonBackedObject {


    /**
     * The Malware Protection Enabled.
     * Anti malware is enabled or not
     */
    @SerializedName("malwareProtectionEnabled")
    @Expose
    public Boolean malwareProtectionEnabled;

    /**
     * The Device State.
     * Computer's state (like clean or pending full scan or pending reboot etc)
     */
    @SerializedName("deviceState")
    @Expose
    public EnumSet<WindowsDeviceHealthState> deviceState;

    /**
     * The Real Time Protection Enabled.
     * Real time protection is enabled or not?
     */
    @SerializedName("realTimeProtectionEnabled")
    @Expose
    public Boolean realTimeProtectionEnabled;

    /**
     * The Network Inspection System Enabled.
     * Network inspection system enabled or not?
     */
    @SerializedName("networkInspectionSystemEnabled")
    @Expose
    public Boolean networkInspectionSystemEnabled;

    /**
     * The Quick Scan Overdue.
     * Quick scan overdue or not?
     */
    @SerializedName("quickScanOverdue")
    @Expose
    public Boolean quickScanOverdue;

    /**
     * The Full Scan Overdue.
     * Full scan overdue or not?
     */
    @SerializedName("fullScanOverdue")
    @Expose
    public Boolean fullScanOverdue;

    /**
     * The Signature Update Overdue.
     * Signature out of date or not?
     */
    @SerializedName("signatureUpdateOverdue")
    @Expose
    public Boolean signatureUpdateOverdue;

    /**
     * The Reboot Required.
     * Reboot required or not?
     */
    @SerializedName("rebootRequired")
    @Expose
    public Boolean rebootRequired;

    /**
     * The Full Scan Required.
     * Full scan required or not?
     */
    @SerializedName("fullScanRequired")
    @Expose
    public Boolean fullScanRequired;

    /**
     * The Engine Version.
     * Current endpoint protection engine's version
     */
    @SerializedName("engineVersion")
    @Expose
    public String engineVersion;

    /**
     * The Signature Version.
     * Current malware definitions version
     */
    @SerializedName("signatureVersion")
    @Expose
    public String signatureVersion;

    /**
     * The Anti Malware Version.
     * Current anti malware version
     */
    @SerializedName("antiMalwareVersion")
    @Expose
    public String antiMalwareVersion;

    /**
     * The Last Quick Scan Date Time.
     * Last quick scan datetime
     */
    @SerializedName("lastQuickScanDateTime")
    @Expose
    public java.util.Calendar lastQuickScanDateTime;

    /**
     * The Last Full Scan Date Time.
     * Last quick scan datetime
     */
    @SerializedName("lastFullScanDateTime")
    @Expose
    public java.util.Calendar lastFullScanDateTime;

    /**
     * The Last Quick Scan Signature Version.
     * Last quick scan signature version
     */
    @SerializedName("lastQuickScanSignatureVersion")
    @Expose
    public String lastQuickScanSignatureVersion;

    /**
     * The Last Full Scan Signature Version.
     * Last full scan signature version
     */
    @SerializedName("lastFullScanSignatureVersion")
    @Expose
    public String lastFullScanSignatureVersion;

    /**
     * The Last Reported Date Time.
     * Last device health status reported time
     */
    @SerializedName("lastReportedDateTime")
    @Expose
    public java.util.Calendar lastReportedDateTime;

    /**
     * The Detected Malware State.
     * Device malware list
     */
    public WindowsDeviceMalwareStateCollectionPage detectedMalwareState;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("detectedMalwareState")) {
            final WindowsDeviceMalwareStateCollectionResponse response = new WindowsDeviceMalwareStateCollectionResponse();
            if (json.has("detectedMalwareState@odata.nextLink")) {
                response.nextLink = json.get("detectedMalwareState@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("detectedMalwareState").toString(), JsonObject[].class);
            final WindowsDeviceMalwareState[] array = new WindowsDeviceMalwareState[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), WindowsDeviceMalwareState.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            detectedMalwareState = new WindowsDeviceMalwareStateCollectionPage(response, null);
        }
    }
}
