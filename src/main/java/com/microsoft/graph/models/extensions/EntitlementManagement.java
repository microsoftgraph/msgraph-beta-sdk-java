// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.AccessPackageAssignmentPolicy;
import com.microsoft.graph.models.extensions.AccessPackageAssignmentRequest;
import com.microsoft.graph.models.extensions.AccessPackageAssignmentResourceRole;
import com.microsoft.graph.models.extensions.AccessPackageAssignment;
import com.microsoft.graph.models.extensions.AccessPackageCatalog;
import com.microsoft.graph.models.extensions.AccessPackageResourceRequest;
import com.microsoft.graph.models.extensions.AccessPackageResourceRoleScope;
import com.microsoft.graph.models.extensions.AccessPackageResource;
import com.microsoft.graph.models.extensions.AccessPackage;
import com.microsoft.graph.models.extensions.ConnectedOrganization;
import com.microsoft.graph.models.extensions.EntitlementManagementSettings;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentPolicyCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentPolicyCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentRequestCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentRequestCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentResourceRoleCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentResourceRoleCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageAssignmentCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageCatalogCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageCatalogCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRequestCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRequestCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRoleScopeCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceRoleScopeCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageResourceCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageResourceCollectionPage;
import com.microsoft.graph.requests.extensions.AccessPackageCollectionResponse;
import com.microsoft.graph.requests.extensions.AccessPackageCollectionPage;
import com.microsoft.graph.requests.extensions.ConnectedOrganizationCollectionResponse;
import com.microsoft.graph.requests.extensions.ConnectedOrganizationCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Entitlement Management.
 */
public class EntitlementManagement extends Entity implements IJsonBackedObject {


    /**
     * The Access Package Assignment Policies.
     * 
     */
    @SerializedName("accessPackageAssignmentPolicies")
    @Expose
    public AccessPackageAssignmentPolicyCollectionPage accessPackageAssignmentPolicies;

    /**
     * The Access Package Assignment Requests.
     * 
     */
    @SerializedName("accessPackageAssignmentRequests")
    @Expose
    public AccessPackageAssignmentRequestCollectionPage accessPackageAssignmentRequests;

    /**
     * The Access Package Assignment Resource Roles.
     * 
     */
    @SerializedName("accessPackageAssignmentResourceRoles")
    @Expose
    public AccessPackageAssignmentResourceRoleCollectionPage accessPackageAssignmentResourceRoles;

    /**
     * The Access Package Assignments.
     * 
     */
    @SerializedName("accessPackageAssignments")
    @Expose
    public AccessPackageAssignmentCollectionPage accessPackageAssignments;

    /**
     * The Access Package Catalogs.
     * 
     */
    @SerializedName("accessPackageCatalogs")
    @Expose
    public AccessPackageCatalogCollectionPage accessPackageCatalogs;

    /**
     * The Access Package Resource Requests.
     * 
     */
    @SerializedName("accessPackageResourceRequests")
    @Expose
    public AccessPackageResourceRequestCollectionPage accessPackageResourceRequests;

    /**
     * The Access Package Resource Role Scopes.
     * 
     */
    @SerializedName("accessPackageResourceRoleScopes")
    @Expose
    public AccessPackageResourceRoleScopeCollectionPage accessPackageResourceRoleScopes;

    /**
     * The Access Package Resources.
     * 
     */
    @SerializedName("accessPackageResources")
    @Expose
    public AccessPackageResourceCollectionPage accessPackageResources;

    /**
     * The Access Packages.
     * 
     */
    @SerializedName("accessPackages")
    @Expose
    public AccessPackageCollectionPage accessPackages;

    /**
     * The Connected Organizations.
     * 
     */
    @SerializedName("connectedOrganizations")
    @Expose
    public ConnectedOrganizationCollectionPage connectedOrganizations;

    /**
     * The Settings.
     * 
     */
    @SerializedName("settings")
    @Expose
    public EntitlementManagementSettings settings;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("accessPackageAssignmentPolicies")) {
            final AccessPackageAssignmentPolicyCollectionResponse response = new AccessPackageAssignmentPolicyCollectionResponse();
            if (json.has("accessPackageAssignmentPolicies@odata.nextLink")) {
                response.nextLink = json.get("accessPackageAssignmentPolicies@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageAssignmentPolicies").toString(), JsonObject[].class);
            final AccessPackageAssignmentPolicy[] array = new AccessPackageAssignmentPolicy[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageAssignmentPolicy.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageAssignmentPolicies = new AccessPackageAssignmentPolicyCollectionPage(response, null);
        }

        if (json.has("accessPackageAssignmentRequests")) {
            final AccessPackageAssignmentRequestCollectionResponse response = new AccessPackageAssignmentRequestCollectionResponse();
            if (json.has("accessPackageAssignmentRequests@odata.nextLink")) {
                response.nextLink = json.get("accessPackageAssignmentRequests@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageAssignmentRequests").toString(), JsonObject[].class);
            final AccessPackageAssignmentRequest[] array = new AccessPackageAssignmentRequest[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageAssignmentRequest.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageAssignmentRequests = new AccessPackageAssignmentRequestCollectionPage(response, null);
        }

        if (json.has("accessPackageAssignmentResourceRoles")) {
            final AccessPackageAssignmentResourceRoleCollectionResponse response = new AccessPackageAssignmentResourceRoleCollectionResponse();
            if (json.has("accessPackageAssignmentResourceRoles@odata.nextLink")) {
                response.nextLink = json.get("accessPackageAssignmentResourceRoles@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageAssignmentResourceRoles").toString(), JsonObject[].class);
            final AccessPackageAssignmentResourceRole[] array = new AccessPackageAssignmentResourceRole[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageAssignmentResourceRole.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageAssignmentResourceRoles = new AccessPackageAssignmentResourceRoleCollectionPage(response, null);
        }

        if (json.has("accessPackageAssignments")) {
            final AccessPackageAssignmentCollectionResponse response = new AccessPackageAssignmentCollectionResponse();
            if (json.has("accessPackageAssignments@odata.nextLink")) {
                response.nextLink = json.get("accessPackageAssignments@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageAssignments").toString(), JsonObject[].class);
            final AccessPackageAssignment[] array = new AccessPackageAssignment[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageAssignment.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageAssignments = new AccessPackageAssignmentCollectionPage(response, null);
        }

        if (json.has("accessPackageCatalogs")) {
            final AccessPackageCatalogCollectionResponse response = new AccessPackageCatalogCollectionResponse();
            if (json.has("accessPackageCatalogs@odata.nextLink")) {
                response.nextLink = json.get("accessPackageCatalogs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageCatalogs").toString(), JsonObject[].class);
            final AccessPackageCatalog[] array = new AccessPackageCatalog[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageCatalog.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageCatalogs = new AccessPackageCatalogCollectionPage(response, null);
        }

        if (json.has("accessPackageResourceRequests")) {
            final AccessPackageResourceRequestCollectionResponse response = new AccessPackageResourceRequestCollectionResponse();
            if (json.has("accessPackageResourceRequests@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResourceRequests@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResourceRequests").toString(), JsonObject[].class);
            final AccessPackageResourceRequest[] array = new AccessPackageResourceRequest[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResourceRequest.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResourceRequests = new AccessPackageResourceRequestCollectionPage(response, null);
        }

        if (json.has("accessPackageResourceRoleScopes")) {
            final AccessPackageResourceRoleScopeCollectionResponse response = new AccessPackageResourceRoleScopeCollectionResponse();
            if (json.has("accessPackageResourceRoleScopes@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResourceRoleScopes@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResourceRoleScopes").toString(), JsonObject[].class);
            final AccessPackageResourceRoleScope[] array = new AccessPackageResourceRoleScope[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResourceRoleScope.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResourceRoleScopes = new AccessPackageResourceRoleScopeCollectionPage(response, null);
        }

        if (json.has("accessPackageResources")) {
            final AccessPackageResourceCollectionResponse response = new AccessPackageResourceCollectionResponse();
            if (json.has("accessPackageResources@odata.nextLink")) {
                response.nextLink = json.get("accessPackageResources@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackageResources").toString(), JsonObject[].class);
            final AccessPackageResource[] array = new AccessPackageResource[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackageResource.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackageResources = new AccessPackageResourceCollectionPage(response, null);
        }

        if (json.has("accessPackages")) {
            final AccessPackageCollectionResponse response = new AccessPackageCollectionResponse();
            if (json.has("accessPackages@odata.nextLink")) {
                response.nextLink = json.get("accessPackages@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("accessPackages").toString(), JsonObject[].class);
            final AccessPackage[] array = new AccessPackage[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), AccessPackage.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            accessPackages = new AccessPackageCollectionPage(response, null);
        }

        if (json.has("connectedOrganizations")) {
            final ConnectedOrganizationCollectionResponse response = new ConnectedOrganizationCollectionResponse();
            if (json.has("connectedOrganizations@odata.nextLink")) {
                response.nextLink = json.get("connectedOrganizations@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("connectedOrganizations").toString(), JsonObject[].class);
            final ConnectedOrganization[] array = new ConnectedOrganization[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ConnectedOrganization.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            connectedOrganizations = new ConnectedOrganizationCollectionPage(response, null);
        }
    }
}
