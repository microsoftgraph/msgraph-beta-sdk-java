// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Trust Framework Key.
 */
public class TrustFrameworkKey implements IJsonBackedObject {

    @SerializedName("@odata.type")
    @Expose
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The D.
     * RSA Key - private exponent. Field cannot be read back.
     */
    @SerializedName(value = "d", alternate = {"D"})
    @Expose
    public String d;

    /**
     * The Dp.
     * RSA Key - first exponent. Field cannot be read back.
     */
    @SerializedName(value = "dp", alternate = {"Dp"})
    @Expose
    public String dp;

    /**
     * The Dq.
     * RSA Key - second exponent. Field cannot be read back.
     */
    @SerializedName(value = "dq", alternate = {"Dq"})
    @Expose
    public String dq;

    /**
     * The E.
     * RSA Key - public exponent
     */
    @SerializedName(value = "e", alternate = {"E"})
    @Expose
    public String e;

    /**
     * The Exp.
     * This value is a NumericDate as defined in RFC 7519 (A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.)
     */
    @SerializedName(value = "exp", alternate = {"Exp"})
    @Expose
    public Long exp;

    /**
     * The K.
     * Symmetric Key for oct key type. Field cannot be read back.
     */
    @SerializedName(value = "k", alternate = {"K"})
    @Expose
    public String k;

    /**
     * The Kid.
     * The unique identifier for the key.
     */
    @SerializedName(value = "kid", alternate = {"Kid"})
    @Expose
    public String kid;

    /**
     * The Kty.
     * The 'kty' (key type) parameter identifies the cryptographic algorithm family used with the key, The valid values are rsa, oct.
     */
    @SerializedName(value = "kty", alternate = {"Kty"})
    @Expose
    public String kty;

    /**
     * The N.
     * RSA Key - modulus
     */
    @SerializedName(value = "n", alternate = {"N"})
    @Expose
    public String n;

    /**
     * The Nbf.
     * This value is a NumericDate as defined in RFC 7519 (A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.)
     */
    @SerializedName(value = "nbf", alternate = {"Nbf"})
    @Expose
    public Long nbf;

    /**
     * The P.
     * RSA Key - first prime. Field cannot be read back.
     */
    @SerializedName(value = "p", alternate = {"P"})
    @Expose
    public String p;

    /**
     * The Q.
     * RSA Key - second prime. Field cannot be read back.
     */
    @SerializedName(value = "q", alternate = {"Q"})
    @Expose
    public String q;

    /**
     * The Qi.
     * RSA Key - Coefficient. Field cannot be read back.
     */
    @SerializedName(value = "qi", alternate = {"Qi"})
    @Expose
    public String qi;

    /**
     * The Use.
     * The 'use' (public key use) parameter identifies the intended use of the public key.  The 'use' parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Possible values are    1. 'sig' (signature)    2.  'enc' (encryption)
     */
    @SerializedName(value = "use", alternate = {"Use"})
    @Expose
    public String use;

    /**
     * The X5c.
     * The 'x5c' (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates RFC 5280.
     */
    @SerializedName(value = "x5c", alternate = {"X5c"})
    @Expose
    public java.util.List<String> x5c;

    /**
     * The X5t.
     * The 'x5t' (X.509 certificate SHA-1 thumbprint) parameter is a base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate RFC 5280.
     */
    @SerializedName(value = "x5t", alternate = {"X5t"})
    @Expose
    public String x5t;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
