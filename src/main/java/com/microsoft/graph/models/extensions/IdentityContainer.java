// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.ConditionalAccessRoot;
import com.microsoft.graph.models.extensions.IdentityUserFlow;
import com.microsoft.graph.models.extensions.B2cIdentityUserFlow;
import com.microsoft.graph.models.extensions.B2xIdentityUserFlow;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.IdentityUserFlowCollectionResponse;
import com.microsoft.graph.requests.extensions.IdentityUserFlowCollectionPage;
import com.microsoft.graph.requests.extensions.B2cIdentityUserFlowCollectionResponse;
import com.microsoft.graph.requests.extensions.B2cIdentityUserFlowCollectionPage;
import com.microsoft.graph.requests.extensions.B2xIdentityUserFlowCollectionResponse;
import com.microsoft.graph.requests.extensions.B2xIdentityUserFlowCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Identity Container.
 */
public class IdentityContainer extends Entity implements IJsonBackedObject {


    /**
     * The Conditional Access.
     * 
     */
    @SerializedName("conditionalAccess")
    @Expose
    public ConditionalAccessRoot conditionalAccess;

    /**
     * The User Flows.
     * 
     */
    public IdentityUserFlowCollectionPage userFlows;

    /**
     * The B2c User Flows.
     * 
     */
    public B2cIdentityUserFlowCollectionPage b2cUserFlows;

    /**
     * The B2x User Flows.
     * 
     */
    public B2xIdentityUserFlowCollectionPage b2xUserFlows;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("userFlows")) {
            final IdentityUserFlowCollectionResponse response = new IdentityUserFlowCollectionResponse();
            if (json.has("userFlows@odata.nextLink")) {
                response.nextLink = json.get("userFlows@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("userFlows").toString(), JsonObject[].class);
            final IdentityUserFlow[] array = new IdentityUserFlow[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), IdentityUserFlow.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            userFlows = new IdentityUserFlowCollectionPage(response, null);
        }

        if (json.has("b2cUserFlows")) {
            final B2cIdentityUserFlowCollectionResponse response = new B2cIdentityUserFlowCollectionResponse();
            if (json.has("b2cUserFlows@odata.nextLink")) {
                response.nextLink = json.get("b2cUserFlows@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("b2cUserFlows").toString(), JsonObject[].class);
            final B2cIdentityUserFlow[] array = new B2cIdentityUserFlow[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), B2cIdentityUserFlow.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            b2cUserFlows = new B2cIdentityUserFlowCollectionPage(response, null);
        }

        if (json.has("b2xUserFlows")) {
            final B2xIdentityUserFlowCollectionResponse response = new B2xIdentityUserFlowCollectionResponse();
            if (json.has("b2xUserFlows@odata.nextLink")) {
                response.nextLink = json.get("b2xUserFlows@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("b2xUserFlows").toString(), JsonObject[].class);
            final B2xIdentityUserFlow[] array = new B2xIdentityUserFlow[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), B2xIdentityUserFlow.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            b2xUserFlows = new B2xIdentityUserFlowCollectionPage(response, null);
        }
    }
}
