// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.AccessReviewReviewerScope;
import com.microsoft.graph.models.extensions.UserIdentity;
import com.microsoft.graph.models.extensions.AccessReviewScope;
import com.microsoft.graph.models.extensions.AccessReviewScheduleSettings;
import com.microsoft.graph.models.extensions.AccessReviewInstance;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.AccessReviewInstanceCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Access Review Schedule Definition.
 */
public class AccessReviewScheduleDefinition extends Entity implements IJsonBackedObject {


    /**
     * The Backup Reviewers.
     * This collection of reviewer scopes is used to define the list of fallback reviewers. These fallback reviewers will be notified to take action if no users are found from the list of reviewers specified. This could occur when either the group owner is specified as the reviewer but the group owner does not exist, or manager is specified as reviewer but a user's manager does not exist. See accessReviewReviewerScope.
     */
    @SerializedName(value = "backupReviewers", alternate = {"BackupReviewers"})
    @Expose
    public java.util.List<AccessReviewReviewerScope> backupReviewers;

    /**
     * The Created By.
     * User who created this review.
     */
    @SerializedName(value = "createdBy", alternate = {"CreatedBy"})
    @Expose
    public UserIdentity createdBy;

    /**
     * The Created Date Time.
     * DateTime when review series was created.
     */
    @SerializedName(value = "createdDateTime", alternate = {"CreatedDateTime"})
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Description For Admins.
     * Description provided by review creators to provide more context of the review to admins.
     */
    @SerializedName(value = "descriptionForAdmins", alternate = {"DescriptionForAdmins"})
    @Expose
    public String descriptionForAdmins;

    /**
     * The Description For Reviewers.
     * Description provided  by review creators to provide more context of the review to reviewers. Reviewers will see this description in the email sent to them requesting their review.
     */
    @SerializedName(value = "descriptionForReviewers", alternate = {"DescriptionForReviewers"})
    @Expose
    public String descriptionForReviewers;

    /**
     * The Display Name.
     * Name of access review series. Required on create.
     */
    @SerializedName(value = "displayName", alternate = {"DisplayName"})
    @Expose
    public String displayName;

    /**
     * The Instance Enumeration Scope.
     * In the case of a review of guest users across all Microsoft 365 groups, this determines the scope of which groups will be reviewed. Each group will become a unique accessReviewInstance of the access review series.  For supported scopes, see accessReviewScope.
     */
    @SerializedName(value = "instanceEnumerationScope", alternate = {"InstanceEnumerationScope"})
    @Expose
    public AccessReviewScope instanceEnumerationScope;

    /**
     * The Last Modified Date Time.
     * DateTime when review series was last modified.
     */
    @SerializedName(value = "lastModifiedDateTime", alternate = {"LastModifiedDateTime"})
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Reviewers.
     * This collection of access review scopes is used to define who are the reviewers. See accessReviewReviewerScope. Required on create.
     */
    @SerializedName(value = "reviewers", alternate = {"Reviewers"})
    @Expose
    public java.util.List<AccessReviewReviewerScope> reviewers;

    /**
     * The Scope.
     * Defines scope of users reviewed. For supported scopes, see accessReviewScope. Required on create.
     */
    @SerializedName(value = "scope", alternate = {"Scope"})
    @Expose
    public AccessReviewScope scope;

    /**
     * The Settings.
     * The settings for an access review series, see type definition below.
     */
    @SerializedName(value = "settings", alternate = {"Settings"})
    @Expose
    public AccessReviewScheduleSettings settings;

    /**
     * The Status.
     * This read-only field specifies the status of an accessReview. The typical states include Initializing, NotStarted, Starting, InProgress, Completing, Completed, AutoReviewing, and AutoReviewed.
     */
    @SerializedName(value = "status", alternate = {"Status"})
    @Expose
    public String status;

    /**
     * The Instances.
     * Set of access reviews instances for this access review series. Access reviews that do not recur will only have one instance; otherwise, there will be an instance for each recurrence.
     */
    @SerializedName(value = "instances", alternate = {"Instances"})
    @Expose
    public AccessReviewInstanceCollectionPage instances;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("instances")) {
            instances = serializer.deserializeObject(json.get("instances").toString(), AccessReviewInstanceCollectionPage.class);
        }
    }
}
