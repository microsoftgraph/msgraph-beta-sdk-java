// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.InformationProtectionPolicy;
import com.microsoft.graph.models.extensions.SensitivityLabel;
import com.microsoft.graph.models.extensions.SensitivityPolicySettings;
import com.microsoft.graph.models.extensions.DataLossPreventionPolicy;
import com.microsoft.graph.models.extensions.ThreatAssessmentRequest;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.SensitivityLabelCollectionResponse;
import com.microsoft.graph.requests.extensions.SensitivityLabelCollectionPage;
import com.microsoft.graph.requests.extensions.DataLossPreventionPolicyCollectionResponse;
import com.microsoft.graph.requests.extensions.DataLossPreventionPolicyCollectionPage;
import com.microsoft.graph.requests.extensions.ThreatAssessmentRequestCollectionResponse;
import com.microsoft.graph.requests.extensions.ThreatAssessmentRequestCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Information Protection.
 */
public class InformationProtection extends Entity implements IJsonBackedObject {


    /**
     * The Policy.
     * 
     */
    @SerializedName("policy")
    @Expose
    public InformationProtectionPolicy policy;

    /**
     * The Sensitivity Labels.
     * 
     */
    public SensitivityLabelCollectionPage sensitivityLabels;

    /**
     * The Sensitivity Policy Settings.
     * 
     */
    @SerializedName("sensitivityPolicySettings")
    @Expose
    public SensitivityPolicySettings sensitivityPolicySettings;

    /**
     * The Data Loss Prevention Policies.
     * 
     */
    public DataLossPreventionPolicyCollectionPage dataLossPreventionPolicies;

    /**
     * The Threat Assessment Requests.
     * 
     */
    public ThreatAssessmentRequestCollectionPage threatAssessmentRequests;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("sensitivityLabels")) {
            final SensitivityLabelCollectionResponse response = new SensitivityLabelCollectionResponse();
            if (json.has("sensitivityLabels@odata.nextLink")) {
                response.nextLink = json.get("sensitivityLabels@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("sensitivityLabels").toString(), JsonObject[].class);
            final SensitivityLabel[] array = new SensitivityLabel[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), SensitivityLabel.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            sensitivityLabels = new SensitivityLabelCollectionPage(response, null);
        }

        if (json.has("dataLossPreventionPolicies")) {
            final DataLossPreventionPolicyCollectionResponse response = new DataLossPreventionPolicyCollectionResponse();
            if (json.has("dataLossPreventionPolicies@odata.nextLink")) {
                response.nextLink = json.get("dataLossPreventionPolicies@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("dataLossPreventionPolicies").toString(), JsonObject[].class);
            final DataLossPreventionPolicy[] array = new DataLossPreventionPolicy[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DataLossPreventionPolicy.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            dataLossPreventionPolicies = new DataLossPreventionPolicyCollectionPage(response, null);
        }

        if (json.has("threatAssessmentRequests")) {
            final ThreatAssessmentRequestCollectionResponse response = new ThreatAssessmentRequestCollectionResponse();
            if (json.has("threatAssessmentRequests@odata.nextLink")) {
                response.nextLink = json.get("threatAssessmentRequests@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("threatAssessmentRequests").toString(), JsonObject[].class);
            final ThreatAssessmentRequest[] array = new ThreatAssessmentRequest[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ThreatAssessmentRequest.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            threatAssessmentRequests = new ThreatAssessmentRequestCollectionPage(response, null);
        }
    }
}
