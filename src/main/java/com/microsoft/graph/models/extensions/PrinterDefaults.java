// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.PrintFinishing;
import com.microsoft.graph.models.generated.PrintOrientation;
import com.microsoft.graph.models.generated.PrintMultipageLayout;
import com.microsoft.graph.models.generated.PrintColorMode;
import com.microsoft.graph.models.generated.PrintQuality;
import com.microsoft.graph.models.generated.PrintDuplexMode;
import com.microsoft.graph.models.generated.PrintScaling;
import com.microsoft.graph.models.generated.PrintPresentationDirection;
import com.microsoft.graph.models.generated.PrintColorConfiguration;
import com.microsoft.graph.models.generated.PrintDuplexConfiguration;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Printer Defaults.
 */
public class PrinterDefaults implements IJsonBackedObject {

    @SerializedName("@odata.type")
    @Expose
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Copies Per Job.
     * 
     */
    @SerializedName("copiesPerJob")
    @Expose
    public Integer copiesPerJob;

    /**
     * The Content Type.
     * 
     */
    @SerializedName("contentType")
    @Expose
    public String contentType;

    /**
     * The Finishings.
     * 
     */
    @SerializedName("finishings")
    @Expose
    public java.util.List<PrintFinishing> finishings;

    /**
     * The Media Color.
     * 
     */
    @SerializedName("mediaColor")
    @Expose
    public String mediaColor;

    /**
     * The Media Type.
     * 
     */
    @SerializedName("mediaType")
    @Expose
    public String mediaType;

    /**
     * The Media Size.
     * 
     */
    @SerializedName("mediaSize")
    @Expose
    public String mediaSize;

    /**
     * The Pages Per Sheet.
     * 
     */
    @SerializedName("pagesPerSheet")
    @Expose
    public Integer pagesPerSheet;

    /**
     * The Orientation.
     * 
     */
    @SerializedName("orientation")
    @Expose
    public PrintOrientation orientation;

    /**
     * The Output Bin.
     * 
     */
    @SerializedName("outputBin")
    @Expose
    public String outputBin;

    /**
     * The Fit Pdf To Page.
     * 
     */
    @SerializedName("fitPdfToPage")
    @Expose
    public Boolean fitPdfToPage;

    /**
     * The Multipage Layout.
     * 
     */
    @SerializedName("multipageLayout")
    @Expose
    public PrintMultipageLayout multipageLayout;

    /**
     * The Color Mode.
     * 
     */
    @SerializedName("colorMode")
    @Expose
    public PrintColorMode colorMode;

    /**
     * The Quality.
     * 
     */
    @SerializedName("quality")
    @Expose
    public PrintQuality quality;

    /**
     * The Duplex Mode.
     * 
     */
    @SerializedName("duplexMode")
    @Expose
    public PrintDuplexMode duplexMode;

    /**
     * The Dpi.
     * 
     */
    @SerializedName("dpi")
    @Expose
    public Integer dpi;

    /**
     * The Scaling.
     * 
     */
    @SerializedName("scaling")
    @Expose
    public PrintScaling scaling;

    /**
     * The Document Mime Type.
     * 
     */
    @SerializedName("documentMimeType")
    @Expose
    public String documentMimeType;

    /**
     * The Pdf Fit To Page.
     * 
     */
    @SerializedName("pdfFitToPage")
    @Expose
    public Boolean pdfFitToPage;

    /**
     * The Presentation Direction.
     * 
     */
    @SerializedName("presentationDirection")
    @Expose
    public PrintPresentationDirection presentationDirection;

    /**
     * The Print Color Configuration.
     * 
     */
    @SerializedName("printColorConfiguration")
    @Expose
    public PrintColorConfiguration printColorConfiguration;

    /**
     * The Print Quality.
     * 
     */
    @SerializedName("printQuality")
    @Expose
    public PrintQuality printQuality;

    /**
     * The Duplex Configuration.
     * 
     */
    @SerializedName("duplexConfiguration")
    @Expose
    public PrintDuplexConfiguration duplexConfiguration;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
