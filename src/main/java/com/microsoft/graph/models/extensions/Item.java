// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.Picture;
import com.microsoft.graph.models.extensions.ItemCategory;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.PictureCollectionResponse;
import com.microsoft.graph.requests.extensions.PictureCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Item.
 */
public class Item extends Entity implements IJsonBackedObject {


    /**
     * The Number.
     * 
     */
    @SerializedName("number")
    @Expose
    public String number;

    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Type.
     * 
     */
    @SerializedName("type")
    @Expose
    public String type;

    /**
     * The Item Category Id.
     * 
     */
    @SerializedName("itemCategoryId")
    @Expose
    public java.util.UUID itemCategoryId;

    /**
     * The Item Category Code.
     * 
     */
    @SerializedName("itemCategoryCode")
    @Expose
    public String itemCategoryCode;

    /**
     * The Blocked.
     * 
     */
    @SerializedName("blocked")
    @Expose
    public Boolean blocked;

    /**
     * The Base Unit Of Measure Id.
     * 
     */
    @SerializedName("baseUnitOfMeasureId")
    @Expose
    public java.util.UUID baseUnitOfMeasureId;

    /**
     * The Gtin.
     * 
     */
    @SerializedName("gtin")
    @Expose
    public String gtin;

    /**
     * The Inventory.
     * 
     */
    @SerializedName("inventory")
    @Expose
    public java.math.BigDecimal inventory;

    /**
     * The Unit Price.
     * 
     */
    @SerializedName("unitPrice")
    @Expose
    public java.math.BigDecimal unitPrice;

    /**
     * The Price Includes Tax.
     * 
     */
    @SerializedName("priceIncludesTax")
    @Expose
    public Boolean priceIncludesTax;

    /**
     * The Unit Cost.
     * 
     */
    @SerializedName("unitCost")
    @Expose
    public java.math.BigDecimal unitCost;

    /**
     * The Tax Group Id.
     * 
     */
    @SerializedName("taxGroupId")
    @Expose
    public java.util.UUID taxGroupId;

    /**
     * The Tax Group Code.
     * 
     */
    @SerializedName("taxGroupCode")
    @Expose
    public String taxGroupCode;

    /**
     * The Last Modified Date Time.
     * 
     */
    @SerializedName("lastModifiedDateTime")
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Picture.
     * 
     */
    public PictureCollectionPage picture;

    /**
     * The Item Category.
     * 
     */
    @SerializedName("itemCategory")
    @Expose
    public ItemCategory itemCategory;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("picture")) {
            final PictureCollectionResponse response = new PictureCollectionResponse();
            if (json.has("picture@odata.nextLink")) {
                response.nextLink = json.get("picture@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("picture").toString(), JsonObject[].class);
            final Picture[] array = new Picture[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Picture.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            picture = new PictureCollectionPage(response, null);
        }
    }
}
