// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.EducationAssignmentRecipient;
import com.microsoft.graph.models.extensions.IdentitySet;
import com.microsoft.graph.models.extensions.EducationAssignmentGradeType;
import com.microsoft.graph.models.extensions.EducationItemBody;
import com.microsoft.graph.models.generated.EducationAssignmentStatus;
import com.microsoft.graph.models.extensions.EducationCategory;
import com.microsoft.graph.models.extensions.EducationAssignmentResource;
import com.microsoft.graph.models.extensions.EducationRubric;
import com.microsoft.graph.models.extensions.EducationSubmission;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.EducationCategoryCollectionResponse;
import com.microsoft.graph.requests.extensions.EducationCategoryCollectionPage;
import com.microsoft.graph.requests.extensions.EducationAssignmentResourceCollectionResponse;
import com.microsoft.graph.requests.extensions.EducationAssignmentResourceCollectionPage;
import com.microsoft.graph.requests.extensions.EducationSubmissionCollectionResponse;
import com.microsoft.graph.requests.extensions.EducationSubmissionCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Education Assignment.
 */
public class EducationAssignment extends Entity implements IJsonBackedObject {


    /**
     * The Allow Late Submissions.
     * 
     */
    @SerializedName("allowLateSubmissions")
    @Expose
    public Boolean allowLateSubmissions;

    /**
     * The Allow Students To Add Resources To Submission.
     * 
     */
    @SerializedName("allowStudentsToAddResourcesToSubmission")
    @Expose
    public Boolean allowStudentsToAddResourcesToSubmission;

    /**
     * The Assign Date Time.
     * 
     */
    @SerializedName("assignDateTime")
    @Expose
    public java.util.Calendar assignDateTime;

    /**
     * The Assigned Date Time.
     * 
     */
    @SerializedName("assignedDateTime")
    @Expose
    public java.util.Calendar assignedDateTime;

    /**
     * The Assign To.
     * 
     */
    @SerializedName("assignTo")
    @Expose
    public EducationAssignmentRecipient assignTo;

    /**
     * The Class Id.
     * 
     */
    @SerializedName("classId")
    @Expose
    public String classId;

    /**
     * The Close Date Time.
     * 
     */
    @SerializedName("closeDateTime")
    @Expose
    public java.util.Calendar closeDateTime;

    /**
     * The Created By.
     * 
     */
    @SerializedName("createdBy")
    @Expose
    public IdentitySet createdBy;

    /**
     * The Created Date Time.
     * 
     */
    @SerializedName("createdDateTime")
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Due Date Time.
     * 
     */
    @SerializedName("dueDateTime")
    @Expose
    public java.util.Calendar dueDateTime;

    /**
     * The Grading.
     * 
     */
    @SerializedName("grading")
    @Expose
    public EducationAssignmentGradeType grading;

    /**
     * The Instructions.
     * 
     */
    @SerializedName("instructions")
    @Expose
    public EducationItemBody instructions;

    /**
     * The Last Modified By.
     * 
     */
    @SerializedName("lastModifiedBy")
    @Expose
    public IdentitySet lastModifiedBy;

    /**
     * The Last Modified Date Time.
     * 
     */
    @SerializedName("lastModifiedDateTime")
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Status.
     * 
     */
    @SerializedName("status")
    @Expose
    public EducationAssignmentStatus status;

    /**
     * The Categories.
     * 
     */
    @SerializedName("categories")
    @Expose
    public EducationCategoryCollectionPage categories;

    /**
     * The Resources.
     * 
     */
    @SerializedName("resources")
    @Expose
    public EducationAssignmentResourceCollectionPage resources;

    /**
     * The Rubric.
     * 
     */
    @SerializedName("rubric")
    @Expose
    public EducationRubric rubric;

    /**
     * The Submissions.
     * 
     */
    @SerializedName("submissions")
    @Expose
    public EducationSubmissionCollectionPage submissions;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("categories")) {
            final EducationCategoryCollectionResponse response = new EducationCategoryCollectionResponse();
            if (json.has("categories@odata.nextLink")) {
                response.nextLink = json.get("categories@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("categories").toString(), JsonObject[].class);
            final EducationCategory[] array = new EducationCategory[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), EducationCategory.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            categories = new EducationCategoryCollectionPage(response, null);
        }

        if (json.has("resources")) {
            final EducationAssignmentResourceCollectionResponse response = new EducationAssignmentResourceCollectionResponse();
            if (json.has("resources@odata.nextLink")) {
                response.nextLink = json.get("resources@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("resources").toString(), JsonObject[].class);
            final EducationAssignmentResource[] array = new EducationAssignmentResource[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), EducationAssignmentResource.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            resources = new EducationAssignmentResourceCollectionPage(response, null);
        }

        if (json.has("submissions")) {
            final EducationSubmissionCollectionResponse response = new EducationSubmissionCollectionResponse();
            if (json.has("submissions@odata.nextLink")) {
                response.nextLink = json.get("submissions@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("submissions").toString(), JsonObject[].class);
            final EducationSubmission[] array = new EducationSubmission[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), EducationSubmission.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            submissions = new EducationSubmissionCollectionPage(response, null);
        }
    }
}
