// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.ExactMatchDataStore;
import com.microsoft.graph.models.extensions.FileClassificationRequest;
import com.microsoft.graph.models.extensions.JobResponseBase;
import com.microsoft.graph.models.extensions.TextClassificationRequest;
import com.microsoft.graph.models.extensions.SensitiveType;
import com.microsoft.graph.models.extensions.SensitivityLabel;
import com.microsoft.graph.models.extensions.ExactMatchUploadAgent;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.ExactMatchDataStoreCollectionPage;
import com.microsoft.graph.requests.extensions.FileClassificationRequestCollectionPage;
import com.microsoft.graph.requests.extensions.JobResponseBaseCollectionPage;
import com.microsoft.graph.requests.extensions.TextClassificationRequestCollectionPage;
import com.microsoft.graph.requests.extensions.SensitiveTypeCollectionPage;
import com.microsoft.graph.requests.extensions.SensitivityLabelCollectionPage;
import com.microsoft.graph.requests.extensions.ExactMatchUploadAgentCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Data Classification Service.
 */
public class DataClassificationService extends Entity implements IJsonBackedObject {


    /**
     * The Exact Match Data Stores.
     * 
     */
    @SerializedName(value = "exactMatchDataStores", alternate = {"ExactMatchDataStores"})
    @Expose
    public ExactMatchDataStoreCollectionPage exactMatchDataStores;

    /**
     * The Classify File.
     * 
     */
    @SerializedName(value = "classifyFile", alternate = {"ClassifyFile"})
    @Expose
    public FileClassificationRequestCollectionPage classifyFile;

    /**
     * The Classify File Jobs.
     * 
     */
    @SerializedName(value = "classifyFileJobs", alternate = {"ClassifyFileJobs"})
    @Expose
    public JobResponseBaseCollectionPage classifyFileJobs;

    /**
     * The Classify Text.
     * 
     */
    @SerializedName(value = "classifyText", alternate = {"ClassifyText"})
    @Expose
    public TextClassificationRequestCollectionPage classifyText;

    /**
     * The Classify Text Jobs.
     * 
     */
    @SerializedName(value = "classifyTextJobs", alternate = {"ClassifyTextJobs"})
    @Expose
    public JobResponseBaseCollectionPage classifyTextJobs;

    /**
     * The Evaluate Dlp Policies Jobs.
     * 
     */
    @SerializedName(value = "evaluateDlpPoliciesJobs", alternate = {"EvaluateDlpPoliciesJobs"})
    @Expose
    public JobResponseBaseCollectionPage evaluateDlpPoliciesJobs;

    /**
     * The Evaluate Label Jobs.
     * 
     */
    @SerializedName(value = "evaluateLabelJobs", alternate = {"EvaluateLabelJobs"})
    @Expose
    public JobResponseBaseCollectionPage evaluateLabelJobs;

    /**
     * The Jobs.
     * 
     */
    @SerializedName(value = "jobs", alternate = {"Jobs"})
    @Expose
    public JobResponseBaseCollectionPage jobs;

    /**
     * The Sensitive Types.
     * 
     */
    @SerializedName(value = "sensitiveTypes", alternate = {"SensitiveTypes"})
    @Expose
    public SensitiveTypeCollectionPage sensitiveTypes;

    /**
     * The Sensitivity Labels.
     * 
     */
    @SerializedName(value = "sensitivityLabels", alternate = {"SensitivityLabels"})
    @Expose
    public SensitivityLabelCollectionPage sensitivityLabels;

    /**
     * The Exact Match Upload Agents.
     * 
     */
    @SerializedName(value = "exactMatchUploadAgents", alternate = {"ExactMatchUploadAgents"})
    @Expose
    public ExactMatchUploadAgentCollectionPage exactMatchUploadAgents;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("exactMatchDataStores")) {
            exactMatchDataStores = serializer.deserializeObject(json.get("exactMatchDataStores").toString(), ExactMatchDataStoreCollectionPage.class);
        }

        if (json.has("classifyFile")) {
            classifyFile = serializer.deserializeObject(json.get("classifyFile").toString(), FileClassificationRequestCollectionPage.class);
        }

        if (json.has("classifyFileJobs")) {
            classifyFileJobs = serializer.deserializeObject(json.get("classifyFileJobs").toString(), JobResponseBaseCollectionPage.class);
        }

        if (json.has("classifyText")) {
            classifyText = serializer.deserializeObject(json.get("classifyText").toString(), TextClassificationRequestCollectionPage.class);
        }

        if (json.has("classifyTextJobs")) {
            classifyTextJobs = serializer.deserializeObject(json.get("classifyTextJobs").toString(), JobResponseBaseCollectionPage.class);
        }

        if (json.has("evaluateDlpPoliciesJobs")) {
            evaluateDlpPoliciesJobs = serializer.deserializeObject(json.get("evaluateDlpPoliciesJobs").toString(), JobResponseBaseCollectionPage.class);
        }

        if (json.has("evaluateLabelJobs")) {
            evaluateLabelJobs = serializer.deserializeObject(json.get("evaluateLabelJobs").toString(), JobResponseBaseCollectionPage.class);
        }

        if (json.has("jobs")) {
            jobs = serializer.deserializeObject(json.get("jobs").toString(), JobResponseBaseCollectionPage.class);
        }

        if (json.has("sensitiveTypes")) {
            sensitiveTypes = serializer.deserializeObject(json.get("sensitiveTypes").toString(), SensitiveTypeCollectionPage.class);
        }

        if (json.has("sensitivityLabels")) {
            sensitivityLabels = serializer.deserializeObject(json.get("sensitivityLabels").toString(), SensitivityLabelCollectionPage.class);
        }

        if (json.has("exactMatchUploadAgents")) {
            exactMatchUploadAgents = serializer.deserializeObject(json.get("exactMatchUploadAgents").toString(), ExactMatchUploadAgentCollectionPage.class);
        }
    }
}
