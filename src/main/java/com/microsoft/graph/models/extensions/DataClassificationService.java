// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.ExactMatchDataStore;
import com.microsoft.graph.models.extensions.FileClassificationRequest;
import com.microsoft.graph.models.extensions.JobResponseBase;
import com.microsoft.graph.models.extensions.TextClassificationRequest;
import com.microsoft.graph.models.extensions.SensitiveType;
import com.microsoft.graph.models.extensions.SensitivityLabel;
import com.microsoft.graph.models.extensions.ExactMatchUploadAgent;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.ExactMatchDataStoreCollectionResponse;
import com.microsoft.graph.requests.extensions.ExactMatchDataStoreCollectionPage;
import com.microsoft.graph.requests.extensions.FileClassificationRequestCollectionResponse;
import com.microsoft.graph.requests.extensions.FileClassificationRequestCollectionPage;
import com.microsoft.graph.requests.extensions.JobResponseBaseCollectionResponse;
import com.microsoft.graph.requests.extensions.JobResponseBaseCollectionPage;
import com.microsoft.graph.requests.extensions.TextClassificationRequestCollectionResponse;
import com.microsoft.graph.requests.extensions.TextClassificationRequestCollectionPage;
import com.microsoft.graph.requests.extensions.SensitiveTypeCollectionResponse;
import com.microsoft.graph.requests.extensions.SensitiveTypeCollectionPage;
import com.microsoft.graph.requests.extensions.SensitivityLabelCollectionResponse;
import com.microsoft.graph.requests.extensions.SensitivityLabelCollectionPage;
import com.microsoft.graph.requests.extensions.ExactMatchUploadAgentCollectionResponse;
import com.microsoft.graph.requests.extensions.ExactMatchUploadAgentCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Data Classification Service.
 */
public class DataClassificationService extends Entity implements IJsonBackedObject {


    /**
     * The Exact Match Data Stores.
     * 
     */
    @SerializedName("exactMatchDataStores")
    @Expose
    public ExactMatchDataStoreCollectionPage exactMatchDataStores;

    /**
     * The Classify File.
     * 
     */
    @SerializedName("classifyFile")
    @Expose
    public FileClassificationRequestCollectionPage classifyFile;

    /**
     * The Classify File Jobs.
     * 
     */
    @SerializedName("classifyFileJobs")
    @Expose
    public JobResponseBaseCollectionPage classifyFileJobs;

    /**
     * The Classify Text.
     * 
     */
    @SerializedName("classifyText")
    @Expose
    public TextClassificationRequestCollectionPage classifyText;

    /**
     * The Classify Text Jobs.
     * 
     */
    @SerializedName("classifyTextJobs")
    @Expose
    public JobResponseBaseCollectionPage classifyTextJobs;

    /**
     * The Evaluate Dlp Policies Jobs.
     * 
     */
    @SerializedName("evaluateDlpPoliciesJobs")
    @Expose
    public JobResponseBaseCollectionPage evaluateDlpPoliciesJobs;

    /**
     * The Evaluate Label Jobs.
     * 
     */
    @SerializedName("evaluateLabelJobs")
    @Expose
    public JobResponseBaseCollectionPage evaluateLabelJobs;

    /**
     * The Jobs.
     * 
     */
    @SerializedName("jobs")
    @Expose
    public JobResponseBaseCollectionPage jobs;

    /**
     * The Labels And Policies Evaluation Jobs.
     * 
     */
    @SerializedName("labelsAndPoliciesEvaluationJobs")
    @Expose
    public JobResponseBaseCollectionPage labelsAndPoliciesEvaluationJobs;

    /**
     * The Sensitive Types.
     * 
     */
    @SerializedName("sensitiveTypes")
    @Expose
    public SensitiveTypeCollectionPage sensitiveTypes;

    /**
     * The Sensitivity Labels.
     * 
     */
    @SerializedName("sensitivityLabels")
    @Expose
    public SensitivityLabelCollectionPage sensitivityLabels;

    /**
     * The Exact Match Upload Agents.
     * 
     */
    @SerializedName("exactMatchUploadAgents")
    @Expose
    public ExactMatchUploadAgentCollectionPage exactMatchUploadAgents;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("exactMatchDataStores")) {
            final ExactMatchDataStoreCollectionResponse response = new ExactMatchDataStoreCollectionResponse();
            if (json.has("exactMatchDataStores@odata.nextLink")) {
                response.nextLink = json.get("exactMatchDataStores@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("exactMatchDataStores").toString(), JsonObject[].class);
            final ExactMatchDataStore[] array = new ExactMatchDataStore[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ExactMatchDataStore.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            exactMatchDataStores = new ExactMatchDataStoreCollectionPage(response, null);
        }

        if (json.has("classifyFile")) {
            final FileClassificationRequestCollectionResponse response = new FileClassificationRequestCollectionResponse();
            if (json.has("classifyFile@odata.nextLink")) {
                response.nextLink = json.get("classifyFile@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("classifyFile").toString(), JsonObject[].class);
            final FileClassificationRequest[] array = new FileClassificationRequest[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), FileClassificationRequest.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            classifyFile = new FileClassificationRequestCollectionPage(response, null);
        }

        if (json.has("classifyFileJobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("classifyFileJobs@odata.nextLink")) {
                response.nextLink = json.get("classifyFileJobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("classifyFileJobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            classifyFileJobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("classifyText")) {
            final TextClassificationRequestCollectionResponse response = new TextClassificationRequestCollectionResponse();
            if (json.has("classifyText@odata.nextLink")) {
                response.nextLink = json.get("classifyText@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("classifyText").toString(), JsonObject[].class);
            final TextClassificationRequest[] array = new TextClassificationRequest[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), TextClassificationRequest.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            classifyText = new TextClassificationRequestCollectionPage(response, null);
        }

        if (json.has("classifyTextJobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("classifyTextJobs@odata.nextLink")) {
                response.nextLink = json.get("classifyTextJobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("classifyTextJobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            classifyTextJobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("evaluateDlpPoliciesJobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("evaluateDlpPoliciesJobs@odata.nextLink")) {
                response.nextLink = json.get("evaluateDlpPoliciesJobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("evaluateDlpPoliciesJobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            evaluateDlpPoliciesJobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("evaluateLabelJobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("evaluateLabelJobs@odata.nextLink")) {
                response.nextLink = json.get("evaluateLabelJobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("evaluateLabelJobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            evaluateLabelJobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("jobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("jobs@odata.nextLink")) {
                response.nextLink = json.get("jobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("jobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            jobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("labelsAndPoliciesEvaluationJobs")) {
            final JobResponseBaseCollectionResponse response = new JobResponseBaseCollectionResponse();
            if (json.has("labelsAndPoliciesEvaluationJobs@odata.nextLink")) {
                response.nextLink = json.get("labelsAndPoliciesEvaluationJobs@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("labelsAndPoliciesEvaluationJobs").toString(), JsonObject[].class);
            final JobResponseBase[] array = new JobResponseBase[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), JobResponseBase.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            labelsAndPoliciesEvaluationJobs = new JobResponseBaseCollectionPage(response, null);
        }

        if (json.has("sensitiveTypes")) {
            final SensitiveTypeCollectionResponse response = new SensitiveTypeCollectionResponse();
            if (json.has("sensitiveTypes@odata.nextLink")) {
                response.nextLink = json.get("sensitiveTypes@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("sensitiveTypes").toString(), JsonObject[].class);
            final SensitiveType[] array = new SensitiveType[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), SensitiveType.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            sensitiveTypes = new SensitiveTypeCollectionPage(response, null);
        }

        if (json.has("sensitivityLabels")) {
            final SensitivityLabelCollectionResponse response = new SensitivityLabelCollectionResponse();
            if (json.has("sensitivityLabels@odata.nextLink")) {
                response.nextLink = json.get("sensitivityLabels@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("sensitivityLabels").toString(), JsonObject[].class);
            final SensitivityLabel[] array = new SensitivityLabel[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), SensitivityLabel.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            sensitivityLabels = new SensitivityLabelCollectionPage(response, null);
        }

        if (json.has("exactMatchUploadAgents")) {
            final ExactMatchUploadAgentCollectionResponse response = new ExactMatchUploadAgentCollectionResponse();
            if (json.has("exactMatchUploadAgents@odata.nextLink")) {
                response.nextLink = json.get("exactMatchUploadAgents@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("exactMatchUploadAgents").toString(), JsonObject[].class);
            final ExactMatchUploadAgent[] array = new ExactMatchUploadAgent[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ExactMatchUploadAgent.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            exactMatchUploadAgents = new ExactMatchUploadAgentCollectionPage(response, null);
        }
    }
}
