// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.KeyValuePair;
import com.microsoft.graph.models.generated.ManagedAppRemediationAction;
import com.microsoft.graph.models.generated.AndroidManagedAppSafetyNetDeviceAttestationType;
import com.microsoft.graph.models.generated.AndroidManagedAppSafetyNetAppsVerificationType;
import com.microsoft.graph.models.extensions.ManagedMobileApp;
import com.microsoft.graph.models.extensions.ManagedAppPolicyDeploymentSummary;
import com.microsoft.graph.models.extensions.TargetedManagedAppProtection;
import com.microsoft.graph.requests.extensions.ManagedMobileAppCollectionResponse;
import com.microsoft.graph.requests.extensions.ManagedMobileAppCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Android Managed App Protection.
 */
public class AndroidManagedAppProtection extends TargetedManagedAppProtection implements IJsonBackedObject {


    /**
     * The Screen Capture Blocked.
     * Indicates whether a managed user can take screen captures of managed apps
     */
    @SerializedName("screenCaptureBlocked")
    @Expose
    public Boolean screenCaptureBlocked;

    /**
     * The Disable App Encryption If Device Encryption Is Enabled.
     * When this setting is enabled, app level encryption is disabled if device level encryption is enabled
     */
    @SerializedName("disableAppEncryptionIfDeviceEncryptionIsEnabled")
    @Expose
    public Boolean disableAppEncryptionIfDeviceEncryptionIsEnabled;

    /**
     * The Encrypt App Data.
     * Indicates whether application data for managed apps should be encrypted
     */
    @SerializedName("encryptAppData")
    @Expose
    public Boolean encryptAppData;

    /**
     * The Deployed App Count.
     * Count of apps to which the current policy is deployed.
     */
    @SerializedName("deployedAppCount")
    @Expose
    public Integer deployedAppCount;

    /**
     * The Minimum Required Patch Version.
     * Define the oldest required Android security patch level a user can have to gain secure access to the app.
     */
    @SerializedName("minimumRequiredPatchVersion")
    @Expose
    public String minimumRequiredPatchVersion;

    /**
     * The Minimum Warning Patch Version.
     * Define the oldest recommended Android security patch level a user can have for secure access to the app.
     */
    @SerializedName("minimumWarningPatchVersion")
    @Expose
    public String minimumWarningPatchVersion;

    /**
     * The Exempted App Packages.
     * App packages in this list will be exempt from the policy and will be able to receive data from managed apps.
     */
    @SerializedName("exemptedAppPackages")
    @Expose
    public java.util.List<KeyValuePair> exemptedAppPackages;

    /**
     * The Minimum Wipe Patch Version.
     * Android security patch level  less than or equal to the specified value will wipe the managed app and the associated company data.
     */
    @SerializedName("minimumWipePatchVersion")
    @Expose
    public String minimumWipePatchVersion;

    /**
     * The Allowed Android Device Manufacturers.
     * Semicolon seperated list of device manufacturers allowed, as a string, for the managed app to work.
     */
    @SerializedName("allowedAndroidDeviceManufacturers")
    @Expose
    public String allowedAndroidDeviceManufacturers;

    /**
     * The App Action If Android Device Manufacturer Not Allowed.
     * Defines a managed app behavior, either block or wipe, if the specified device manufacturer is not allowed.
     */
    @SerializedName("appActionIfAndroidDeviceManufacturerNotAllowed")
    @Expose
    public ManagedAppRemediationAction appActionIfAndroidDeviceManufacturerNotAllowed;

    /**
     * The Required Android Safety Net Device Attestation Type.
     * Defines the Android SafetyNet Device Attestation requirement for a managed app to work.
     */
    @SerializedName("requiredAndroidSafetyNetDeviceAttestationType")
    @Expose
    public AndroidManagedAppSafetyNetDeviceAttestationType requiredAndroidSafetyNetDeviceAttestationType;

    /**
     * The App Action If Android Safety Net Device Attestation Failed.
     * Defines a managed app behavior, either warn or block, if the specified Android SafetyNet Attestation requirment fails.
     */
    @SerializedName("appActionIfAndroidSafetyNetDeviceAttestationFailed")
    @Expose
    public ManagedAppRemediationAction appActionIfAndroidSafetyNetDeviceAttestationFailed;

    /**
     * The Required Android Safety Net Apps Verification Type.
     * Defines the Android SafetyNet Apps Verification requirement for a managed app to work.
     */
    @SerializedName("requiredAndroidSafetyNetAppsVerificationType")
    @Expose
    public AndroidManagedAppSafetyNetAppsVerificationType requiredAndroidSafetyNetAppsVerificationType;

    /**
     * The App Action If Android Safety Net Apps Verification Failed.
     * Defines a managed app behavior, either warn or block, if the specified Android App Verification requirment fails.
     */
    @SerializedName("appActionIfAndroidSafetyNetAppsVerificationFailed")
    @Expose
    public ManagedAppRemediationAction appActionIfAndroidSafetyNetAppsVerificationFailed;

    /**
     * The Custom Browser Package Id.
     * Unique identifier of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
     */
    @SerializedName("customBrowserPackageId")
    @Expose
    public String customBrowserPackageId;

    /**
     * The Custom Browser Display Name.
     * Friendly name of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
     */
    @SerializedName("customBrowserDisplayName")
    @Expose
    public String customBrowserDisplayName;

    /**
     * The Minimum Required Company Portal Version.
     * Minimum version of the Company portal that must be installed on the device or app access will be blocked
     */
    @SerializedName("minimumRequiredCompanyPortalVersion")
    @Expose
    public String minimumRequiredCompanyPortalVersion;

    /**
     * The Minimum Warning Company Portal Version.
     * Minimum version of the Company portal that must be installed on the device or the user will receive a warning
     */
    @SerializedName("minimumWarningCompanyPortalVersion")
    @Expose
    public String minimumWarningCompanyPortalVersion;

    /**
     * The Minimum Wipe Company Portal Version.
     * Minimum version of the Company portal that must be installed on the device or the company data on the app will be wiped
     */
    @SerializedName("minimumWipeCompanyPortalVersion")
    @Expose
    public String minimumWipeCompanyPortalVersion;

    /**
     * The Keyboards Restricted.
     * Indicates if keyboard restriction is enabled. If enabled list of approved keyboards must be provided as well.
     */
    @SerializedName("keyboardsRestricted")
    @Expose
    public Boolean keyboardsRestricted;

    /**
     * The Approved Keyboards.
     * If Keyboard Restriction is enabled, only keyboards in this approved list will be allowed. A key should be Android package id for a keyboard and value should be a friendly name
     */
    @SerializedName("approvedKeyboards")
    @Expose
    public java.util.List<KeyValuePair> approvedKeyboards;

    /**
     * The Allowed Android Device Models.
     * List of device models allowed, as a string, for the managed app to work.
     */
    @SerializedName("allowedAndroidDeviceModels")
    @Expose
    public java.util.List<String> allowedAndroidDeviceModels;

    /**
     * The App Action If Android Device Model Not Allowed.
     * Defines a managed app behavior, either block or wipe, if the specified device model is not allowed.
     */
    @SerializedName("appActionIfAndroidDeviceModelNotAllowed")
    @Expose
    public ManagedAppRemediationAction appActionIfAndroidDeviceModelNotAllowed;

    /**
     * The Custom Dialer App Package Id.
     * PackageId of a custom dialer app to click-to-open a phone number on Android.
     */
    @SerializedName("customDialerAppPackageId")
    @Expose
    public String customDialerAppPackageId;

    /**
     * The Custom Dialer App Display Name.
     * Friendly name of a custom dialer app to click-to-open a phone number on Android.
     */
    @SerializedName("customDialerAppDisplayName")
    @Expose
    public String customDialerAppDisplayName;

    /**
     * The Apps.
     * List of apps to which the policy is deployed.
     */
    public ManagedMobileAppCollectionPage apps;

    /**
     * The Deployment Summary.
     * Navigation property to deployment summary of the configuration.
     */
    @SerializedName("deploymentSummary")
    @Expose
    public ManagedAppPolicyDeploymentSummary deploymentSummary;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("apps")) {
            final ManagedMobileAppCollectionResponse response = new ManagedMobileAppCollectionResponse();
            if (json.has("apps@odata.nextLink")) {
                response.nextLink = json.get("apps@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("apps").toString(), JsonObject[].class);
            final ManagedMobileApp[] array = new ManagedMobileApp[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ManagedMobileApp.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            apps = new ManagedMobileAppCollectionPage(response, null);
        }
    }
}
