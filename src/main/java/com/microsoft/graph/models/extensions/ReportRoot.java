// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.ApplicationSignInDetailedSummary;
import com.microsoft.graph.models.extensions.CredentialUserRegistrationDetails;
import com.microsoft.graph.models.extensions.UserCredentialUsageDetails;
import com.microsoft.graph.models.extensions.PrintUsageSummaryByPrinter;
import com.microsoft.graph.models.extensions.PrintUsageSummaryByUser;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.ApplicationSignInDetailedSummaryCollectionResponse;
import com.microsoft.graph.requests.extensions.ApplicationSignInDetailedSummaryCollectionPage;
import com.microsoft.graph.requests.extensions.CredentialUserRegistrationDetailsCollectionResponse;
import com.microsoft.graph.requests.extensions.CredentialUserRegistrationDetailsCollectionPage;
import com.microsoft.graph.requests.extensions.UserCredentialUsageDetailsCollectionResponse;
import com.microsoft.graph.requests.extensions.UserCredentialUsageDetailsCollectionPage;
import com.microsoft.graph.requests.extensions.PrintUsageSummaryByPrinterCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintUsageSummaryByPrinterCollectionPage;
import com.microsoft.graph.requests.extensions.PrintUsageSummaryByUserCollectionResponse;
import com.microsoft.graph.requests.extensions.PrintUsageSummaryByUserCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Report Root.
 */
public class ReportRoot extends Entity implements IJsonBackedObject {


    /**
     * The Application Sign In Detailed Summary.
     * 
     */
    @SerializedName("applicationSignInDetailedSummary")
    @Expose
    public ApplicationSignInDetailedSummaryCollectionPage applicationSignInDetailedSummary;

    /**
     * The Credential User Registration Details.
     * 
     */
    @SerializedName("credentialUserRegistrationDetails")
    @Expose
    public CredentialUserRegistrationDetailsCollectionPage credentialUserRegistrationDetails;

    /**
     * The User Credential Usage Details.
     * 
     */
    @SerializedName("userCredentialUsageDetails")
    @Expose
    public UserCredentialUsageDetailsCollectionPage userCredentialUsageDetails;

    /**
     * The Daily Print Usage Summaries By Printer.
     * 
     */
    @SerializedName("dailyPrintUsageSummariesByPrinter")
    @Expose
    public PrintUsageSummaryByPrinterCollectionPage dailyPrintUsageSummariesByPrinter;

    /**
     * The Daily Print Usage Summaries By User.
     * 
     */
    @SerializedName("dailyPrintUsageSummariesByUser")
    @Expose
    public PrintUsageSummaryByUserCollectionPage dailyPrintUsageSummariesByUser;

    /**
     * The Monthly Print Usage Summaries By Printer.
     * 
     */
    @SerializedName("monthlyPrintUsageSummariesByPrinter")
    @Expose
    public PrintUsageSummaryByPrinterCollectionPage monthlyPrintUsageSummariesByPrinter;

    /**
     * The Monthly Print Usage Summaries By User.
     * 
     */
    @SerializedName("monthlyPrintUsageSummariesByUser")
    @Expose
    public PrintUsageSummaryByUserCollectionPage monthlyPrintUsageSummariesByUser;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("applicationSignInDetailedSummary")) {
            final ApplicationSignInDetailedSummaryCollectionResponse response = new ApplicationSignInDetailedSummaryCollectionResponse();
            if (json.has("applicationSignInDetailedSummary@odata.nextLink")) {
                response.nextLink = json.get("applicationSignInDetailedSummary@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("applicationSignInDetailedSummary").toString(), JsonObject[].class);
            final ApplicationSignInDetailedSummary[] array = new ApplicationSignInDetailedSummary[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ApplicationSignInDetailedSummary.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            applicationSignInDetailedSummary = new ApplicationSignInDetailedSummaryCollectionPage(response, null);
        }

        if (json.has("credentialUserRegistrationDetails")) {
            final CredentialUserRegistrationDetailsCollectionResponse response = new CredentialUserRegistrationDetailsCollectionResponse();
            if (json.has("credentialUserRegistrationDetails@odata.nextLink")) {
                response.nextLink = json.get("credentialUserRegistrationDetails@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("credentialUserRegistrationDetails").toString(), JsonObject[].class);
            final CredentialUserRegistrationDetails[] array = new CredentialUserRegistrationDetails[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), CredentialUserRegistrationDetails.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            credentialUserRegistrationDetails = new CredentialUserRegistrationDetailsCollectionPage(response, null);
        }

        if (json.has("userCredentialUsageDetails")) {
            final UserCredentialUsageDetailsCollectionResponse response = new UserCredentialUsageDetailsCollectionResponse();
            if (json.has("userCredentialUsageDetails@odata.nextLink")) {
                response.nextLink = json.get("userCredentialUsageDetails@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("userCredentialUsageDetails").toString(), JsonObject[].class);
            final UserCredentialUsageDetails[] array = new UserCredentialUsageDetails[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), UserCredentialUsageDetails.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            userCredentialUsageDetails = new UserCredentialUsageDetailsCollectionPage(response, null);
        }

        if (json.has("dailyPrintUsageSummariesByPrinter")) {
            final PrintUsageSummaryByPrinterCollectionResponse response = new PrintUsageSummaryByPrinterCollectionResponse();
            if (json.has("dailyPrintUsageSummariesByPrinter@odata.nextLink")) {
                response.nextLink = json.get("dailyPrintUsageSummariesByPrinter@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("dailyPrintUsageSummariesByPrinter").toString(), JsonObject[].class);
            final PrintUsageSummaryByPrinter[] array = new PrintUsageSummaryByPrinter[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintUsageSummaryByPrinter.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            dailyPrintUsageSummariesByPrinter = new PrintUsageSummaryByPrinterCollectionPage(response, null);
        }

        if (json.has("dailyPrintUsageSummariesByUser")) {
            final PrintUsageSummaryByUserCollectionResponse response = new PrintUsageSummaryByUserCollectionResponse();
            if (json.has("dailyPrintUsageSummariesByUser@odata.nextLink")) {
                response.nextLink = json.get("dailyPrintUsageSummariesByUser@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("dailyPrintUsageSummariesByUser").toString(), JsonObject[].class);
            final PrintUsageSummaryByUser[] array = new PrintUsageSummaryByUser[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintUsageSummaryByUser.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            dailyPrintUsageSummariesByUser = new PrintUsageSummaryByUserCollectionPage(response, null);
        }

        if (json.has("monthlyPrintUsageSummariesByPrinter")) {
            final PrintUsageSummaryByPrinterCollectionResponse response = new PrintUsageSummaryByPrinterCollectionResponse();
            if (json.has("monthlyPrintUsageSummariesByPrinter@odata.nextLink")) {
                response.nextLink = json.get("monthlyPrintUsageSummariesByPrinter@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("monthlyPrintUsageSummariesByPrinter").toString(), JsonObject[].class);
            final PrintUsageSummaryByPrinter[] array = new PrintUsageSummaryByPrinter[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintUsageSummaryByPrinter.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            monthlyPrintUsageSummariesByPrinter = new PrintUsageSummaryByPrinterCollectionPage(response, null);
        }

        if (json.has("monthlyPrintUsageSummariesByUser")) {
            final PrintUsageSummaryByUserCollectionResponse response = new PrintUsageSummaryByUserCollectionResponse();
            if (json.has("monthlyPrintUsageSummariesByUser@odata.nextLink")) {
                response.nextLink = json.get("monthlyPrintUsageSummariesByUser@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("monthlyPrintUsageSummariesByUser").toString(), JsonObject[].class);
            final PrintUsageSummaryByUser[] array = new PrintUsageSummaryByUser[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PrintUsageSummaryByUser.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            monthlyPrintUsageSummariesByUser = new PrintUsageSummaryByUserCollectionPage(response, null);
        }
    }
}
