// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.ImportedWindowsAutopilotDeviceIdentityUploadStatus;
import com.microsoft.graph.models.extensions.ImportedWindowsAutopilotDeviceIdentity;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.ImportedWindowsAutopilotDeviceIdentityCollectionResponse;
import com.microsoft.graph.requests.extensions.ImportedWindowsAutopilotDeviceIdentityCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Imported Windows Autopilot Device Identity Upload.
 */
public class ImportedWindowsAutopilotDeviceIdentityUpload extends Entity implements IJsonBackedObject {


    /**
     * The Created Date Time Utc.
     * DateTime when the entity is created.
     */
    @SerializedName("createdDateTimeUtc")
    @Expose
    public java.util.Calendar createdDateTimeUtc;

    /**
     * The Status.
     * Upload status. Possible values are: noUpload, pending, complete, error.
     */
    @SerializedName("status")
    @Expose
    public ImportedWindowsAutopilotDeviceIdentityUploadStatus status;

    /**
     * The Device Identities.
     * Collection of all Autopilot devices as a part of this upload.
     */
    public ImportedWindowsAutopilotDeviceIdentityCollectionPage deviceIdentities;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("deviceIdentities")) {
            final ImportedWindowsAutopilotDeviceIdentityCollectionResponse response = new ImportedWindowsAutopilotDeviceIdentityCollectionResponse();
            if (json.has("deviceIdentities@odata.nextLink")) {
                response.nextLink = json.get("deviceIdentities@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("deviceIdentities").toString(), JsonObject[].class);
            final ImportedWindowsAutopilotDeviceIdentity[] array = new ImportedWindowsAutopilotDeviceIdentity[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ImportedWindowsAutopilotDeviceIdentity.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            deviceIdentities = new ImportedWindowsAutopilotDeviceIdentityCollectionPage(response, null);
        }
    }
}
