// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.OnPremisesPublishingType;
import com.microsoft.graph.models.extensions.OnPremisesAgent;
import com.microsoft.graph.models.extensions.PublishedResource;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.requests.extensions.OnPremisesAgentCollectionResponse;
import com.microsoft.graph.requests.extensions.OnPremisesAgentCollectionPage;
import com.microsoft.graph.requests.extensions.PublishedResourceCollectionResponse;
import com.microsoft.graph.requests.extensions.PublishedResourceCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the On Premises Agent Group.
 */
public class OnPremisesAgentGroup extends Entity implements IJsonBackedObject {


    /**
     * The Display Name.
     * 
     */
    @SerializedName("displayName")
    @Expose
    public String displayName;

    /**
     * The Is Default.
     * 
     */
    @SerializedName("isDefault")
    @Expose
    public Boolean isDefault;

    /**
     * The Publishing Type.
     * 
     */
    @SerializedName("publishingType")
    @Expose
    public OnPremisesPublishingType publishingType;

    /**
     * The Agents.
     * 
     */
    @SerializedName("agents")
    @Expose
    public OnPremisesAgentCollectionPage agents;

    /**
     * The Published Resources.
     * 
     */
    @SerializedName("publishedResources")
    @Expose
    public PublishedResourceCollectionPage publishedResources;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("agents")) {
            final OnPremisesAgentCollectionResponse response = new OnPremisesAgentCollectionResponse();
            if (json.has("agents@odata.nextLink")) {
                response.nextLink = json.get("agents@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("agents").toString(), JsonObject[].class);
            final OnPremisesAgent[] array = new OnPremisesAgent[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), OnPremisesAgent.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            agents = new OnPremisesAgentCollectionPage(response, null);
        }

        if (json.has("publishedResources")) {
            final PublishedResourceCollectionResponse response = new PublishedResourceCollectionResponse();
            if (json.has("publishedResources@odata.nextLink")) {
                response.nextLink = json.get("publishedResources@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("publishedResources").toString(), JsonObject[].class);
            final PublishedResource[] array = new PublishedResource[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), PublishedResource.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            publishedResources = new PublishedResourceCollectionPage(response, null);
        }
    }
}
