package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.AdditionalDataHolder;
import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
public class PlannerRecurrenceSchedule implements AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    private Map<String, Object> additionalData;
    /**
     * The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    private OffsetDateTime nextOccurrenceDateTime;
    /**
     * The OdataType property
     */
    private String odataType;
    /**
     * The pattern for recurrence. Required.
     */
    private RecurrencePattern pattern;
    /**
     * The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
     */
    private OffsetDateTime patternStartDateTime;
    /**
     * Instantiates a new plannerRecurrenceSchedule and sets the default values.
     * @return a void
     */
    @javax.annotation.Nullable
    public PlannerRecurrenceSchedule() {
        this.setAdditionalData(new HashMap<>());
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a plannerRecurrenceSchedule
     */
    @javax.annotation.Nonnull
    public static PlannerRecurrenceSchedule createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new PlannerRecurrenceSchedule();
    }
    /**
     * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return a Map<String, Object>
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getAdditionalData() {
        return this.additionalData;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(4);
        deserializerMap.put("nextOccurrenceDateTime", (n) -> { this.setNextOccurrenceDateTime(n.getOffsetDateTimeValue()); });
        deserializerMap.put("@odata.type", (n) -> { this.setOdataType(n.getStringValue()); });
        deserializerMap.put("pattern", (n) -> { this.setPattern(n.getObjectValue(RecurrencePattern::createFromDiscriminatorValue)); });
        deserializerMap.put("patternStartDateTime", (n) -> { this.setPatternStartDateTime(n.getOffsetDateTimeValue()); });
        return deserializerMap;
    }
    /**
     * Gets the nextOccurrenceDateTime property value. The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     * @return a OffsetDateTime
     */
    @javax.annotation.Nullable
    public OffsetDateTime getNextOccurrenceDateTime() {
        return this.nextOccurrenceDateTime;
    }
    /**
     * Gets the @odata.type property value. The OdataType property
     * @return a string
     */
    @javax.annotation.Nullable
    public String getOdataType() {
        return this.odataType;
    }
    /**
     * Gets the pattern property value. The pattern for recurrence. Required.
     * @return a recurrencePattern
     */
    @javax.annotation.Nullable
    public RecurrencePattern getPattern() {
        return this.pattern;
    }
    /**
     * Gets the patternStartDateTime property value. The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
     * @return a OffsetDateTime
     */
    @javax.annotation.Nullable
    public OffsetDateTime getPatternStartDateTime() {
        return this.patternStartDateTime;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    @javax.annotation.Nonnull
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        writer.writeOffsetDateTimeValue("nextOccurrenceDateTime", this.getNextOccurrenceDateTime());
        writer.writeStringValue("@odata.type", this.getOdataType());
        writer.writeObjectValue("pattern", this.getPattern());
        writer.writeOffsetDateTimeValue("patternStartDateTime", this.getPatternStartDateTime());
        writer.writeAdditionalData(this.getAdditionalData());
    }
    /**
     * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setAdditionalData(@javax.annotation.Nullable final Map<String, Object> value) {
        this.additionalData = value;
    }
    /**
     * Sets the nextOccurrenceDateTime property value. The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     * @param value Value to set for the nextOccurrenceDateTime property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setNextOccurrenceDateTime(@javax.annotation.Nullable final OffsetDateTime value) {
        this.nextOccurrenceDateTime = value;
    }
    /**
     * Sets the @odata.type property value. The OdataType property
     * @param value Value to set for the OdataType property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setOdataType(@javax.annotation.Nullable final String value) {
        this.odataType = value;
    }
    /**
     * Sets the pattern property value. The pattern for recurrence. Required.
     * @param value Value to set for the pattern property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setPattern(@javax.annotation.Nullable final RecurrencePattern value) {
        this.pattern = value;
    }
    /**
     * Sets the patternStartDateTime property value. The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
     * @param value Value to set for the patternStartDateTime property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setPatternStartDateTime(@javax.annotation.Nullable final OffsetDateTime value) {
        this.patternStartDateTime = value;
    }
}
