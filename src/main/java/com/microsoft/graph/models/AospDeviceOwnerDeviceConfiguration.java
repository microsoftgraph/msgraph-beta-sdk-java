// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.AndroidDeviceOwnerRequiredPasswordType;
import com.microsoft.graph.models.DeviceConfiguration;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Aosp Device Owner Device Configuration.
 */
public class AospDeviceOwnerDeviceConfiguration extends DeviceConfiguration implements IJsonBackedObject {


    /**
     * The Apps Allow Install From Unknown Sources.
     * Indicates whether or not the user is allowed to enable to unknown sources setting.
     */
    @SerializedName(value = "appsAllowInstallFromUnknownSources", alternate = {"AppsAllowInstallFromUnknownSources"})
    @Expose
	@Nullable
    public Boolean appsAllowInstallFromUnknownSources;

    /**
     * The Backup Blocked.
     * Indicates whether or not to block backup service.
     */
    @SerializedName(value = "backupBlocked", alternate = {"BackupBlocked"})
    @Expose
	@Nullable
    public Boolean backupBlocked;

    /**
     * The Bluetooth Block Configuration.
     * Indicates whether or not to block a user from configuring bluetooth.
     */
    @SerializedName(value = "bluetoothBlockConfiguration", alternate = {"BluetoothBlockConfiguration"})
    @Expose
	@Nullable
    public Boolean bluetoothBlockConfiguration;

    /**
     * The Bluetooth Block Contact Sharing.
     * Indicates whether or not to block a user from sharing contacts via bluetooth.
     */
    @SerializedName(value = "bluetoothBlockContactSharing", alternate = {"BluetoothBlockContactSharing"})
    @Expose
	@Nullable
    public Boolean bluetoothBlockContactSharing;

    /**
     * The Bluetooth Blocked.
     * Indicates whether or not to disable the use of bluetooth. When set to true, bluetooth cannot be enabled on the device.
     */
    @SerializedName(value = "bluetoothBlocked", alternate = {"BluetoothBlocked"})
    @Expose
	@Nullable
    public Boolean bluetoothBlocked;

    /**
     * The Camera Blocked.
     * Indicates whether or not to disable the use of the camera.
     */
    @SerializedName(value = "cameraBlocked", alternate = {"CameraBlocked"})
    @Expose
	@Nullable
    public Boolean cameraBlocked;

    /**
     * The Cellular Block Wi Fi Tethering.
     * Indicates whether or not to block Wi-Fi tethering.
     */
    @SerializedName(value = "cellularBlockWiFiTethering", alternate = {"CellularBlockWiFiTethering"})
    @Expose
	@Nullable
    public Boolean cellularBlockWiFiTethering;

    /**
     * The Factory Reset Blocked.
     * Indicates whether or not the factory reset option in settings is disabled.
     */
    @SerializedName(value = "factoryResetBlocked", alternate = {"FactoryResetBlocked"})
    @Expose
	@Nullable
    public Boolean factoryResetBlocked;

    /**
     * The Password Minimum Length.
     * Indicates the minimum length of the password required on the device. Valid values 4 to 16
     */
    @SerializedName(value = "passwordMinimumLength", alternate = {"PasswordMinimumLength"})
    @Expose
	@Nullable
    public Integer passwordMinimumLength;

    /**
     * The Password Minutes Of Inactivity Before Screen Timeout.
     * Minutes of inactivity before the screen times out.
     */
    @SerializedName(value = "passwordMinutesOfInactivityBeforeScreenTimeout", alternate = {"PasswordMinutesOfInactivityBeforeScreenTimeout"})
    @Expose
	@Nullable
    public Integer passwordMinutesOfInactivityBeforeScreenTimeout;

    /**
     * The Password Required Type.
     * Indicates the minimum password quality required on the device. Possible values are: deviceDefault, required, numeric, numericComplex, alphabetic, alphanumeric, alphanumericWithSymbols, lowSecurityBiometric, customPassword.
     */
    @SerializedName(value = "passwordRequiredType", alternate = {"PasswordRequiredType"})
    @Expose
	@Nullable
    public AndroidDeviceOwnerRequiredPasswordType passwordRequiredType;

    /**
     * The Password Sign In Failure Count Before Factory Reset.
     * Indicates the number of times a user can enter an incorrect password before the device is wiped. Valid values 4 to 11
     */
    @SerializedName(value = "passwordSignInFailureCountBeforeFactoryReset", alternate = {"PasswordSignInFailureCountBeforeFactoryReset"})
    @Expose
	@Nullable
    public Integer passwordSignInFailureCountBeforeFactoryReset;

    /**
     * The Screen Capture Blocked.
     * Indicates whether or not to disable the capability to take screenshots.
     */
    @SerializedName(value = "screenCaptureBlocked", alternate = {"ScreenCaptureBlocked"})
    @Expose
	@Nullable
    public Boolean screenCaptureBlocked;

    /**
     * The Security Allow Debugging Features.
     * Indicates whether or not to block the user from enabling debugging features on the device.
     */
    @SerializedName(value = "securityAllowDebuggingFeatures", alternate = {"SecurityAllowDebuggingFeatures"})
    @Expose
	@Nullable
    public Boolean securityAllowDebuggingFeatures;

    /**
     * The Storage Allow Usb.
     * Indicates whether or not to block USB storage.
     */
    @SerializedName(value = "storageAllowUsb", alternate = {"StorageAllowUsb"})
    @Expose
	@Nullable
    public Boolean storageAllowUsb;

    /**
     * The Storage Block External Media.
     * Indicates whether or not to block external media.
     */
    @SerializedName(value = "storageBlockExternalMedia", alternate = {"StorageBlockExternalMedia"})
    @Expose
	@Nullable
    public Boolean storageBlockExternalMedia;

    /**
     * The Storage Block Usb File Transfer.
     * Indicates whether or not to block USB file transfer.
     */
    @SerializedName(value = "storageBlockUsbFileTransfer", alternate = {"StorageBlockUsbFileTransfer"})
    @Expose
	@Nullable
    public Boolean storageBlockUsbFileTransfer;

    /**
     * The Wifi Block Edit Configurations.
     * Indicates whether or not to block the user from editing the wifi connection settings.
     */
    @SerializedName(value = "wifiBlockEditConfigurations", alternate = {"WifiBlockEditConfigurations"})
    @Expose
	@Nullable
    public Boolean wifiBlockEditConfigurations;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
