package microsoft.graph.models;

import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.util.function.Consumer;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
/** Casts the previous resource to group. */
public class UserAccountInformation extends ItemFacet implements Parsable {
    /** Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed. */
    private String _ageGroup;
    /** Contains the two-character country code associated with the users account. */
    private String _countryCode;
    /** The preferredLanguageTag property */
    private LocaleInfo _preferredLanguageTag;
    /** The user principal name (UPN) of the user associated with the account. */
    private String _userPrincipalName;
    /**
     * Instantiates a new userAccountInformation and sets the default values.
     * @return a void
     */
    public UserAccountInformation() {
        super();
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a userAccountInformation
     */
    @javax.annotation.Nonnull
    public static UserAccountInformation createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new UserAccountInformation();
    }
    /**
     * Gets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getAgeGroup() {
        return this._ageGroup;
    }
    /**
     * Gets the countryCode property value. Contains the two-character country code associated with the users account.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getCountryCode() {
        return this._countryCode;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, Consumer<ParseNode>> getFieldDeserializers() {
        final UserAccountInformation currentObject = this;
        return new HashMap<>(super.getFieldDeserializers()) {{
            this.put("ageGroup", (n) -> { currentObject.setAgeGroup(n.getStringValue()); });
            this.put("countryCode", (n) -> { currentObject.setCountryCode(n.getStringValue()); });
            this.put("preferredLanguageTag", (n) -> { currentObject.setPreferredLanguageTag(n.getObjectValue(LocaleInfo::createFromDiscriminatorValue)); });
            this.put("userPrincipalName", (n) -> { currentObject.setUserPrincipalName(n.getStringValue()); });
        }};
    }
    /**
     * Gets the preferredLanguageTag property value. The preferredLanguageTag property
     * @return a localeInfo
     */
    @javax.annotation.Nullable
    public LocaleInfo getPreferredLanguageTag() {
        return this._preferredLanguageTag;
    }
    /**
     * Gets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getUserPrincipalName() {
        return this._userPrincipalName;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        super.serialize(writer);
        writer.writeStringValue("ageGroup", this.getAgeGroup());
        writer.writeStringValue("countryCode", this.getCountryCode());
        writer.writeObjectValue("preferredLanguageTag", this.getPreferredLanguageTag());
        writer.writeStringValue("userPrincipalName", this.getUserPrincipalName());
    }
    /**
     * Sets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @param value Value to set for the ageGroup property.
     * @return a void
     */
    public void setAgeGroup(@javax.annotation.Nullable final String value) {
        this._ageGroup = value;
    }
    /**
     * Sets the countryCode property value. Contains the two-character country code associated with the users account.
     * @param value Value to set for the countryCode property.
     * @return a void
     */
    public void setCountryCode(@javax.annotation.Nullable final String value) {
        this._countryCode = value;
    }
    /**
     * Sets the preferredLanguageTag property value. The preferredLanguageTag property
     * @param value Value to set for the preferredLanguageTag property.
     * @return a void
     */
    public void setPreferredLanguageTag(@javax.annotation.Nullable final LocaleInfo value) {
        this._preferredLanguageTag = value;
    }
    /**
     * Sets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @param value Value to set for the userPrincipalName property.
     * @return a void
     */
    public void setUserPrincipalName(@javax.annotation.Nullable final String value) {
        this._userPrincipalName = value;
    }
}
