package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
public class UserAccountInformation extends ItemFacet implements Parsable {
    /** Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed. */
    private String ageGroup;
    /** Contains the two-character country code associated with the users account. */
    private String countryCode;
    /** The preferredLanguageTag property */
    private LocaleInfo preferredLanguageTag;
    /** The user principal name (UPN) of the user associated with the account. */
    private String userPrincipalName;
    /**
     * Instantiates a new UserAccountInformation and sets the default values.
     * @return a void
     */
    @javax.annotation.Nullable
    public UserAccountInformation() {
        super();
        this.setOdataType("#microsoft.graph.userAccountInformation");
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a UserAccountInformation
     */
    @javax.annotation.Nonnull
    public static UserAccountInformation createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new UserAccountInformation();
    }
    /**
     * Gets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getAgeGroup() {
        return this.ageGroup;
    }
    /**
     * Gets the countryCode property value. Contains the two-character country code associated with the users account.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getCountryCode() {
        return this.countryCode;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(super.getFieldDeserializers());
        deserializerMap.put("ageGroup", (n) -> { this.setAgeGroup(n.getStringValue()); });
        deserializerMap.put("countryCode", (n) -> { this.setCountryCode(n.getStringValue()); });
        deserializerMap.put("preferredLanguageTag", (n) -> { this.setPreferredLanguageTag(n.getObjectValue(LocaleInfo::createFromDiscriminatorValue)); });
        deserializerMap.put("userPrincipalName", (n) -> { this.setUserPrincipalName(n.getStringValue()); });
        return deserializerMap;
    }
    /**
     * Gets the preferredLanguageTag property value. The preferredLanguageTag property
     * @return a localeInfo
     */
    @javax.annotation.Nullable
    public LocaleInfo getPreferredLanguageTag() {
        return this.preferredLanguageTag;
    }
    /**
     * Gets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getUserPrincipalName() {
        return this.userPrincipalName;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    @javax.annotation.Nonnull
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        super.serialize(writer);
        writer.writeStringValue("ageGroup", this.getAgeGroup());
        writer.writeStringValue("countryCode", this.getCountryCode());
        writer.writeObjectValue("preferredLanguageTag", this.getPreferredLanguageTag());
        writer.writeStringValue("userPrincipalName", this.getUserPrincipalName());
    }
    /**
     * Sets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @param value Value to set for the ageGroup property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setAgeGroup(@javax.annotation.Nullable final String value) {
        this.ageGroup = value;
    }
    /**
     * Sets the countryCode property value. Contains the two-character country code associated with the users account.
     * @param value Value to set for the countryCode property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setCountryCode(@javax.annotation.Nullable final String value) {
        this.countryCode = value;
    }
    /**
     * Sets the preferredLanguageTag property value. The preferredLanguageTag property
     * @param value Value to set for the preferredLanguageTag property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setPreferredLanguageTag(@javax.annotation.Nullable final LocaleInfo value) {
        this.preferredLanguageTag = value;
    }
    /**
     * Sets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @param value Value to set for the userPrincipalName property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setUserPrincipalName(@javax.annotation.Nullable final String value) {
        this.userPrincipalName = value;
    }
}
