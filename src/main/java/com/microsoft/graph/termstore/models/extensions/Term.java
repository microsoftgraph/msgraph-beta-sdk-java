// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.termstore.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.termstore.models.extensions.LocalizedDescription;
import com.microsoft.graph.termstore.models.extensions.LocalizedLabel;
import com.microsoft.graph.models.extensions.KeyValue;
import com.microsoft.graph.termstore.models.extensions.Term;
import com.microsoft.graph.termstore.models.extensions.Relation;
import com.microsoft.graph.termstore.models.extensions.Set;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.termstore.requests.extensions.TermCollectionResponse;
import com.microsoft.graph.termstore.requests.extensions.TermCollectionPage;
import com.microsoft.graph.termstore.requests.extensions.RelationCollectionResponse;
import com.microsoft.graph.termstore.requests.extensions.RelationCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Term.
 */
public class Term extends Entity implements IJsonBackedObject {


    /**
     * The Created Date Time.
     * 
     */
    @SerializedName("createdDateTime")
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Descriptions.
     * 
     */
    @SerializedName("descriptions")
    @Expose
    public java.util.List<LocalizedDescription> descriptions;

    /**
     * The Labels.
     * 
     */
    @SerializedName("labels")
    @Expose
    public java.util.List<LocalizedLabel> labels;

    /**
     * The Last Modified Date Time.
     * 
     */
    @SerializedName("lastModifiedDateTime")
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Properties.
     * 
     */
    @SerializedName("properties")
    @Expose
    public java.util.List<KeyValue> properties;

    /**
     * The Children.
     * 
     */
    @SerializedName("children")
    @Expose
    public TermCollectionPage children;

    /**
     * The Relations.
     * 
     */
    @SerializedName("relations")
    @Expose
    public RelationCollectionPage relations;

    /**
     * The Set.
     * 
     */
    @SerializedName("set")
    @Expose
    public Set set;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("children")) {
            final TermCollectionResponse response = new TermCollectionResponse();
            if (json.has("children@odata.nextLink")) {
                response.nextLink = json.get("children@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("children").toString(), JsonObject[].class);
            final Term[] array = new Term[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Term.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            children = new TermCollectionPage(response, null);
        }

        if (json.has("relations")) {
            final RelationCollectionResponse response = new RelationCollectionResponse();
            if (json.has("relations@odata.nextLink")) {
                response.nextLink = json.get("relations@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("relations").toString(), JsonObject[].class);
            final Relation[] array = new Relation[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Relation.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            relations = new RelationCollectionPage(response, null);
        }
    }
}
