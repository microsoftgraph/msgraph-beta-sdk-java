// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.ediscovery.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.IdentitySet;
import com.microsoft.graph.ediscovery.models.generated.CaseStatus;
import com.microsoft.graph.ediscovery.models.extensions.Custodian;
import com.microsoft.graph.ediscovery.models.extensions.LegalHold;
import com.microsoft.graph.ediscovery.models.extensions.NoncustodialDataSource;
import com.microsoft.graph.ediscovery.models.extensions.CaseOperation;
import com.microsoft.graph.ediscovery.models.extensions.ReviewSet;
import com.microsoft.graph.ediscovery.models.extensions.Settings;
import com.microsoft.graph.ediscovery.models.extensions.SourceCollection;
import com.microsoft.graph.ediscovery.models.extensions.Tag;
import com.microsoft.graph.models.extensions.Entity;
import com.microsoft.graph.ediscovery.requests.extensions.CustodianCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.LegalHoldCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.NoncustodialDataSourceCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.CaseOperationCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.ReviewSetCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.SourceCollectionCollectionPage;
import com.microsoft.graph.ediscovery.requests.extensions.TagCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Case.
 */
public class Case extends Entity implements IJsonBackedObject {


    /**
     * The Closed By.
     * 
     */
    @SerializedName(value = "closedBy", alternate = {"ClosedBy"})
    @Expose
    public IdentitySet closedBy;

    /**
     * The Closed Date Time.
     * 
     */
    @SerializedName(value = "closedDateTime", alternate = {"ClosedDateTime"})
    @Expose
    public java.util.Calendar closedDateTime;

    /**
     * The Created Date Time.
     * 
     */
    @SerializedName(value = "createdDateTime", alternate = {"CreatedDateTime"})
    @Expose
    public java.util.Calendar createdDateTime;

    /**
     * The Description.
     * 
     */
    @SerializedName(value = "description", alternate = {"Description"})
    @Expose
    public String description;

    /**
     * The Display Name.
     * 
     */
    @SerializedName(value = "displayName", alternate = {"DisplayName"})
    @Expose
    public String displayName;

    /**
     * The External Id.
     * 
     */
    @SerializedName(value = "externalId", alternate = {"ExternalId"})
    @Expose
    public String externalId;

    /**
     * The Last Modified By.
     * 
     */
    @SerializedName(value = "lastModifiedBy", alternate = {"LastModifiedBy"})
    @Expose
    public IdentitySet lastModifiedBy;

    /**
     * The Last Modified Date Time.
     * 
     */
    @SerializedName(value = "lastModifiedDateTime", alternate = {"LastModifiedDateTime"})
    @Expose
    public java.util.Calendar lastModifiedDateTime;

    /**
     * The Status.
     * 
     */
    @SerializedName(value = "status", alternate = {"Status"})
    @Expose
    public CaseStatus status;

    /**
     * The Custodians.
     * 
     */
    @SerializedName(value = "custodians", alternate = {"Custodians"})
    @Expose
    public CustodianCollectionPage custodians;

    /**
     * The Legal Holds.
     * 
     */
    @SerializedName(value = "legalHolds", alternate = {"LegalHolds"})
    @Expose
    public LegalHoldCollectionPage legalHolds;

    /**
     * The Noncustodial Data Sources.
     * 
     */
    @SerializedName(value = "noncustodialDataSources", alternate = {"NoncustodialDataSources"})
    @Expose
    public NoncustodialDataSourceCollectionPage noncustodialDataSources;

    /**
     * The Operations.
     * 
     */
    @SerializedName(value = "operations", alternate = {"Operations"})
    @Expose
    public CaseOperationCollectionPage operations;

    /**
     * The Review Sets.
     * 
     */
    @SerializedName(value = "reviewSets", alternate = {"ReviewSets"})
    @Expose
    public ReviewSetCollectionPage reviewSets;

    /**
     * The Settings.
     * 
     */
    @SerializedName(value = "settings", alternate = {"Settings"})
    @Expose
    public Settings settings;

    /**
     * The Source Collections.
     * 
     */
    @SerializedName(value = "sourceCollections", alternate = {"SourceCollections"})
    @Expose
    public SourceCollectionCollectionPage sourceCollections;

    /**
     * The Tags.
     * 
     */
    @SerializedName(value = "tags", alternate = {"Tags"})
    @Expose
    public TagCollectionPage tags;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("custodians")) {
            custodians = serializer.deserializeObject(json.get("custodians").toString(), CustodianCollectionPage.class);
        }

        if (json.has("legalHolds")) {
            legalHolds = serializer.deserializeObject(json.get("legalHolds").toString(), LegalHoldCollectionPage.class);
        }

        if (json.has("noncustodialDataSources")) {
            noncustodialDataSources = serializer.deserializeObject(json.get("noncustodialDataSources").toString(), NoncustodialDataSourceCollectionPage.class);
        }

        if (json.has("operations")) {
            operations = serializer.deserializeObject(json.get("operations").toString(), CaseOperationCollectionPage.class);
        }

        if (json.has("reviewSets")) {
            reviewSets = serializer.deserializeObject(json.get("reviewSets").toString(), ReviewSetCollectionPage.class);
        }

        if (json.has("sourceCollections")) {
            sourceCollections = serializer.deserializeObject(json.get("sourceCollections").toString(), SourceCollectionCollectionPage.class);
        }

        if (json.has("tags")) {
            tags = serializer.deserializeObject(json.get("tags").toString(), TagCollectionPage.class);
        }
    }
}
