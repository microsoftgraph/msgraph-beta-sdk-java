// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.networkaccess.models.FilteringRule;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Filtering Rule Request.
 */
public class FilteringRuleRequest extends BaseRequest<FilteringRule> {
	
    /**
     * The request for the FilteringRule
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     * @param responseClass  the class of the response
     */
    public FilteringRuleRequest(@Nonnull final String requestUrl,
            @Nonnull final IBaseClient<?> client,
            @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions,
            @Nonnull final Class<? extends FilteringRule> responseClass) {
        super(requestUrl, client, requestOptions, responseClass);
    }

    /**
     * The request for the FilteringRule
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public FilteringRuleRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, FilteringRule.class);
    }

    /**
     * Gets the FilteringRule from the service
     *
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilteringRule> getAsync() {
        return sendAsync(HttpMethod.GET, null);
    }

    /**
     * Gets the FilteringRule from the service
     *
     * @return the FilteringRule from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilteringRule get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @return a future with the deletion result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilteringRule> deleteAsync() {
        return sendAsync(HttpMethod.DELETE, null);
    }

    /**
     * Delete this item from the service
     * @return the resulting response if the service returns anything on deletion
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    @Nullable
    public FilteringRule delete() throws ClientException {
        return send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this FilteringRule with a source
     *
     * @param sourceFilteringRule the source object with updates
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilteringRule> patchAsync(@Nonnull final FilteringRule sourceFilteringRule) {
        return sendAsync(HttpMethod.PATCH, sourceFilteringRule);
    }

    /**
     * Patches this FilteringRule with a source
     *
     * @param sourceFilteringRule the source object with updates
     * @return the updated FilteringRule
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilteringRule patch(@Nonnull final FilteringRule sourceFilteringRule) throws ClientException {
        return send(HttpMethod.PATCH, sourceFilteringRule);
    }

    /**
     * Creates a FilteringRule with a new object
     *
     * @param newFilteringRule the new object to create
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilteringRule> postAsync(@Nonnull final FilteringRule newFilteringRule) {
        return sendAsync(HttpMethod.POST, newFilteringRule);
    }

    /**
     * Creates a FilteringRule with a new object
     *
     * @param newFilteringRule the new object to create
     * @return the created FilteringRule
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilteringRule post(@Nonnull final FilteringRule newFilteringRule) throws ClientException {
        return send(HttpMethod.POST, newFilteringRule);
    }

    /**
     * Creates a FilteringRule with a new object
     *
     * @param newFilteringRule the object to create/update
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<FilteringRule> putAsync(@Nonnull final FilteringRule newFilteringRule) {
        return sendAsync(HttpMethod.PUT, newFilteringRule);
    }

    /**
     * Creates a FilteringRule with a new object
     *
     * @param newFilteringRule the object to create/update
     * @return the created FilteringRule
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public FilteringRule put(@Nonnull final FilteringRule newFilteringRule) throws ClientException {
        return send(HttpMethod.PUT, newFilteringRule);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public FilteringRuleRequest select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public FilteringRuleRequest expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

}

