// Template Source: BaseEntityRequestBuilder.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.networkaccess.models.NetworkAccessRoot;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Network Access Root Request Builder.
 */
public class NetworkAccessRootRequestBuilder extends BaseRequestBuilder<NetworkAccessRoot> {

    /**
     * The request builder for the NetworkAccessRoot
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public NetworkAccessRootRequestBuilder(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the NetworkAccessRootRequest instance
     */
    @Nonnull
    public NetworkAccessRootRequest buildRequest(@Nullable final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for this request
     * @return the NetworkAccessRootRequest instance
     */
    @Nonnull
    public NetworkAccessRootRequest buildRequest(@Nonnull final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        return new com.microsoft.graph.networkaccess.requests.NetworkAccessRootRequest(getRequestUrl(), getClient(), requestOptions);
    }



    /**
     * Gets the request builder for Logs
     *
     * @return the LogsRequestBuilder instance
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.LogsRequestBuilder logs() {
        return new com.microsoft.graph.networkaccess.requests.LogsRequestBuilder(getRequestUrlWithAdditionalSegment("logs"), getClient(), null);
    }

    /**
     * Gets the request builder for Reports
     *
     * @return the ReportsRequestBuilder instance
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ReportsRequestBuilder reports() {
        return new com.microsoft.graph.networkaccess.requests.ReportsRequestBuilder(getRequestUrlWithAdditionalSegment("reports"), getClient(), null);
    }

    /**
     * Gets the request builder for Connectivity
     *
     * @return the ConnectivityRequestBuilder instance
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ConnectivityRequestBuilder connectivity() {
        return new com.microsoft.graph.networkaccess.requests.ConnectivityRequestBuilder(getRequestUrlWithAdditionalSegment("connectivity"), getClient(), null);
    }
    /**
     *  Gets a request builder for the ForwardingPolicy collection
     *
     * @return the collection request builder
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ForwardingPolicyCollectionRequestBuilder forwardingPolicies() {
        return new com.microsoft.graph.networkaccess.requests.ForwardingPolicyCollectionRequestBuilder(getRequestUrlWithAdditionalSegment("forwardingPolicies"), getClient(), null);
    }

    /**
     * Gets a request builder for the ForwardingPolicy item
     *
     * @return the request builder
     * @param id the item identifier
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ForwardingPolicyRequestBuilder forwardingPolicies(@Nonnull final String id) {
        return new com.microsoft.graph.networkaccess.requests.ForwardingPolicyRequestBuilder(getRequestUrlWithAdditionalSegment("forwardingPolicies") + "/" + id, getClient(), null);
    }
    /**
     *  Gets a request builder for the ForwardingProfile collection
     *
     * @return the collection request builder
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionRequestBuilder forwardingProfiles() {
        return new com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionRequestBuilder(getRequestUrlWithAdditionalSegment("forwardingProfiles"), getClient(), null);
    }

    /**
     * Gets a request builder for the ForwardingProfile item
     *
     * @return the request builder
     * @param id the item identifier
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.ForwardingProfileRequestBuilder forwardingProfiles(@Nonnull final String id) {
        return new com.microsoft.graph.networkaccess.requests.ForwardingProfileRequestBuilder(getRequestUrlWithAdditionalSegment("forwardingProfiles") + "/" + id, getClient(), null);
    }

    /**
     * Gets the request builder for Settings
     *
     * @return the SettingsRequestBuilder instance
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.SettingsRequestBuilder settings() {
        return new com.microsoft.graph.networkaccess.requests.SettingsRequestBuilder(getRequestUrlWithAdditionalSegment("settings"), getClient(), null);
    }

    /**
     * Gets the request builder for TenantStatus
     *
     * @return the TenantStatusRequestBuilder instance
     */
    @Nonnull
    public com.microsoft.graph.networkaccess.requests.TenantStatusRequestBuilder tenantStatus() {
        return new com.microsoft.graph.networkaccess.requests.TenantStatusRequestBuilder(getRequestUrlWithAdditionalSegment("tenantStatus"), getClient(), null);
    }

    /**
     * Gets a builder to execute the method
     * @return the request builder
     */
    @Nonnull
    public NetworkAccessRootOnboardRequestBuilder onboard() {
        return new NetworkAccessRootOnboardRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.networkaccess.onboard"), getClient(), null);
    }
}
