// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.networkaccess.models.DhGroup;
import com.microsoft.graph.networkaccess.models.IkeEncryption;
import com.microsoft.graph.networkaccess.models.IkeIntegrity;
import com.microsoft.graph.networkaccess.models.IpSecEncryption;
import com.microsoft.graph.networkaccess.models.IpSecIntegrity;
import com.microsoft.graph.networkaccess.models.PfsGroup;
import com.microsoft.graph.networkaccess.models.TunnelConfiguration;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Tunnel Configuration IKEv2Custom.
 */
public class TunnelConfigurationIKEv2Custom extends TunnelConfiguration implements IJsonBackedObject {


    /**
     * The Dh Group.
     * Specifies the DH group identifier for IPSec SA negotiation. The possible values are: dhGroup14, dhGroup24, dhGroup2048, ecp256, ecp384.
     */
    @SerializedName(value = "dhGroup", alternate = {"DhGroup"})
    @Expose
	@Nullable
    public DhGroup dhGroup;

    /**
     * The Ike Encryption.
     * Specifies the IKE encryption protocol. The possible values are: aes128, aes192, aes256, gcmAes128, gcmAes256.
     */
    @SerializedName(value = "ikeEncryption", alternate = {"IkeEncryption"})
    @Expose
	@Nullable
    public IkeEncryption ikeEncryption;

    /**
     * The Ike Integrity.
     * Specifies the integration properties of the IKE protocol. The possible values are: sha256, sha384, gcmAes128, gcmAes256.
     */
    @SerializedName(value = "ikeIntegrity", alternate = {"IkeIntegrity"})
    @Expose
	@Nullable
    public IkeIntegrity ikeIntegrity;

    /**
     * The Ip Sec Encryption.
     * Specifies the encryption protocol used for the IPSec tunnel. The possible values are: none, gcmAes128, gcmAes192, gcmAes256.
     */
    @SerializedName(value = "ipSecEncryption", alternate = {"IpSecEncryption"})
    @Expose
	@Nullable
    public IpSecEncryption ipSecEncryption;

    /**
     * The Ip Sec Integrity.
     * Specifies the integrity properties of the IPSec protocol. The possible values are: gcmAes128, gcmAes192, gcmAes256, sha256.
     */
    @SerializedName(value = "ipSecIntegrity", alternate = {"IpSecIntegrity"})
    @Expose
	@Nullable
    public IpSecIntegrity ipSecIntegrity;

    /**
     * The Pfs Group.
     * Specifies the Phase 2 DH group identifier for IPSec SA negotiation. The possible values are: none, pfs1, pfs2, pfs14, pfs24, pfs2048, pfsmm, ecp256, ecp384.
     */
    @SerializedName(value = "pfsGroup", alternate = {"PfsGroup"})
    @Expose
	@Nullable
    public PfsGroup pfsGroup;

    /**
     * The Sa Life Time Seconds.
     * a standard specifiying Security Association lifetime with recommended values from an RFC standard.
     */
    @SerializedName(value = "saLifeTimeSeconds", alternate = {"SaLifeTimeSeconds"})
    @Expose
	@Nullable
    public Long saLifeTimeSeconds;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
