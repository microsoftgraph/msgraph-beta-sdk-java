// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.networkaccess.models.ConnectivityState;
import com.microsoft.graph.networkaccess.models.Region;
import com.microsoft.graph.networkaccess.models.BranchConnectivityConfiguration;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.networkaccess.requests.DeviceLinkCollectionPage;
import com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Branch Site.
 */
public class BranchSite extends Entity implements IJsonBackedObject {


    /**
     * The Bandwidth Capacity.
     * Determines the maximum allowed Mbps (megabits per second) bandwidth from a branch site. The possible values are:250,500,750,1000.
     */
    @SerializedName(value = "bandwidthCapacity", alternate = {"BandwidthCapacity"})
    @Expose
	@Nullable
    public Long bandwidthCapacity;

    /**
     * The Connectivity State.
     * Determines the branch site status. The possible values are: pending, connected, inactive, error.
     */
    @SerializedName(value = "connectivityState", alternate = {"ConnectivityState"})
    @Expose
	@Nullable
    public ConnectivityState connectivityState;

    /**
     * The Country.
     * The branch site is created in the specified country.
     */
    @SerializedName(value = "country", alternate = {"Country"})
    @Expose
	@Nullable
    public String country;

    /**
     * The Last Modified Date Time.
     * last modified time.
     */
    @SerializedName(value = "lastModifiedDateTime", alternate = {"LastModifiedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime lastModifiedDateTime;

    /**
     * The Name.
     * Name.
     */
    @SerializedName(value = "name", alternate = {"Name"})
    @Expose
	@Nullable
    public String name;

    /**
     * The Region.
     * The branch site is created in the specified location.
     */
    @SerializedName(value = "region", alternate = {"Region"})
    @Expose
	@Nullable
    public Region region;

    /**
     * The Version.
     * The branch version.
     */
    @SerializedName(value = "version", alternate = {"Version"})
    @Expose
	@Nullable
    public String version;

    /**
     * The Connectivity Configuration.
     * Specifies the connectivity details of all device links associated with a branch.
     */
    @SerializedName(value = "connectivityConfiguration", alternate = {"ConnectivityConfiguration"})
    @Expose
	@Nullable
    public BranchConnectivityConfiguration connectivityConfiguration;

    /**
     * The Device Links.
     * Each unique CPE device associated with a branch is specified. Supports $expand.
     */
    @SerializedName(value = "deviceLinks", alternate = {"DeviceLinks"})
    @Expose
	@Nullable
    public com.microsoft.graph.networkaccess.requests.DeviceLinkCollectionPage deviceLinks;

    /**
     * The Forwarding Profiles.
     * Each forwarding profile associated with a branch site is specified. Supports $expand.
     */
    @SerializedName(value = "forwardingProfiles", alternate = {"ForwardingProfiles"})
    @Expose
	@Nullable
    public com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage forwardingProfiles;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("deviceLinks")) {
            deviceLinks = serializer.deserializeObject(json.get("deviceLinks"), com.microsoft.graph.networkaccess.requests.DeviceLinkCollectionPage.class);
        }

        if (json.has("forwardingProfiles")) {
            forwardingProfiles = serializer.deserializeObject(json.get("forwardingProfiles"), com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage.class);
        }
    }
}
