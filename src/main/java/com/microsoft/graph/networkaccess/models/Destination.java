// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.networkaccess.models.NetworkingProtocol;
import com.microsoft.graph.networkaccess.models.TrafficType;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Destination.
 */
public class Destination implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Device Count.
     * The number of unique devices that were seen.
     */
    @SerializedName(value = "deviceCount", alternate = {"DeviceCount"})
    @Expose
	@Nullable
    public Integer deviceCount;

    /**
     * The Fqdn.
     * The fully qualified domain name (FQDN) of the destination.
     */
    @SerializedName(value = "fqdn", alternate = {"Fqdn"})
    @Expose
	@Nullable
    public String fqdn;

    /**
     * The Ip.
     * The internet protocol (IP) used to access the destination.
     */
    @SerializedName(value = "ip", alternate = {"Ip"})
    @Expose
	@Nullable
    public String ip;

    /**
     * The Last Access Date Time.
     * The most recent access DateTime.
     */
    @SerializedName(value = "lastAccessDateTime", alternate = {"LastAccessDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime lastAccessDateTime;

    /**
     * The Networking Protocol.
     * The set of communication rules and conventions that govern data transmission between devices in a network. The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, and spxII.
     */
    @SerializedName(value = "networkingProtocol", alternate = {"NetworkingProtocol"})
    @Expose
	@Nullable
    public NetworkingProtocol networkingProtocol;

    /**
     * The Port.
     * The numeric identifier that is associated with a specific endpoint in a network.
     */
    @SerializedName(value = "port", alternate = {"Port"})
    @Expose
	@Nullable
    public Integer port;

    /**
     * The Traffic Type.
     * The traffic classification. The possible values are internet, private, microsoft365, and all.
     */
    @SerializedName(value = "trafficType", alternate = {"TrafficType"})
    @Expose
	@Nullable
    public TrafficType trafficType;

    /**
     * The Transaction Count.
     * The number of transactions.
     */
    @SerializedName(value = "transactionCount", alternate = {"TransactionCount"})
    @Expose
	@Nullable
    public Integer transactionCount;

    /**
     * The User Count.
     * The number of unique Microsoft Entra ID users that were seen.
     */
    @SerializedName(value = "userCount", alternate = {"UserCount"})
    @Expose
	@Nullable
    public Integer userCount;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
