// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.networkaccess.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.networkaccess.models.Logs;
import com.microsoft.graph.networkaccess.models.Reports;
import com.microsoft.graph.networkaccess.models.Connectivity;
import com.microsoft.graph.networkaccess.models.Settings;
import com.microsoft.graph.networkaccess.models.TenantStatus;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.networkaccess.requests.ForwardingPolicyCollectionPage;
import com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Network Access Root.
 */
public class NetworkAccessRoot extends Entity implements IJsonBackedObject {


    /**
     * The Logs.
     * Represnts network connections that are routed through Global Secure Access.
     */
    @SerializedName(value = "logs", alternate = {"Logs"})
    @Expose
	@Nullable
    public Logs logs;

    /**
     * The Reports.
     * Represents the status of the Global Secure Access services for the tenant.
     */
    @SerializedName(value = "reports", alternate = {"Reports"})
    @Expose
	@Nullable
    public Reports reports;

    /**
     * The Connectivity.
     * Connectivity represents all the connectivity components in Global Secure Access.
     */
    @SerializedName(value = "connectivity", alternate = {"Connectivity"})
    @Expose
	@Nullable
    public Connectivity connectivity;

    /**
     * The Forwarding Policies.
     * A forwarding policy defines the specific traffic that is routed through the Gloval Secure Access Service. It is then added to a forwarding profile.
     */
    @SerializedName(value = "forwardingPolicies", alternate = {"ForwardingPolicies"})
    @Expose
	@Nullable
    public com.microsoft.graph.networkaccess.requests.ForwardingPolicyCollectionPage forwardingPolicies;

    /**
     * The Forwarding Profiles.
     * A forwarding profile determines which types of traffic are routed through the Global Secure Access services and which ones are skipped. The handling of specific traffic is determined by the forwarding policies that are added to the forwarding profile.
     */
    @SerializedName(value = "forwardingProfiles", alternate = {"ForwardingProfiles"})
    @Expose
	@Nullable
    public com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage forwardingProfiles;

    /**
     * The Settings.
     * Global Secure Access settings.
     */
    @SerializedName(value = "settings", alternate = {"Settings"})
    @Expose
	@Nullable
    public Settings settings;

    /**
     * The Tenant Status.
     * Represents the status of the Global Secure Access services for the tenant.
     */
    @SerializedName(value = "tenantStatus", alternate = {"TenantStatus"})
    @Expose
	@Nullable
    public TenantStatus tenantStatus;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("forwardingPolicies")) {
            forwardingPolicies = serializer.deserializeObject(json.get("forwardingPolicies"), com.microsoft.graph.networkaccess.requests.ForwardingPolicyCollectionPage.class);
        }

        if (json.has("forwardingProfiles")) {
            forwardingProfiles = serializer.deserializeObject(json.get("forwardingProfiles"), com.microsoft.graph.networkaccess.requests.ForwardingProfileCollectionPage.class);
        }
    }
}
