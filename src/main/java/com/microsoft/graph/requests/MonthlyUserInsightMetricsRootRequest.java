// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.models.MonthlyUserInsightMetricsRoot;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Monthly User Insight Metrics Root Request.
 */
public class MonthlyUserInsightMetricsRootRequest extends BaseRequest<MonthlyUserInsightMetricsRoot> {
	
    /**
     * The request for the MonthlyUserInsightMetricsRoot
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public MonthlyUserInsightMetricsRootRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, MonthlyUserInsightMetricsRoot.class);
    }

    /**
     * Gets the MonthlyUserInsightMetricsRoot from the service
     *
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<MonthlyUserInsightMetricsRoot> getAsync() {
        return sendAsync(HttpMethod.GET, null);
    }

    /**
     * Gets the MonthlyUserInsightMetricsRoot from the service
     *
     * @return the MonthlyUserInsightMetricsRoot from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public MonthlyUserInsightMetricsRoot get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @return a future with the deletion result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<MonthlyUserInsightMetricsRoot> deleteAsync() {
        return sendAsync(HttpMethod.DELETE, null);
    }

    /**
     * Delete this item from the service
     * @return the resulting response if the service returns anything on deletion
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    @Nullable
    public MonthlyUserInsightMetricsRoot delete() throws ClientException {
        return send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this MonthlyUserInsightMetricsRoot with a source
     *
     * @param sourceMonthlyUserInsightMetricsRoot the source object with updates
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<MonthlyUserInsightMetricsRoot> patchAsync(@Nonnull final MonthlyUserInsightMetricsRoot sourceMonthlyUserInsightMetricsRoot) {
        return sendAsync(HttpMethod.PATCH, sourceMonthlyUserInsightMetricsRoot);
    }

    /**
     * Patches this MonthlyUserInsightMetricsRoot with a source
     *
     * @param sourceMonthlyUserInsightMetricsRoot the source object with updates
     * @return the updated MonthlyUserInsightMetricsRoot
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public MonthlyUserInsightMetricsRoot patch(@Nonnull final MonthlyUserInsightMetricsRoot sourceMonthlyUserInsightMetricsRoot) throws ClientException {
        return send(HttpMethod.PATCH, sourceMonthlyUserInsightMetricsRoot);
    }

    /**
     * Creates a MonthlyUserInsightMetricsRoot with a new object
     *
     * @param newMonthlyUserInsightMetricsRoot the new object to create
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<MonthlyUserInsightMetricsRoot> postAsync(@Nonnull final MonthlyUserInsightMetricsRoot newMonthlyUserInsightMetricsRoot) {
        return sendAsync(HttpMethod.POST, newMonthlyUserInsightMetricsRoot);
    }

    /**
     * Creates a MonthlyUserInsightMetricsRoot with a new object
     *
     * @param newMonthlyUserInsightMetricsRoot the new object to create
     * @return the created MonthlyUserInsightMetricsRoot
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public MonthlyUserInsightMetricsRoot post(@Nonnull final MonthlyUserInsightMetricsRoot newMonthlyUserInsightMetricsRoot) throws ClientException {
        return send(HttpMethod.POST, newMonthlyUserInsightMetricsRoot);
    }

    /**
     * Creates a MonthlyUserInsightMetricsRoot with a new object
     *
     * @param newMonthlyUserInsightMetricsRoot the object to create/update
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<MonthlyUserInsightMetricsRoot> putAsync(@Nonnull final MonthlyUserInsightMetricsRoot newMonthlyUserInsightMetricsRoot) {
        return sendAsync(HttpMethod.PUT, newMonthlyUserInsightMetricsRoot);
    }

    /**
     * Creates a MonthlyUserInsightMetricsRoot with a new object
     *
     * @param newMonthlyUserInsightMetricsRoot the object to create/update
     * @return the created MonthlyUserInsightMetricsRoot
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public MonthlyUserInsightMetricsRoot put(@Nonnull final MonthlyUserInsightMetricsRoot newMonthlyUserInsightMetricsRoot) throws ClientException {
        return send(HttpMethod.PUT, newMonthlyUserInsightMetricsRoot);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public MonthlyUserInsightMetricsRootRequest select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public MonthlyUserInsightMetricsRootRequest expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

}

