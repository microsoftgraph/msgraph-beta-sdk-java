// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.MicrosoftTunnelServer;
import com.microsoft.graph.models.extensions.MicrosoftTunnelServerLogCollectionResponse;
import com.microsoft.graph.models.extensions.KeyLongValuePair;
import com.microsoft.graph.models.extensions.KeyValuePair;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Microsoft Tunnel Server Request.
 */
public class MicrosoftTunnelServerRequest extends BaseRequest implements IMicrosoftTunnelServerRequest {
	
    /**
     * The request for the MicrosoftTunnelServer
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public MicrosoftTunnelServerRequest(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, MicrosoftTunnelServer.class);
    }

    /**
     * Gets the MicrosoftTunnelServer from the service
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(final ICallback<? super MicrosoftTunnelServer> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the MicrosoftTunnelServer from the service
     *
     * @return the MicrosoftTunnelServer from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public MicrosoftTunnelServer get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @param callback the callback when the deletion action has completed
     */
    public void delete(final ICallback<? super MicrosoftTunnelServer> callback) {
        send(HttpMethod.DELETE, callback, null);
    }

    /**
     * Delete this item from the service
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    public void delete() throws ClientException {
        send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this MicrosoftTunnelServer with a source
     *
     * @param sourceMicrosoftTunnelServer the source object with updates
     * @param callback the callback to be called after success or failure
     */
    public void patch(final MicrosoftTunnelServer sourceMicrosoftTunnelServer, final ICallback<? super MicrosoftTunnelServer> callback) {
        send(HttpMethod.PATCH, callback, sourceMicrosoftTunnelServer);
    }

    /**
     * Patches this MicrosoftTunnelServer with a source
     *
     * @param sourceMicrosoftTunnelServer the source object with updates
     * @return the updated MicrosoftTunnelServer
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public MicrosoftTunnelServer patch(final MicrosoftTunnelServer sourceMicrosoftTunnelServer) throws ClientException {
        return send(HttpMethod.PATCH, sourceMicrosoftTunnelServer);
    }

    /**
     * Creates a MicrosoftTunnelServer with a new object
     *
     * @param newMicrosoftTunnelServer the new object to create
     * @param callback the callback to be called after success or failure
     */
    public void post(final MicrosoftTunnelServer newMicrosoftTunnelServer, final ICallback<? super MicrosoftTunnelServer> callback) {
        send(HttpMethod.POST, callback, newMicrosoftTunnelServer);
    }

    /**
     * Creates a MicrosoftTunnelServer with a new object
     *
     * @param newMicrosoftTunnelServer the new object to create
     * @return the created MicrosoftTunnelServer
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public MicrosoftTunnelServer post(final MicrosoftTunnelServer newMicrosoftTunnelServer) throws ClientException {
        return send(HttpMethod.POST, newMicrosoftTunnelServer);
    }

    /**
     * Creates a MicrosoftTunnelServer with a new object
     *
     * @param newMicrosoftTunnelServer the object to create/update
     * @param callback the callback to be called after success or failure
     */
    public void put(final MicrosoftTunnelServer newMicrosoftTunnelServer, final ICallback<? super MicrosoftTunnelServer> callback) {
        send(HttpMethod.PUT, callback, newMicrosoftTunnelServer);
    }

    /**
     * Creates a MicrosoftTunnelServer with a new object
     *
     * @param newMicrosoftTunnelServer the object to create/update
     * @return the created MicrosoftTunnelServer
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public MicrosoftTunnelServer put(final MicrosoftTunnelServer newMicrosoftTunnelServer) throws ClientException {
        return send(HttpMethod.PUT, newMicrosoftTunnelServer);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     public IMicrosoftTunnelServerRequest select(final String value) {
         getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
         return (MicrosoftTunnelServerRequest)this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     public IMicrosoftTunnelServerRequest expand(final String value) {
         getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
         return (MicrosoftTunnelServerRequest)this;
     }

}

