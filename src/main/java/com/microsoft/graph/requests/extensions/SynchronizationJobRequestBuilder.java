// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.SynchronizationJob;
import com.microsoft.graph.models.extensions.SynchronizationJobApplicationParameters;
import com.microsoft.graph.models.extensions.StringKeyStringValuePair;
import com.microsoft.graph.models.extensions.SynchronizationJobRestartCriteria;
import com.microsoft.graph.models.extensions.SynchronizationSecretKeyStringValuePair;
import com.microsoft.graph.requests.extensions.ISynchronizationSchemaRequestBuilder;
import com.microsoft.graph.requests.extensions.SynchronizationSchemaRequestBuilder;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Synchronization Job Request Builder.
 */
public class SynchronizationJobRequestBuilder extends BaseRequestBuilder implements ISynchronizationJobRequestBuilder {

    /**
     * The request builder for the SynchronizationJob
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public SynchronizationJobRequestBuilder(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the ISynchronizationJobRequest instance
     */
    public ISynchronizationJobRequest buildRequest(final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for this request
     * @return the ISynchronizationJobRequest instance
     */
    public ISynchronizationJobRequest buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        return new com.microsoft.graph.requests.extensions.SynchronizationJobRequest(getRequestUrl(), getClient(), requestOptions);
    }



    /**
     * Gets the request builder for SynchronizationSchema
     *
     * @return the ISynchronizationSchemaRequestBuilder instance
     */
    public ISynchronizationSchemaRequestBuilder schema() {
        return new SynchronizationSchemaRequestBuilder(getRequestUrlWithAdditionalSegment("schema"), getClient(), null);
    }

    public ISynchronizationJobPauseRequestBuilder pause() {
        return new SynchronizationJobPauseRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.pause"), getClient(), null);
    }

    public ISynchronizationJobStartRequestBuilder start() {
        return new SynchronizationJobStartRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.start"), getClient(), null);
    }

    public ISynchronizationJobProvisionOnDemandRequestBuilder provisionOnDemand(final java.util.List<SynchronizationJobApplicationParameters> parameters) {
        return new SynchronizationJobProvisionOnDemandRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.provisionOnDemand"), getClient(), null, parameters);
    }

    public ISynchronizationJobRestartRequestBuilder restart(final SynchronizationJobRestartCriteria criteria) {
        return new SynchronizationJobRestartRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.restart"), getClient(), null, criteria);
    }

    public ISynchronizationJobStopRequestBuilder stop() {
        return new SynchronizationJobStopRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.stop"), getClient(), null);
    }

    public ISynchronizationJobValidateCredentialsRequestBuilder validateCredentials(final String applicationIdentifier, final String templateId, final Boolean useSavedCredentials, final java.util.List<SynchronizationSecretKeyStringValuePair> credentials) {
        return new SynchronizationJobValidateCredentialsRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.validateCredentials"), getClient(), null, applicationIdentifier, templateId, useSavedCredentials, credentials);
    }
}
