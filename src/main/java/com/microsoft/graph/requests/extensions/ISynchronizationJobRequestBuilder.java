// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.SynchronizationJob;
import com.microsoft.graph.models.extensions.SynchronizationJobApplicationParameters;
import com.microsoft.graph.models.extensions.StringKeyStringValuePair;
import com.microsoft.graph.models.extensions.SynchronizationJobRestartCriteria;
import com.microsoft.graph.models.extensions.SynchronizationSecretKeyStringValuePair;
import com.microsoft.graph.requests.extensions.ISynchronizationSchemaRequestBuilder;
import java.util.Arrays;
import java.util.EnumSet;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The interface for the Synchronization Job Request Builder.
 */
public interface ISynchronizationJobRequestBuilder extends IRequestBuilder {
    /**
     * Creates the request
     *
     * @return the ISynchronizationJobRequest instance
     */
    ISynchronizationJobRequest buildRequest();

    /**
     * Creates the request with specific options instead of the existing options
     *
     * @param requestOptions the options for this request
     * @return the ISynchronizationJobRequest instance
     */
    ISynchronizationJobRequest buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions);


    /**
     * Gets the request builder for SynchronizationSchema
     *
     * @return the ISynchronizationSchemaRequestBuilder instance
     */
    ISynchronizationSchemaRequestBuilder schema();
    ISynchronizationJobPauseRequestBuilder pause();
    ISynchronizationJobProvisionOnDemandRequestBuilder provisionOnDemand(final java.util.List<SynchronizationJobApplicationParameters> parameters);
    ISynchronizationJobStartRequestBuilder start();
    ISynchronizationJobStopRequestBuilder stop();
    ISynchronizationJobRestartRequestBuilder restart(final SynchronizationJobRestartCriteria criteria);
    ISynchronizationJobValidateCredentialsRequestBuilder validateCredentials(final String applicationIdentifier, final String templateId, final Boolean useSavedCredentials, final java.util.List<SynchronizationSecretKeyStringValuePair> credentials);

}