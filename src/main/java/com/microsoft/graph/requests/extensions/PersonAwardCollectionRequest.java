// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.Profile;
import com.microsoft.graph.models.extensions.PersonAward;
import java.util.Arrays;
import java.util.EnumSet;

import com.microsoft.graph.options.QueryOption;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseCollectionRequest;
import com.microsoft.graph.concurrency.IExecutors;
import com.microsoft.graph.requests.extensions.IPersonAwardCollectionPage;
import com.microsoft.graph.requests.extensions.PersonAwardCollectionResponse;
import com.microsoft.graph.requests.extensions.IPersonAwardCollectionRequestBuilder;
import com.microsoft.graph.requests.extensions.IPersonAwardCollectionRequest;
import com.microsoft.graph.requests.extensions.PersonAwardCollectionPage;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Person Award Collection Request.
 */
public class PersonAwardCollectionRequest extends BaseCollectionRequest<PersonAwardCollectionResponse, IPersonAwardCollectionPage> implements IPersonAwardCollectionRequest {

    /**
     * The request builder for this collection of PersonAward
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public PersonAwardCollectionRequest(final String requestUrl, IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, PersonAwardCollectionResponse.class, IPersonAwardCollectionPage.class);
    }

    public void get(final ICallback<IPersonAwardCollectionPage> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public IPersonAwardCollectionPage get() throws ClientException {
        final PersonAwardCollectionResponse response = send();
        return buildFromResponse(response);
    }

    public void post(final PersonAward newPersonAward, final ICallback<PersonAward> callback) {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        new PersonAwardRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest(getBaseRequest().getOptions())
            .post(newPersonAward, callback);
    }

    public PersonAward post(final PersonAward newPersonAward) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        return new PersonAwardRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest(getBaseRequest().getOptions())
            .post(newPersonAward);
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public IPersonAwardCollectionRequest expand(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (PersonAwardCollectionRequest)this;
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public IPersonAwardCollectionRequest select(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$select", value));
        return (PersonAwardCollectionRequest)this;
    }

    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public IPersonAwardCollectionRequest top(final int value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$top", value + ""));
        return (PersonAwardCollectionRequest)this;
    }

    public IPersonAwardCollectionPage buildFromResponse(final PersonAwardCollectionResponse response) {
        final IPersonAwardCollectionRequestBuilder builder;
        if (response.nextLink != null) {
            builder = new PersonAwardCollectionRequestBuilder(response.nextLink, getBaseRequest().getClient(), /* options */ null);
        } else {
            builder = null;
        }
        final PersonAwardCollectionPage page = new PersonAwardCollectionPage(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
}
