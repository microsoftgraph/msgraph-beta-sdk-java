// Template Source: BaseEntityRequestBuilder.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.models.extensions.MicrosoftTunnelServer;
import com.microsoft.graph.models.extensions.MicrosoftTunnelServerLogCollectionResponse;
import com.microsoft.graph.models.extensions.KeyLongValuePair;
import com.microsoft.graph.models.extensions.KeyValuePair;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequestBuilder;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Microsoft Tunnel Server Request Builder.
 */
public class MicrosoftTunnelServerRequestBuilder extends BaseRequestBuilder implements IMicrosoftTunnelServerRequestBuilder {

    /**
     * The request builder for the MicrosoftTunnelServer
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public MicrosoftTunnelServerRequestBuilder(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the IMicrosoftTunnelServerRequest instance
     */
    public IMicrosoftTunnelServerRequest buildRequest(final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for this request
     * @return the IMicrosoftTunnelServerRequest instance
     */
    public IMicrosoftTunnelServerRequest buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        return new com.microsoft.graph.requests.extensions.MicrosoftTunnelServerRequest(getRequestUrl(), getClient(), requestOptions);
    }



    public IMicrosoftTunnelServerCreateServerLogCollectionRequestRequestBuilder createServerLogCollectionRequest(final java.util.Calendar startDateTime, final java.util.Calendar endDateTime) {
        return new MicrosoftTunnelServerCreateServerLogCollectionRequestRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.createServerLogCollectionRequest"), getClient(), null, startDateTime, endDateTime);
    }

    public IMicrosoftTunnelServerGetHealthMetricsCollectionRequestBuilder getHealthMetrics(final java.util.List<String> metricNames) {
        return new MicrosoftTunnelServerGetHealthMetricsCollectionRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.getHealthMetrics"), getClient(), null, metricNames);
    }

    public IMicrosoftTunnelServerGetHealthMetricTimeSeriesCollectionRequestBuilder getHealthMetricTimeSeries(final String metricName, final java.util.Calendar startTime, final java.util.Calendar endTime) {
        return new MicrosoftTunnelServerGetHealthMetricTimeSeriesCollectionRequestBuilder(getRequestUrlWithAdditionalSegment("microsoft.graph.getHealthMetricTimeSeries"), getClient(), null, metricName, startTime, endTime);
    }
}
