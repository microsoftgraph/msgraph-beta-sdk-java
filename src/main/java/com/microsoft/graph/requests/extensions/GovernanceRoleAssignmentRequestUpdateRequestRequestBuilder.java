// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;
import com.microsoft.graph.requests.extensions.IGovernanceRoleAssignmentRequestUpdateRequestRequest;
import com.microsoft.graph.requests.extensions.GovernanceRoleAssignmentRequestUpdateRequestRequest;
import com.microsoft.graph.models.extensions.GovernanceSchedule;
import com.microsoft.graph.models.extensions.GovernanceRoleAssignmentRequest;
import com.microsoft.graph.core.BaseActionRequestBuilder;
import com.microsoft.graph.core.BaseFunctionRequestBuilder;
import com.microsoft.graph.core.IBaseClient;
import com.google.gson.JsonElement;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Governance Role Assignment Request Update Request Request Builder.
 */
public class GovernanceRoleAssignmentRequestUpdateRequestRequestBuilder extends BaseActionRequestBuilder implements IGovernanceRoleAssignmentRequestUpdateRequestRequestBuilder {

    /**
     * The request builder for this GovernanceRoleAssignmentRequestUpdateRequest
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     * @param decision the decision
     * @param assignmentState the assignmentState
     * @param schedule the schedule
     * @param reason the reason
     */
    public GovernanceRoleAssignmentRequestUpdateRequestRequestBuilder(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions, final String decision, final String assignmentState, final GovernanceSchedule schedule, final String reason) {
        super(requestUrl, client, requestOptions);
        bodyParams.put("decision", decision);
        bodyParams.put("assignmentState", assignmentState);
        bodyParams.put("schedule", schedule);
        bodyParams.put("reason", reason);
    }

    /**
     * Creates the IGovernanceRoleAssignmentRequestUpdateRequestRequest
     *
     * @param requestOptions the options for the request
     * @return the IGovernanceRoleAssignmentRequestUpdateRequestRequest instance
     */
    public IGovernanceRoleAssignmentRequestUpdateRequestRequest buildRequest(final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the IGovernanceRoleAssignmentRequestUpdateRequestRequest with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for the request
     * @return the IGovernanceRoleAssignmentRequestUpdateRequestRequest instance
     */
    public IGovernanceRoleAssignmentRequestUpdateRequestRequest buildRequest(final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        GovernanceRoleAssignmentRequestUpdateRequestRequest request = new GovernanceRoleAssignmentRequestUpdateRequestRequest(
                getRequestUrl(),
                getClient(),
                requestOptions
        );

        if (hasParameter("decision")) {
            request.body.decision = getParameter("decision");
        }

        if (hasParameter("assignmentState")) {
            request.body.assignmentState = getParameter("assignmentState");
        }

        if (hasParameter("schedule")) {
            request.body.schedule = getParameter("schedule");
        }

        if (hasParameter("reason")) {
            request.body.reason = getParameter("reason");
        }

        return request;
    }
}
